!function(e){var t=window.webpackHotUpdate;window.webpackHotUpdate=function(e,r){!function(e,t){if(!w[e]||!y[e])return;for(var r in y[e]=!1,t)Object.prototype.hasOwnProperty.call(t,r)&&(h[r]=t[r]);0==--m&&0===g&&k()}(e,r),t&&t(e,r)};var r,n=!0,o="f577d8fbb47b1284fd33",i=1e4,s={},a=[],c=[];function l(e){var t=L[e];if(!t)return q;var n=function(n){return t.hot.active?(L[n]?-1===L[n].parents.indexOf(e)&&L[n].parents.push(e):(a=[e],r=n),-1===t.children.indexOf(n)&&t.children.push(n)):(console.warn("[HMR] unexpected require("+n+") from disposed module "+e),a=[]),q(n)},o=function(e){return{configurable:!0,enumerable:!0,get:function(){return q[e]},set:function(t){q[e]=t}}};for(var i in q)Object.prototype.hasOwnProperty.call(q,i)&&"e"!==i&&Object.defineProperty(n,i,o(i));return n.e=function(e){return"ready"===d&&p("prepare"),g++,q.e(e).then(t,function(e){throw t(),e});function t(){g--,"prepare"===d&&(b[e]||A(e),0===g&&0===m&&k())}},n}var u=[],d="idle";function p(e){d=e;for(var t=0;t<u.length;t++)u[t].call(null,e)}var f,h,v,m=0,g=0,b={},y={},w={};function x(e){return+e+""===e?+e:e}function E(e){if("idle"!==d)throw new Error("check() is only allowed in idle status");return n=e,p("check"),(t=i,t=t||1e4,new Promise(function(e,r){if("undefined"==typeof XMLHttpRequest)return r(new Error("No browser support"));try{var n=new XMLHttpRequest,i=q.p+""+o+".hot-update.json";n.open("GET",i,!0),n.timeout=t,n.send(null)}catch(e){return r(e)}n.onreadystatechange=function(){if(4===n.readyState)if(0===n.status)r(new Error("Manifest request to "+i+" timed out."));else if(404===n.status)e();else if(200!==n.status&&304!==n.status)r(new Error("Manifest request to "+i+" failed."));else{try{var t=JSON.parse(n.responseText)}catch(e){return void r(e)}e(t)}}})).then(function(e){if(!e)return p("idle"),null;y={},b={},w=e.c,v=e.h,p("prepare");var t=new Promise(function(e,t){f={resolve:e,reject:t}});h={};return A(0),"prepare"===d&&0===g&&0===m&&k(),t});var t}function A(e){w[e]?(y[e]=!0,m++,function(e){var t=document.getElementsByTagName("head")[0],r=document.createElement("script");r.charset="utf-8",r.src=q.p+""+e+"."+o+".hot-update.js",t.appendChild(r)}(e)):b[e]=!0}function k(){p("ready");var e=f;if(f=null,e)if(n)Promise.resolve().then(function(){return S(n)}).then(function(t){e.resolve(t)},function(t){e.reject(t)});else{var t=[];for(var r in h)Object.prototype.hasOwnProperty.call(h,r)&&t.push(x(r));e.resolve(t)}}function S(t){if("ready"!==d)throw new Error("apply() is only allowed in ready status");var r,n,i,c,l;function u(e){for(var t=[e],r={},n=t.slice().map(function(e){return{chain:[e],id:e}});n.length>0;){var o=n.pop(),i=o.id,s=o.chain;if((c=L[i])&&!c.hot._selfAccepted){if(c.hot._selfDeclined)return{type:"self-declined",chain:s,moduleId:i};if(c.hot._main)return{type:"unaccepted",chain:s,moduleId:i};for(var a=0;a<c.parents.length;a++){var l=c.parents[a],u=L[l];if(u){if(u.hot._declinedDependencies[i])return{type:"declined",chain:s.concat([l]),moduleId:i,parentId:l};-1===t.indexOf(l)&&(u.hot._acceptedDependencies[i]?(r[l]||(r[l]=[]),f(r[l],[i])):(delete r[l],t.push(l),n.push({chain:s.concat([l]),id:l})))}}}}return{type:"accepted",moduleId:e,outdatedModules:t,outdatedDependencies:r}}function f(e,t){for(var r=0;r<t.length;r++){var n=t[r];-1===e.indexOf(n)&&e.push(n)}}t=t||{};var m={},g=[],b={},y=function(){console.warn("[HMR] unexpected require("+A.moduleId+") to disposed module")};for(var E in h)if(Object.prototype.hasOwnProperty.call(h,E)){var A;l=x(E);var k=!1,S=!1,N=!1,T="";switch((A=h[E]?u(l):{type:"disposed",moduleId:E}).chain&&(T="\nUpdate propagation: "+A.chain.join(" -> ")),A.type){case"self-declined":t.onDeclined&&t.onDeclined(A),t.ignoreDeclined||(k=new Error("Aborted because of self decline: "+A.moduleId+T));break;case"declined":t.onDeclined&&t.onDeclined(A),t.ignoreDeclined||(k=new Error("Aborted because of declined dependency: "+A.moduleId+" in "+A.parentId+T));break;case"unaccepted":t.onUnaccepted&&t.onUnaccepted(A),t.ignoreUnaccepted||(k=new Error("Aborted because "+l+" is not accepted"+T));break;case"accepted":t.onAccepted&&t.onAccepted(A),S=!0;break;case"disposed":t.onDisposed&&t.onDisposed(A),N=!0;break;default:throw new Error("Unexception type "+A.type)}if(k)return p("abort"),Promise.reject(k);if(S)for(l in b[l]=h[l],f(g,A.outdatedModules),A.outdatedDependencies)Object.prototype.hasOwnProperty.call(A.outdatedDependencies,l)&&(m[l]||(m[l]=[]),f(m[l],A.outdatedDependencies[l]));N&&(f(g,[A.moduleId]),b[l]=y)}var C,_=[];for(n=0;n<g.length;n++)l=g[n],L[l]&&L[l].hot._selfAccepted&&_.push({module:l,errorHandler:L[l].hot._selfAccepted});p("dispose"),Object.keys(w).forEach(function(e){!1===w[e]&&function(e){delete installedChunks[e]}(e)});for(var O,j,I=g.slice();I.length>0;)if(l=I.pop(),c=L[l]){var D={},R=c.hot._disposeHandlers;for(i=0;i<R.length;i++)(r=R[i])(D);for(s[l]=D,c.hot.active=!1,delete L[l],delete m[l],i=0;i<c.children.length;i++){var M=L[c.children[i]];M&&((C=M.parents.indexOf(l))>=0&&M.parents.splice(C,1))}}for(l in m)if(Object.prototype.hasOwnProperty.call(m,l)&&(c=L[l]))for(j=m[l],i=0;i<j.length;i++)O=j[i],(C=c.children.indexOf(O))>=0&&c.children.splice(C,1);for(l in p("apply"),o=v,b)Object.prototype.hasOwnProperty.call(b,l)&&(e[l]=b[l]);var P=null;for(l in m)if(Object.prototype.hasOwnProperty.call(m,l)&&(c=L[l])){j=m[l];var U=[];for(n=0;n<j.length;n++)if(O=j[n],r=c.hot._acceptedDependencies[O]){if(-1!==U.indexOf(r))continue;U.push(r)}for(n=0;n<U.length;n++){r=U[n];try{r(j)}catch(e){t.onErrored&&t.onErrored({type:"accept-errored",moduleId:l,dependencyId:j[n],error:e}),t.ignoreErrored||P||(P=e)}}}for(n=0;n<_.length;n++){var H=_[n];l=H.module,a=[l];try{q(l)}catch(e){if("function"==typeof H.errorHandler)try{H.errorHandler(e)}catch(r){t.onErrored&&t.onErrored({type:"self-accept-error-handler-errored",moduleId:l,error:r,originalError:e}),t.ignoreErrored||P||(P=r),P||(P=e)}else t.onErrored&&t.onErrored({type:"self-accept-errored",moduleId:l,error:e}),t.ignoreErrored||P||(P=e)}}return P?(p("fail"),Promise.reject(P)):(p("idle"),new Promise(function(e){e(g)}))}var L={};function q(t){if(L[t])return L[t].exports;var n=L[t]={i:t,l:!1,exports:{},hot:function(e){var t={_acceptedDependencies:{},_declinedDependencies:{},_selfAccepted:!1,_selfDeclined:!1,_disposeHandlers:[],_main:r!==e,active:!0,accept:function(e,r){if(void 0===e)t._selfAccepted=!0;else if("function"==typeof e)t._selfAccepted=e;else if("object"==typeof e)for(var n=0;n<e.length;n++)t._acceptedDependencies[e[n]]=r||function(){};else t._acceptedDependencies[e]=r||function(){}},decline:function(e){if(void 0===e)t._selfDeclined=!0;else if("object"==typeof e)for(var r=0;r<e.length;r++)t._declinedDependencies[e[r]]=!0;else t._declinedDependencies[e]=!0},dispose:function(e){t._disposeHandlers.push(e)},addDisposeHandler:function(e){t._disposeHandlers.push(e)},removeDisposeHandler:function(e){var r=t._disposeHandlers.indexOf(e);r>=0&&t._disposeHandlers.splice(r,1)},check:E,apply:S,status:function(e){if(!e)return d;u.push(e)},addStatusHandler:function(e){u.push(e)},removeStatusHandler:function(e){var t=u.indexOf(e);t>=0&&u.splice(t,1)},data:s[e]};return r=void 0,t}(t),parents:(c=a,a=[],c),children:[]};return e[t].call(n.exports,n,n.exports,l(t)),n.l=!0,n.exports}q.m=e,q.c=L,q.d=function(e,t,r){q.o(e,t)||Object.defineProperty(e,t,{configurable:!1,enumerable:!0,get:r})},q.r=function(e){Object.defineProperty(e,"__esModule",{value:!0})},q.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return q.d(t,"a",t),t},q.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},q.p="",q.h=function(){return o},l(27)(q.s=27)}([function(e,t){var r=[["Aacute",[193]],["aacute",[225]],["Abreve",[258]],["abreve",[259]],["ac",[8766]],["acd",[8767]],["acE",[8766,819]],["Acirc",[194]],["acirc",[226]],["acute",[180]],["Acy",[1040]],["acy",[1072]],["AElig",[198]],["aelig",[230]],["af",[8289]],["Afr",[120068]],["afr",[120094]],["Agrave",[192]],["agrave",[224]],["alefsym",[8501]],["aleph",[8501]],["Alpha",[913]],["alpha",[945]],["Amacr",[256]],["amacr",[257]],["amalg",[10815]],["amp",[38]],["AMP",[38]],["andand",[10837]],["And",[10835]],["and",[8743]],["andd",[10844]],["andslope",[10840]],["andv",[10842]],["ang",[8736]],["ange",[10660]],["angle",[8736]],["angmsdaa",[10664]],["angmsdab",[10665]],["angmsdac",[10666]],["angmsdad",[10667]],["angmsdae",[10668]],["angmsdaf",[10669]],["angmsdag",[10670]],["angmsdah",[10671]],["angmsd",[8737]],["angrt",[8735]],["angrtvb",[8894]],["angrtvbd",[10653]],["angsph",[8738]],["angst",[197]],["angzarr",[9084]],["Aogon",[260]],["aogon",[261]],["Aopf",[120120]],["aopf",[120146]],["apacir",[10863]],["ap",[8776]],["apE",[10864]],["ape",[8778]],["apid",[8779]],["apos",[39]],["ApplyFunction",[8289]],["approx",[8776]],["approxeq",[8778]],["Aring",[197]],["aring",[229]],["Ascr",[119964]],["ascr",[119990]],["Assign",[8788]],["ast",[42]],["asymp",[8776]],["asympeq",[8781]],["Atilde",[195]],["atilde",[227]],["Auml",[196]],["auml",[228]],["awconint",[8755]],["awint",[10769]],["backcong",[8780]],["backepsilon",[1014]],["backprime",[8245]],["backsim",[8765]],["backsimeq",[8909]],["Backslash",[8726]],["Barv",[10983]],["barvee",[8893]],["barwed",[8965]],["Barwed",[8966]],["barwedge",[8965]],["bbrk",[9141]],["bbrktbrk",[9142]],["bcong",[8780]],["Bcy",[1041]],["bcy",[1073]],["bdquo",[8222]],["becaus",[8757]],["because",[8757]],["Because",[8757]],["bemptyv",[10672]],["bepsi",[1014]],["bernou",[8492]],["Bernoullis",[8492]],["Beta",[914]],["beta",[946]],["beth",[8502]],["between",[8812]],["Bfr",[120069]],["bfr",[120095]],["bigcap",[8898]],["bigcirc",[9711]],["bigcup",[8899]],["bigodot",[10752]],["bigoplus",[10753]],["bigotimes",[10754]],["bigsqcup",[10758]],["bigstar",[9733]],["bigtriangledown",[9661]],["bigtriangleup",[9651]],["biguplus",[10756]],["bigvee",[8897]],["bigwedge",[8896]],["bkarow",[10509]],["blacklozenge",[10731]],["blacksquare",[9642]],["blacktriangle",[9652]],["blacktriangledown",[9662]],["blacktriangleleft",[9666]],["blacktriangleright",[9656]],["blank",[9251]],["blk12",[9618]],["blk14",[9617]],["blk34",[9619]],["block",[9608]],["bne",[61,8421]],["bnequiv",[8801,8421]],["bNot",[10989]],["bnot",[8976]],["Bopf",[120121]],["bopf",[120147]],["bot",[8869]],["bottom",[8869]],["bowtie",[8904]],["boxbox",[10697]],["boxdl",[9488]],["boxdL",[9557]],["boxDl",[9558]],["boxDL",[9559]],["boxdr",[9484]],["boxdR",[9554]],["boxDr",[9555]],["boxDR",[9556]],["boxh",[9472]],["boxH",[9552]],["boxhd",[9516]],["boxHd",[9572]],["boxhD",[9573]],["boxHD",[9574]],["boxhu",[9524]],["boxHu",[9575]],["boxhU",[9576]],["boxHU",[9577]],["boxminus",[8863]],["boxplus",[8862]],["boxtimes",[8864]],["boxul",[9496]],["boxuL",[9563]],["boxUl",[9564]],["boxUL",[9565]],["boxur",[9492]],["boxuR",[9560]],["boxUr",[9561]],["boxUR",[9562]],["boxv",[9474]],["boxV",[9553]],["boxvh",[9532]],["boxvH",[9578]],["boxVh",[9579]],["boxVH",[9580]],["boxvl",[9508]],["boxvL",[9569]],["boxVl",[9570]],["boxVL",[9571]],["boxvr",[9500]],["boxvR",[9566]],["boxVr",[9567]],["boxVR",[9568]],["bprime",[8245]],["breve",[728]],["Breve",[728]],["brvbar",[166]],["bscr",[119991]],["Bscr",[8492]],["bsemi",[8271]],["bsim",[8765]],["bsime",[8909]],["bsolb",[10693]],["bsol",[92]],["bsolhsub",[10184]],["bull",[8226]],["bullet",[8226]],["bump",[8782]],["bumpE",[10926]],["bumpe",[8783]],["Bumpeq",[8782]],["bumpeq",[8783]],["Cacute",[262]],["cacute",[263]],["capand",[10820]],["capbrcup",[10825]],["capcap",[10827]],["cap",[8745]],["Cap",[8914]],["capcup",[10823]],["capdot",[10816]],["CapitalDifferentialD",[8517]],["caps",[8745,65024]],["caret",[8257]],["caron",[711]],["Cayleys",[8493]],["ccaps",[10829]],["Ccaron",[268]],["ccaron",[269]],["Ccedil",[199]],["ccedil",[231]],["Ccirc",[264]],["ccirc",[265]],["Cconint",[8752]],["ccups",[10828]],["ccupssm",[10832]],["Cdot",[266]],["cdot",[267]],["cedil",[184]],["Cedilla",[184]],["cemptyv",[10674]],["cent",[162]],["centerdot",[183]],["CenterDot",[183]],["cfr",[120096]],["Cfr",[8493]],["CHcy",[1063]],["chcy",[1095]],["check",[10003]],["checkmark",[10003]],["Chi",[935]],["chi",[967]],["circ",[710]],["circeq",[8791]],["circlearrowleft",[8634]],["circlearrowright",[8635]],["circledast",[8859]],["circledcirc",[8858]],["circleddash",[8861]],["CircleDot",[8857]],["circledR",[174]],["circledS",[9416]],["CircleMinus",[8854]],["CirclePlus",[8853]],["CircleTimes",[8855]],["cir",[9675]],["cirE",[10691]],["cire",[8791]],["cirfnint",[10768]],["cirmid",[10991]],["cirscir",[10690]],["ClockwiseContourIntegral",[8754]],["clubs",[9827]],["clubsuit",[9827]],["colon",[58]],["Colon",[8759]],["Colone",[10868]],["colone",[8788]],["coloneq",[8788]],["comma",[44]],["commat",[64]],["comp",[8705]],["compfn",[8728]],["complement",[8705]],["complexes",[8450]],["cong",[8773]],["congdot",[10861]],["Congruent",[8801]],["conint",[8750]],["Conint",[8751]],["ContourIntegral",[8750]],["copf",[120148]],["Copf",[8450]],["coprod",[8720]],["Coproduct",[8720]],["copy",[169]],["COPY",[169]],["copysr",[8471]],["CounterClockwiseContourIntegral",[8755]],["crarr",[8629]],["cross",[10007]],["Cross",[10799]],["Cscr",[119966]],["cscr",[119992]],["csub",[10959]],["csube",[10961]],["csup",[10960]],["csupe",[10962]],["ctdot",[8943]],["cudarrl",[10552]],["cudarrr",[10549]],["cuepr",[8926]],["cuesc",[8927]],["cularr",[8630]],["cularrp",[10557]],["cupbrcap",[10824]],["cupcap",[10822]],["CupCap",[8781]],["cup",[8746]],["Cup",[8915]],["cupcup",[10826]],["cupdot",[8845]],["cupor",[10821]],["cups",[8746,65024]],["curarr",[8631]],["curarrm",[10556]],["curlyeqprec",[8926]],["curlyeqsucc",[8927]],["curlyvee",[8910]],["curlywedge",[8911]],["curren",[164]],["curvearrowleft",[8630]],["curvearrowright",[8631]],["cuvee",[8910]],["cuwed",[8911]],["cwconint",[8754]],["cwint",[8753]],["cylcty",[9005]],["dagger",[8224]],["Dagger",[8225]],["daleth",[8504]],["darr",[8595]],["Darr",[8609]],["dArr",[8659]],["dash",[8208]],["Dashv",[10980]],["dashv",[8867]],["dbkarow",[10511]],["dblac",[733]],["Dcaron",[270]],["dcaron",[271]],["Dcy",[1044]],["dcy",[1076]],["ddagger",[8225]],["ddarr",[8650]],["DD",[8517]],["dd",[8518]],["DDotrahd",[10513]],["ddotseq",[10871]],["deg",[176]],["Del",[8711]],["Delta",[916]],["delta",[948]],["demptyv",[10673]],["dfisht",[10623]],["Dfr",[120071]],["dfr",[120097]],["dHar",[10597]],["dharl",[8643]],["dharr",[8642]],["DiacriticalAcute",[180]],["DiacriticalDot",[729]],["DiacriticalDoubleAcute",[733]],["DiacriticalGrave",[96]],["DiacriticalTilde",[732]],["diam",[8900]],["diamond",[8900]],["Diamond",[8900]],["diamondsuit",[9830]],["diams",[9830]],["die",[168]],["DifferentialD",[8518]],["digamma",[989]],["disin",[8946]],["div",[247]],["divide",[247]],["divideontimes",[8903]],["divonx",[8903]],["DJcy",[1026]],["djcy",[1106]],["dlcorn",[8990]],["dlcrop",[8973]],["dollar",[36]],["Dopf",[120123]],["dopf",[120149]],["Dot",[168]],["dot",[729]],["DotDot",[8412]],["doteq",[8784]],["doteqdot",[8785]],["DotEqual",[8784]],["dotminus",[8760]],["dotplus",[8724]],["dotsquare",[8865]],["doublebarwedge",[8966]],["DoubleContourIntegral",[8751]],["DoubleDot",[168]],["DoubleDownArrow",[8659]],["DoubleLeftArrow",[8656]],["DoubleLeftRightArrow",[8660]],["DoubleLeftTee",[10980]],["DoubleLongLeftArrow",[10232]],["DoubleLongLeftRightArrow",[10234]],["DoubleLongRightArrow",[10233]],["DoubleRightArrow",[8658]],["DoubleRightTee",[8872]],["DoubleUpArrow",[8657]],["DoubleUpDownArrow",[8661]],["DoubleVerticalBar",[8741]],["DownArrowBar",[10515]],["downarrow",[8595]],["DownArrow",[8595]],["Downarrow",[8659]],["DownArrowUpArrow",[8693]],["DownBreve",[785]],["downdownarrows",[8650]],["downharpoonleft",[8643]],["downharpoonright",[8642]],["DownLeftRightVector",[10576]],["DownLeftTeeVector",[10590]],["DownLeftVectorBar",[10582]],["DownLeftVector",[8637]],["DownRightTeeVector",[10591]],["DownRightVectorBar",[10583]],["DownRightVector",[8641]],["DownTeeArrow",[8615]],["DownTee",[8868]],["drbkarow",[10512]],["drcorn",[8991]],["drcrop",[8972]],["Dscr",[119967]],["dscr",[119993]],["DScy",[1029]],["dscy",[1109]],["dsol",[10742]],["Dstrok",[272]],["dstrok",[273]],["dtdot",[8945]],["dtri",[9663]],["dtrif",[9662]],["duarr",[8693]],["duhar",[10607]],["dwangle",[10662]],["DZcy",[1039]],["dzcy",[1119]],["dzigrarr",[10239]],["Eacute",[201]],["eacute",[233]],["easter",[10862]],["Ecaron",[282]],["ecaron",[283]],["Ecirc",[202]],["ecirc",[234]],["ecir",[8790]],["ecolon",[8789]],["Ecy",[1069]],["ecy",[1101]],["eDDot",[10871]],["Edot",[278]],["edot",[279]],["eDot",[8785]],["ee",[8519]],["efDot",[8786]],["Efr",[120072]],["efr",[120098]],["eg",[10906]],["Egrave",[200]],["egrave",[232]],["egs",[10902]],["egsdot",[10904]],["el",[10905]],["Element",[8712]],["elinters",[9191]],["ell",[8467]],["els",[10901]],["elsdot",[10903]],["Emacr",[274]],["emacr",[275]],["empty",[8709]],["emptyset",[8709]],["EmptySmallSquare",[9723]],["emptyv",[8709]],["EmptyVerySmallSquare",[9643]],["emsp13",[8196]],["emsp14",[8197]],["emsp",[8195]],["ENG",[330]],["eng",[331]],["ensp",[8194]],["Eogon",[280]],["eogon",[281]],["Eopf",[120124]],["eopf",[120150]],["epar",[8917]],["eparsl",[10723]],["eplus",[10865]],["epsi",[949]],["Epsilon",[917]],["epsilon",[949]],["epsiv",[1013]],["eqcirc",[8790]],["eqcolon",[8789]],["eqsim",[8770]],["eqslantgtr",[10902]],["eqslantless",[10901]],["Equal",[10869]],["equals",[61]],["EqualTilde",[8770]],["equest",[8799]],["Equilibrium",[8652]],["equiv",[8801]],["equivDD",[10872]],["eqvparsl",[10725]],["erarr",[10609]],["erDot",[8787]],["escr",[8495]],["Escr",[8496]],["esdot",[8784]],["Esim",[10867]],["esim",[8770]],["Eta",[919]],["eta",[951]],["ETH",[208]],["eth",[240]],["Euml",[203]],["euml",[235]],["euro",[8364]],["excl",[33]],["exist",[8707]],["Exists",[8707]],["expectation",[8496]],["exponentiale",[8519]],["ExponentialE",[8519]],["fallingdotseq",[8786]],["Fcy",[1060]],["fcy",[1092]],["female",[9792]],["ffilig",[64259]],["fflig",[64256]],["ffllig",[64260]],["Ffr",[120073]],["ffr",[120099]],["filig",[64257]],["FilledSmallSquare",[9724]],["FilledVerySmallSquare",[9642]],["fjlig",[102,106]],["flat",[9837]],["fllig",[64258]],["fltns",[9649]],["fnof",[402]],["Fopf",[120125]],["fopf",[120151]],["forall",[8704]],["ForAll",[8704]],["fork",[8916]],["forkv",[10969]],["Fouriertrf",[8497]],["fpartint",[10765]],["frac12",[189]],["frac13",[8531]],["frac14",[188]],["frac15",[8533]],["frac16",[8537]],["frac18",[8539]],["frac23",[8532]],["frac25",[8534]],["frac34",[190]],["frac35",[8535]],["frac38",[8540]],["frac45",[8536]],["frac56",[8538]],["frac58",[8541]],["frac78",[8542]],["frasl",[8260]],["frown",[8994]],["fscr",[119995]],["Fscr",[8497]],["gacute",[501]],["Gamma",[915]],["gamma",[947]],["Gammad",[988]],["gammad",[989]],["gap",[10886]],["Gbreve",[286]],["gbreve",[287]],["Gcedil",[290]],["Gcirc",[284]],["gcirc",[285]],["Gcy",[1043]],["gcy",[1075]],["Gdot",[288]],["gdot",[289]],["ge",[8805]],["gE",[8807]],["gEl",[10892]],["gel",[8923]],["geq",[8805]],["geqq",[8807]],["geqslant",[10878]],["gescc",[10921]],["ges",[10878]],["gesdot",[10880]],["gesdoto",[10882]],["gesdotol",[10884]],["gesl",[8923,65024]],["gesles",[10900]],["Gfr",[120074]],["gfr",[120100]],["gg",[8811]],["Gg",[8921]],["ggg",[8921]],["gimel",[8503]],["GJcy",[1027]],["gjcy",[1107]],["gla",[10917]],["gl",[8823]],["glE",[10898]],["glj",[10916]],["gnap",[10890]],["gnapprox",[10890]],["gne",[10888]],["gnE",[8809]],["gneq",[10888]],["gneqq",[8809]],["gnsim",[8935]],["Gopf",[120126]],["gopf",[120152]],["grave",[96]],["GreaterEqual",[8805]],["GreaterEqualLess",[8923]],["GreaterFullEqual",[8807]],["GreaterGreater",[10914]],["GreaterLess",[8823]],["GreaterSlantEqual",[10878]],["GreaterTilde",[8819]],["Gscr",[119970]],["gscr",[8458]],["gsim",[8819]],["gsime",[10894]],["gsiml",[10896]],["gtcc",[10919]],["gtcir",[10874]],["gt",[62]],["GT",[62]],["Gt",[8811]],["gtdot",[8919]],["gtlPar",[10645]],["gtquest",[10876]],["gtrapprox",[10886]],["gtrarr",[10616]],["gtrdot",[8919]],["gtreqless",[8923]],["gtreqqless",[10892]],["gtrless",[8823]],["gtrsim",[8819]],["gvertneqq",[8809,65024]],["gvnE",[8809,65024]],["Hacek",[711]],["hairsp",[8202]],["half",[189]],["hamilt",[8459]],["HARDcy",[1066]],["hardcy",[1098]],["harrcir",[10568]],["harr",[8596]],["hArr",[8660]],["harrw",[8621]],["Hat",[94]],["hbar",[8463]],["Hcirc",[292]],["hcirc",[293]],["hearts",[9829]],["heartsuit",[9829]],["hellip",[8230]],["hercon",[8889]],["hfr",[120101]],["Hfr",[8460]],["HilbertSpace",[8459]],["hksearow",[10533]],["hkswarow",[10534]],["hoarr",[8703]],["homtht",[8763]],["hookleftarrow",[8617]],["hookrightarrow",[8618]],["hopf",[120153]],["Hopf",[8461]],["horbar",[8213]],["HorizontalLine",[9472]],["hscr",[119997]],["Hscr",[8459]],["hslash",[8463]],["Hstrok",[294]],["hstrok",[295]],["HumpDownHump",[8782]],["HumpEqual",[8783]],["hybull",[8259]],["hyphen",[8208]],["Iacute",[205]],["iacute",[237]],["ic",[8291]],["Icirc",[206]],["icirc",[238]],["Icy",[1048]],["icy",[1080]],["Idot",[304]],["IEcy",[1045]],["iecy",[1077]],["iexcl",[161]],["iff",[8660]],["ifr",[120102]],["Ifr",[8465]],["Igrave",[204]],["igrave",[236]],["ii",[8520]],["iiiint",[10764]],["iiint",[8749]],["iinfin",[10716]],["iiota",[8489]],["IJlig",[306]],["ijlig",[307]],["Imacr",[298]],["imacr",[299]],["image",[8465]],["ImaginaryI",[8520]],["imagline",[8464]],["imagpart",[8465]],["imath",[305]],["Im",[8465]],["imof",[8887]],["imped",[437]],["Implies",[8658]],["incare",[8453]],["in",[8712]],["infin",[8734]],["infintie",[10717]],["inodot",[305]],["intcal",[8890]],["int",[8747]],["Int",[8748]],["integers",[8484]],["Integral",[8747]],["intercal",[8890]],["Intersection",[8898]],["intlarhk",[10775]],["intprod",[10812]],["InvisibleComma",[8291]],["InvisibleTimes",[8290]],["IOcy",[1025]],["iocy",[1105]],["Iogon",[302]],["iogon",[303]],["Iopf",[120128]],["iopf",[120154]],["Iota",[921]],["iota",[953]],["iprod",[10812]],["iquest",[191]],["iscr",[119998]],["Iscr",[8464]],["isin",[8712]],["isindot",[8949]],["isinE",[8953]],["isins",[8948]],["isinsv",[8947]],["isinv",[8712]],["it",[8290]],["Itilde",[296]],["itilde",[297]],["Iukcy",[1030]],["iukcy",[1110]],["Iuml",[207]],["iuml",[239]],["Jcirc",[308]],["jcirc",[309]],["Jcy",[1049]],["jcy",[1081]],["Jfr",[120077]],["jfr",[120103]],["jmath",[567]],["Jopf",[120129]],["jopf",[120155]],["Jscr",[119973]],["jscr",[119999]],["Jsercy",[1032]],["jsercy",[1112]],["Jukcy",[1028]],["jukcy",[1108]],["Kappa",[922]],["kappa",[954]],["kappav",[1008]],["Kcedil",[310]],["kcedil",[311]],["Kcy",[1050]],["kcy",[1082]],["Kfr",[120078]],["kfr",[120104]],["kgreen",[312]],["KHcy",[1061]],["khcy",[1093]],["KJcy",[1036]],["kjcy",[1116]],["Kopf",[120130]],["kopf",[120156]],["Kscr",[119974]],["kscr",[12e4]],["lAarr",[8666]],["Lacute",[313]],["lacute",[314]],["laemptyv",[10676]],["lagran",[8466]],["Lambda",[923]],["lambda",[955]],["lang",[10216]],["Lang",[10218]],["langd",[10641]],["langle",[10216]],["lap",[10885]],["Laplacetrf",[8466]],["laquo",[171]],["larrb",[8676]],["larrbfs",[10527]],["larr",[8592]],["Larr",[8606]],["lArr",[8656]],["larrfs",[10525]],["larrhk",[8617]],["larrlp",[8619]],["larrpl",[10553]],["larrsim",[10611]],["larrtl",[8610]],["latail",[10521]],["lAtail",[10523]],["lat",[10923]],["late",[10925]],["lates",[10925,65024]],["lbarr",[10508]],["lBarr",[10510]],["lbbrk",[10098]],["lbrace",[123]],["lbrack",[91]],["lbrke",[10635]],["lbrksld",[10639]],["lbrkslu",[10637]],["Lcaron",[317]],["lcaron",[318]],["Lcedil",[315]],["lcedil",[316]],["lceil",[8968]],["lcub",[123]],["Lcy",[1051]],["lcy",[1083]],["ldca",[10550]],["ldquo",[8220]],["ldquor",[8222]],["ldrdhar",[10599]],["ldrushar",[10571]],["ldsh",[8626]],["le",[8804]],["lE",[8806]],["LeftAngleBracket",[10216]],["LeftArrowBar",[8676]],["leftarrow",[8592]],["LeftArrow",[8592]],["Leftarrow",[8656]],["LeftArrowRightArrow",[8646]],["leftarrowtail",[8610]],["LeftCeiling",[8968]],["LeftDoubleBracket",[10214]],["LeftDownTeeVector",[10593]],["LeftDownVectorBar",[10585]],["LeftDownVector",[8643]],["LeftFloor",[8970]],["leftharpoondown",[8637]],["leftharpoonup",[8636]],["leftleftarrows",[8647]],["leftrightarrow",[8596]],["LeftRightArrow",[8596]],["Leftrightarrow",[8660]],["leftrightarrows",[8646]],["leftrightharpoons",[8651]],["leftrightsquigarrow",[8621]],["LeftRightVector",[10574]],["LeftTeeArrow",[8612]],["LeftTee",[8867]],["LeftTeeVector",[10586]],["leftthreetimes",[8907]],["LeftTriangleBar",[10703]],["LeftTriangle",[8882]],["LeftTriangleEqual",[8884]],["LeftUpDownVector",[10577]],["LeftUpTeeVector",[10592]],["LeftUpVectorBar",[10584]],["LeftUpVector",[8639]],["LeftVectorBar",[10578]],["LeftVector",[8636]],["lEg",[10891]],["leg",[8922]],["leq",[8804]],["leqq",[8806]],["leqslant",[10877]],["lescc",[10920]],["les",[10877]],["lesdot",[10879]],["lesdoto",[10881]],["lesdotor",[10883]],["lesg",[8922,65024]],["lesges",[10899]],["lessapprox",[10885]],["lessdot",[8918]],["lesseqgtr",[8922]],["lesseqqgtr",[10891]],["LessEqualGreater",[8922]],["LessFullEqual",[8806]],["LessGreater",[8822]],["lessgtr",[8822]],["LessLess",[10913]],["lesssim",[8818]],["LessSlantEqual",[10877]],["LessTilde",[8818]],["lfisht",[10620]],["lfloor",[8970]],["Lfr",[120079]],["lfr",[120105]],["lg",[8822]],["lgE",[10897]],["lHar",[10594]],["lhard",[8637]],["lharu",[8636]],["lharul",[10602]],["lhblk",[9604]],["LJcy",[1033]],["ljcy",[1113]],["llarr",[8647]],["ll",[8810]],["Ll",[8920]],["llcorner",[8990]],["Lleftarrow",[8666]],["llhard",[10603]],["lltri",[9722]],["Lmidot",[319]],["lmidot",[320]],["lmoustache",[9136]],["lmoust",[9136]],["lnap",[10889]],["lnapprox",[10889]],["lne",[10887]],["lnE",[8808]],["lneq",[10887]],["lneqq",[8808]],["lnsim",[8934]],["loang",[10220]],["loarr",[8701]],["lobrk",[10214]],["longleftarrow",[10229]],["LongLeftArrow",[10229]],["Longleftarrow",[10232]],["longleftrightarrow",[10231]],["LongLeftRightArrow",[10231]],["Longleftrightarrow",[10234]],["longmapsto",[10236]],["longrightarrow",[10230]],["LongRightArrow",[10230]],["Longrightarrow",[10233]],["looparrowleft",[8619]],["looparrowright",[8620]],["lopar",[10629]],["Lopf",[120131]],["lopf",[120157]],["loplus",[10797]],["lotimes",[10804]],["lowast",[8727]],["lowbar",[95]],["LowerLeftArrow",[8601]],["LowerRightArrow",[8600]],["loz",[9674]],["lozenge",[9674]],["lozf",[10731]],["lpar",[40]],["lparlt",[10643]],["lrarr",[8646]],["lrcorner",[8991]],["lrhar",[8651]],["lrhard",[10605]],["lrm",[8206]],["lrtri",[8895]],["lsaquo",[8249]],["lscr",[120001]],["Lscr",[8466]],["lsh",[8624]],["Lsh",[8624]],["lsim",[8818]],["lsime",[10893]],["lsimg",[10895]],["lsqb",[91]],["lsquo",[8216]],["lsquor",[8218]],["Lstrok",[321]],["lstrok",[322]],["ltcc",[10918]],["ltcir",[10873]],["lt",[60]],["LT",[60]],["Lt",[8810]],["ltdot",[8918]],["lthree",[8907]],["ltimes",[8905]],["ltlarr",[10614]],["ltquest",[10875]],["ltri",[9667]],["ltrie",[8884]],["ltrif",[9666]],["ltrPar",[10646]],["lurdshar",[10570]],["luruhar",[10598]],["lvertneqq",[8808,65024]],["lvnE",[8808,65024]],["macr",[175]],["male",[9794]],["malt",[10016]],["maltese",[10016]],["Map",[10501]],["map",[8614]],["mapsto",[8614]],["mapstodown",[8615]],["mapstoleft",[8612]],["mapstoup",[8613]],["marker",[9646]],["mcomma",[10793]],["Mcy",[1052]],["mcy",[1084]],["mdash",[8212]],["mDDot",[8762]],["measuredangle",[8737]],["MediumSpace",[8287]],["Mellintrf",[8499]],["Mfr",[120080]],["mfr",[120106]],["mho",[8487]],["micro",[181]],["midast",[42]],["midcir",[10992]],["mid",[8739]],["middot",[183]],["minusb",[8863]],["minus",[8722]],["minusd",[8760]],["minusdu",[10794]],["MinusPlus",[8723]],["mlcp",[10971]],["mldr",[8230]],["mnplus",[8723]],["models",[8871]],["Mopf",[120132]],["mopf",[120158]],["mp",[8723]],["mscr",[120002]],["Mscr",[8499]],["mstpos",[8766]],["Mu",[924]],["mu",[956]],["multimap",[8888]],["mumap",[8888]],["nabla",[8711]],["Nacute",[323]],["nacute",[324]],["nang",[8736,8402]],["nap",[8777]],["napE",[10864,824]],["napid",[8779,824]],["napos",[329]],["napprox",[8777]],["natural",[9838]],["naturals",[8469]],["natur",[9838]],["nbsp",[160]],["nbump",[8782,824]],["nbumpe",[8783,824]],["ncap",[10819]],["Ncaron",[327]],["ncaron",[328]],["Ncedil",[325]],["ncedil",[326]],["ncong",[8775]],["ncongdot",[10861,824]],["ncup",[10818]],["Ncy",[1053]],["ncy",[1085]],["ndash",[8211]],["nearhk",[10532]],["nearr",[8599]],["neArr",[8663]],["nearrow",[8599]],["ne",[8800]],["nedot",[8784,824]],["NegativeMediumSpace",[8203]],["NegativeThickSpace",[8203]],["NegativeThinSpace",[8203]],["NegativeVeryThinSpace",[8203]],["nequiv",[8802]],["nesear",[10536]],["nesim",[8770,824]],["NestedGreaterGreater",[8811]],["NestedLessLess",[8810]],["nexist",[8708]],["nexists",[8708]],["Nfr",[120081]],["nfr",[120107]],["ngE",[8807,824]],["nge",[8817]],["ngeq",[8817]],["ngeqq",[8807,824]],["ngeqslant",[10878,824]],["nges",[10878,824]],["nGg",[8921,824]],["ngsim",[8821]],["nGt",[8811,8402]],["ngt",[8815]],["ngtr",[8815]],["nGtv",[8811,824]],["nharr",[8622]],["nhArr",[8654]],["nhpar",[10994]],["ni",[8715]],["nis",[8956]],["nisd",[8954]],["niv",[8715]],["NJcy",[1034]],["njcy",[1114]],["nlarr",[8602]],["nlArr",[8653]],["nldr",[8229]],["nlE",[8806,824]],["nle",[8816]],["nleftarrow",[8602]],["nLeftarrow",[8653]],["nleftrightarrow",[8622]],["nLeftrightarrow",[8654]],["nleq",[8816]],["nleqq",[8806,824]],["nleqslant",[10877,824]],["nles",[10877,824]],["nless",[8814]],["nLl",[8920,824]],["nlsim",[8820]],["nLt",[8810,8402]],["nlt",[8814]],["nltri",[8938]],["nltrie",[8940]],["nLtv",[8810,824]],["nmid",[8740]],["NoBreak",[8288]],["NonBreakingSpace",[160]],["nopf",[120159]],["Nopf",[8469]],["Not",[10988]],["not",[172]],["NotCongruent",[8802]],["NotCupCap",[8813]],["NotDoubleVerticalBar",[8742]],["NotElement",[8713]],["NotEqual",[8800]],["NotEqualTilde",[8770,824]],["NotExists",[8708]],["NotGreater",[8815]],["NotGreaterEqual",[8817]],["NotGreaterFullEqual",[8807,824]],["NotGreaterGreater",[8811,824]],["NotGreaterLess",[8825]],["NotGreaterSlantEqual",[10878,824]],["NotGreaterTilde",[8821]],["NotHumpDownHump",[8782,824]],["NotHumpEqual",[8783,824]],["notin",[8713]],["notindot",[8949,824]],["notinE",[8953,824]],["notinva",[8713]],["notinvb",[8951]],["notinvc",[8950]],["NotLeftTriangleBar",[10703,824]],["NotLeftTriangle",[8938]],["NotLeftTriangleEqual",[8940]],["NotLess",[8814]],["NotLessEqual",[8816]],["NotLessGreater",[8824]],["NotLessLess",[8810,824]],["NotLessSlantEqual",[10877,824]],["NotLessTilde",[8820]],["NotNestedGreaterGreater",[10914,824]],["NotNestedLessLess",[10913,824]],["notni",[8716]],["notniva",[8716]],["notnivb",[8958]],["notnivc",[8957]],["NotPrecedes",[8832]],["NotPrecedesEqual",[10927,824]],["NotPrecedesSlantEqual",[8928]],["NotReverseElement",[8716]],["NotRightTriangleBar",[10704,824]],["NotRightTriangle",[8939]],["NotRightTriangleEqual",[8941]],["NotSquareSubset",[8847,824]],["NotSquareSubsetEqual",[8930]],["NotSquareSuperset",[8848,824]],["NotSquareSupersetEqual",[8931]],["NotSubset",[8834,8402]],["NotSubsetEqual",[8840]],["NotSucceeds",[8833]],["NotSucceedsEqual",[10928,824]],["NotSucceedsSlantEqual",[8929]],["NotSucceedsTilde",[8831,824]],["NotSuperset",[8835,8402]],["NotSupersetEqual",[8841]],["NotTilde",[8769]],["NotTildeEqual",[8772]],["NotTildeFullEqual",[8775]],["NotTildeTilde",[8777]],["NotVerticalBar",[8740]],["nparallel",[8742]],["npar",[8742]],["nparsl",[11005,8421]],["npart",[8706,824]],["npolint",[10772]],["npr",[8832]],["nprcue",[8928]],["nprec",[8832]],["npreceq",[10927,824]],["npre",[10927,824]],["nrarrc",[10547,824]],["nrarr",[8603]],["nrArr",[8655]],["nrarrw",[8605,824]],["nrightarrow",[8603]],["nRightarrow",[8655]],["nrtri",[8939]],["nrtrie",[8941]],["nsc",[8833]],["nsccue",[8929]],["nsce",[10928,824]],["Nscr",[119977]],["nscr",[120003]],["nshortmid",[8740]],["nshortparallel",[8742]],["nsim",[8769]],["nsime",[8772]],["nsimeq",[8772]],["nsmid",[8740]],["nspar",[8742]],["nsqsube",[8930]],["nsqsupe",[8931]],["nsub",[8836]],["nsubE",[10949,824]],["nsube",[8840]],["nsubset",[8834,8402]],["nsubseteq",[8840]],["nsubseteqq",[10949,824]],["nsucc",[8833]],["nsucceq",[10928,824]],["nsup",[8837]],["nsupE",[10950,824]],["nsupe",[8841]],["nsupset",[8835,8402]],["nsupseteq",[8841]],["nsupseteqq",[10950,824]],["ntgl",[8825]],["Ntilde",[209]],["ntilde",[241]],["ntlg",[8824]],["ntriangleleft",[8938]],["ntrianglelefteq",[8940]],["ntriangleright",[8939]],["ntrianglerighteq",[8941]],["Nu",[925]],["nu",[957]],["num",[35]],["numero",[8470]],["numsp",[8199]],["nvap",[8781,8402]],["nvdash",[8876]],["nvDash",[8877]],["nVdash",[8878]],["nVDash",[8879]],["nvge",[8805,8402]],["nvgt",[62,8402]],["nvHarr",[10500]],["nvinfin",[10718]],["nvlArr",[10498]],["nvle",[8804,8402]],["nvlt",[60,8402]],["nvltrie",[8884,8402]],["nvrArr",[10499]],["nvrtrie",[8885,8402]],["nvsim",[8764,8402]],["nwarhk",[10531]],["nwarr",[8598]],["nwArr",[8662]],["nwarrow",[8598]],["nwnear",[10535]],["Oacute",[211]],["oacute",[243]],["oast",[8859]],["Ocirc",[212]],["ocirc",[244]],["ocir",[8858]],["Ocy",[1054]],["ocy",[1086]],["odash",[8861]],["Odblac",[336]],["odblac",[337]],["odiv",[10808]],["odot",[8857]],["odsold",[10684]],["OElig",[338]],["oelig",[339]],["ofcir",[10687]],["Ofr",[120082]],["ofr",[120108]],["ogon",[731]],["Ograve",[210]],["ograve",[242]],["ogt",[10689]],["ohbar",[10677]],["ohm",[937]],["oint",[8750]],["olarr",[8634]],["olcir",[10686]],["olcross",[10683]],["oline",[8254]],["olt",[10688]],["Omacr",[332]],["omacr",[333]],["Omega",[937]],["omega",[969]],["Omicron",[927]],["omicron",[959]],["omid",[10678]],["ominus",[8854]],["Oopf",[120134]],["oopf",[120160]],["opar",[10679]],["OpenCurlyDoubleQuote",[8220]],["OpenCurlyQuote",[8216]],["operp",[10681]],["oplus",[8853]],["orarr",[8635]],["Or",[10836]],["or",[8744]],["ord",[10845]],["order",[8500]],["orderof",[8500]],["ordf",[170]],["ordm",[186]],["origof",[8886]],["oror",[10838]],["orslope",[10839]],["orv",[10843]],["oS",[9416]],["Oscr",[119978]],["oscr",[8500]],["Oslash",[216]],["oslash",[248]],["osol",[8856]],["Otilde",[213]],["otilde",[245]],["otimesas",[10806]],["Otimes",[10807]],["otimes",[8855]],["Ouml",[214]],["ouml",[246]],["ovbar",[9021]],["OverBar",[8254]],["OverBrace",[9182]],["OverBracket",[9140]],["OverParenthesis",[9180]],["para",[182]],["parallel",[8741]],["par",[8741]],["parsim",[10995]],["parsl",[11005]],["part",[8706]],["PartialD",[8706]],["Pcy",[1055]],["pcy",[1087]],["percnt",[37]],["period",[46]],["permil",[8240]],["perp",[8869]],["pertenk",[8241]],["Pfr",[120083]],["pfr",[120109]],["Phi",[934]],["phi",[966]],["phiv",[981]],["phmmat",[8499]],["phone",[9742]],["Pi",[928]],["pi",[960]],["pitchfork",[8916]],["piv",[982]],["planck",[8463]],["planckh",[8462]],["plankv",[8463]],["plusacir",[10787]],["plusb",[8862]],["pluscir",[10786]],["plus",[43]],["plusdo",[8724]],["plusdu",[10789]],["pluse",[10866]],["PlusMinus",[177]],["plusmn",[177]],["plussim",[10790]],["plustwo",[10791]],["pm",[177]],["Poincareplane",[8460]],["pointint",[10773]],["popf",[120161]],["Popf",[8473]],["pound",[163]],["prap",[10935]],["Pr",[10939]],["pr",[8826]],["prcue",[8828]],["precapprox",[10935]],["prec",[8826]],["preccurlyeq",[8828]],["Precedes",[8826]],["PrecedesEqual",[10927]],["PrecedesSlantEqual",[8828]],["PrecedesTilde",[8830]],["preceq",[10927]],["precnapprox",[10937]],["precneqq",[10933]],["precnsim",[8936]],["pre",[10927]],["prE",[10931]],["precsim",[8830]],["prime",[8242]],["Prime",[8243]],["primes",[8473]],["prnap",[10937]],["prnE",[10933]],["prnsim",[8936]],["prod",[8719]],["Product",[8719]],["profalar",[9006]],["profline",[8978]],["profsurf",[8979]],["prop",[8733]],["Proportional",[8733]],["Proportion",[8759]],["propto",[8733]],["prsim",[8830]],["prurel",[8880]],["Pscr",[119979]],["pscr",[120005]],["Psi",[936]],["psi",[968]],["puncsp",[8200]],["Qfr",[120084]],["qfr",[120110]],["qint",[10764]],["qopf",[120162]],["Qopf",[8474]],["qprime",[8279]],["Qscr",[119980]],["qscr",[120006]],["quaternions",[8461]],["quatint",[10774]],["quest",[63]],["questeq",[8799]],["quot",[34]],["QUOT",[34]],["rAarr",[8667]],["race",[8765,817]],["Racute",[340]],["racute",[341]],["radic",[8730]],["raemptyv",[10675]],["rang",[10217]],["Rang",[10219]],["rangd",[10642]],["range",[10661]],["rangle",[10217]],["raquo",[187]],["rarrap",[10613]],["rarrb",[8677]],["rarrbfs",[10528]],["rarrc",[10547]],["rarr",[8594]],["Rarr",[8608]],["rArr",[8658]],["rarrfs",[10526]],["rarrhk",[8618]],["rarrlp",[8620]],["rarrpl",[10565]],["rarrsim",[10612]],["Rarrtl",[10518]],["rarrtl",[8611]],["rarrw",[8605]],["ratail",[10522]],["rAtail",[10524]],["ratio",[8758]],["rationals",[8474]],["rbarr",[10509]],["rBarr",[10511]],["RBarr",[10512]],["rbbrk",[10099]],["rbrace",[125]],["rbrack",[93]],["rbrke",[10636]],["rbrksld",[10638]],["rbrkslu",[10640]],["Rcaron",[344]],["rcaron",[345]],["Rcedil",[342]],["rcedil",[343]],["rceil",[8969]],["rcub",[125]],["Rcy",[1056]],["rcy",[1088]],["rdca",[10551]],["rdldhar",[10601]],["rdquo",[8221]],["rdquor",[8221]],["CloseCurlyDoubleQuote",[8221]],["rdsh",[8627]],["real",[8476]],["realine",[8475]],["realpart",[8476]],["reals",[8477]],["Re",[8476]],["rect",[9645]],["reg",[174]],["REG",[174]],["ReverseElement",[8715]],["ReverseEquilibrium",[8651]],["ReverseUpEquilibrium",[10607]],["rfisht",[10621]],["rfloor",[8971]],["rfr",[120111]],["Rfr",[8476]],["rHar",[10596]],["rhard",[8641]],["rharu",[8640]],["rharul",[10604]],["Rho",[929]],["rho",[961]],["rhov",[1009]],["RightAngleBracket",[10217]],["RightArrowBar",[8677]],["rightarrow",[8594]],["RightArrow",[8594]],["Rightarrow",[8658]],["RightArrowLeftArrow",[8644]],["rightarrowtail",[8611]],["RightCeiling",[8969]],["RightDoubleBracket",[10215]],["RightDownTeeVector",[10589]],["RightDownVectorBar",[10581]],["RightDownVector",[8642]],["RightFloor",[8971]],["rightharpoondown",[8641]],["rightharpoonup",[8640]],["rightleftarrows",[8644]],["rightleftharpoons",[8652]],["rightrightarrows",[8649]],["rightsquigarrow",[8605]],["RightTeeArrow",[8614]],["RightTee",[8866]],["RightTeeVector",[10587]],["rightthreetimes",[8908]],["RightTriangleBar",[10704]],["RightTriangle",[8883]],["RightTriangleEqual",[8885]],["RightUpDownVector",[10575]],["RightUpTeeVector",[10588]],["RightUpVectorBar",[10580]],["RightUpVector",[8638]],["RightVectorBar",[10579]],["RightVector",[8640]],["ring",[730]],["risingdotseq",[8787]],["rlarr",[8644]],["rlhar",[8652]],["rlm",[8207]],["rmoustache",[9137]],["rmoust",[9137]],["rnmid",[10990]],["roang",[10221]],["roarr",[8702]],["robrk",[10215]],["ropar",[10630]],["ropf",[120163]],["Ropf",[8477]],["roplus",[10798]],["rotimes",[10805]],["RoundImplies",[10608]],["rpar",[41]],["rpargt",[10644]],["rppolint",[10770]],["rrarr",[8649]],["Rrightarrow",[8667]],["rsaquo",[8250]],["rscr",[120007]],["Rscr",[8475]],["rsh",[8625]],["Rsh",[8625]],["rsqb",[93]],["rsquo",[8217]],["rsquor",[8217]],["CloseCurlyQuote",[8217]],["rthree",[8908]],["rtimes",[8906]],["rtri",[9657]],["rtrie",[8885]],["rtrif",[9656]],["rtriltri",[10702]],["RuleDelayed",[10740]],["ruluhar",[10600]],["rx",[8478]],["Sacute",[346]],["sacute",[347]],["sbquo",[8218]],["scap",[10936]],["Scaron",[352]],["scaron",[353]],["Sc",[10940]],["sc",[8827]],["sccue",[8829]],["sce",[10928]],["scE",[10932]],["Scedil",[350]],["scedil",[351]],["Scirc",[348]],["scirc",[349]],["scnap",[10938]],["scnE",[10934]],["scnsim",[8937]],["scpolint",[10771]],["scsim",[8831]],["Scy",[1057]],["scy",[1089]],["sdotb",[8865]],["sdot",[8901]],["sdote",[10854]],["searhk",[10533]],["searr",[8600]],["seArr",[8664]],["searrow",[8600]],["sect",[167]],["semi",[59]],["seswar",[10537]],["setminus",[8726]],["setmn",[8726]],["sext",[10038]],["Sfr",[120086]],["sfr",[120112]],["sfrown",[8994]],["sharp",[9839]],["SHCHcy",[1065]],["shchcy",[1097]],["SHcy",[1064]],["shcy",[1096]],["ShortDownArrow",[8595]],["ShortLeftArrow",[8592]],["shortmid",[8739]],["shortparallel",[8741]],["ShortRightArrow",[8594]],["ShortUpArrow",[8593]],["shy",[173]],["Sigma",[931]],["sigma",[963]],["sigmaf",[962]],["sigmav",[962]],["sim",[8764]],["simdot",[10858]],["sime",[8771]],["simeq",[8771]],["simg",[10910]],["simgE",[10912]],["siml",[10909]],["simlE",[10911]],["simne",[8774]],["simplus",[10788]],["simrarr",[10610]],["slarr",[8592]],["SmallCircle",[8728]],["smallsetminus",[8726]],["smashp",[10803]],["smeparsl",[10724]],["smid",[8739]],["smile",[8995]],["smt",[10922]],["smte",[10924]],["smtes",[10924,65024]],["SOFTcy",[1068]],["softcy",[1100]],["solbar",[9023]],["solb",[10692]],["sol",[47]],["Sopf",[120138]],["sopf",[120164]],["spades",[9824]],["spadesuit",[9824]],["spar",[8741]],["sqcap",[8851]],["sqcaps",[8851,65024]],["sqcup",[8852]],["sqcups",[8852,65024]],["Sqrt",[8730]],["sqsub",[8847]],["sqsube",[8849]],["sqsubset",[8847]],["sqsubseteq",[8849]],["sqsup",[8848]],["sqsupe",[8850]],["sqsupset",[8848]],["sqsupseteq",[8850]],["square",[9633]],["Square",[9633]],["SquareIntersection",[8851]],["SquareSubset",[8847]],["SquareSubsetEqual",[8849]],["SquareSuperset",[8848]],["SquareSupersetEqual",[8850]],["SquareUnion",[8852]],["squarf",[9642]],["squ",[9633]],["squf",[9642]],["srarr",[8594]],["Sscr",[119982]],["sscr",[120008]],["ssetmn",[8726]],["ssmile",[8995]],["sstarf",[8902]],["Star",[8902]],["star",[9734]],["starf",[9733]],["straightepsilon",[1013]],["straightphi",[981]],["strns",[175]],["sub",[8834]],["Sub",[8912]],["subdot",[10941]],["subE",[10949]],["sube",[8838]],["subedot",[10947]],["submult",[10945]],["subnE",[10955]],["subne",[8842]],["subplus",[10943]],["subrarr",[10617]],["subset",[8834]],["Subset",[8912]],["subseteq",[8838]],["subseteqq",[10949]],["SubsetEqual",[8838]],["subsetneq",[8842]],["subsetneqq",[10955]],["subsim",[10951]],["subsub",[10965]],["subsup",[10963]],["succapprox",[10936]],["succ",[8827]],["succcurlyeq",[8829]],["Succeeds",[8827]],["SucceedsEqual",[10928]],["SucceedsSlantEqual",[8829]],["SucceedsTilde",[8831]],["succeq",[10928]],["succnapprox",[10938]],["succneqq",[10934]],["succnsim",[8937]],["succsim",[8831]],["SuchThat",[8715]],["sum",[8721]],["Sum",[8721]],["sung",[9834]],["sup1",[185]],["sup2",[178]],["sup3",[179]],["sup",[8835]],["Sup",[8913]],["supdot",[10942]],["supdsub",[10968]],["supE",[10950]],["supe",[8839]],["supedot",[10948]],["Superset",[8835]],["SupersetEqual",[8839]],["suphsol",[10185]],["suphsub",[10967]],["suplarr",[10619]],["supmult",[10946]],["supnE",[10956]],["supne",[8843]],["supplus",[10944]],["supset",[8835]],["Supset",[8913]],["supseteq",[8839]],["supseteqq",[10950]],["supsetneq",[8843]],["supsetneqq",[10956]],["supsim",[10952]],["supsub",[10964]],["supsup",[10966]],["swarhk",[10534]],["swarr",[8601]],["swArr",[8665]],["swarrow",[8601]],["swnwar",[10538]],["szlig",[223]],["Tab",[9]],["target",[8982]],["Tau",[932]],["tau",[964]],["tbrk",[9140]],["Tcaron",[356]],["tcaron",[357]],["Tcedil",[354]],["tcedil",[355]],["Tcy",[1058]],["tcy",[1090]],["tdot",[8411]],["telrec",[8981]],["Tfr",[120087]],["tfr",[120113]],["there4",[8756]],["therefore",[8756]],["Therefore",[8756]],["Theta",[920]],["theta",[952]],["thetasym",[977]],["thetav",[977]],["thickapprox",[8776]],["thicksim",[8764]],["ThickSpace",[8287,8202]],["ThinSpace",[8201]],["thinsp",[8201]],["thkap",[8776]],["thksim",[8764]],["THORN",[222]],["thorn",[254]],["tilde",[732]],["Tilde",[8764]],["TildeEqual",[8771]],["TildeFullEqual",[8773]],["TildeTilde",[8776]],["timesbar",[10801]],["timesb",[8864]],["times",[215]],["timesd",[10800]],["tint",[8749]],["toea",[10536]],["topbot",[9014]],["topcir",[10993]],["top",[8868]],["Topf",[120139]],["topf",[120165]],["topfork",[10970]],["tosa",[10537]],["tprime",[8244]],["trade",[8482]],["TRADE",[8482]],["triangle",[9653]],["triangledown",[9663]],["triangleleft",[9667]],["trianglelefteq",[8884]],["triangleq",[8796]],["triangleright",[9657]],["trianglerighteq",[8885]],["tridot",[9708]],["trie",[8796]],["triminus",[10810]],["TripleDot",[8411]],["triplus",[10809]],["trisb",[10701]],["tritime",[10811]],["trpezium",[9186]],["Tscr",[119983]],["tscr",[120009]],["TScy",[1062]],["tscy",[1094]],["TSHcy",[1035]],["tshcy",[1115]],["Tstrok",[358]],["tstrok",[359]],["twixt",[8812]],["twoheadleftarrow",[8606]],["twoheadrightarrow",[8608]],["Uacute",[218]],["uacute",[250]],["uarr",[8593]],["Uarr",[8607]],["uArr",[8657]],["Uarrocir",[10569]],["Ubrcy",[1038]],["ubrcy",[1118]],["Ubreve",[364]],["ubreve",[365]],["Ucirc",[219]],["ucirc",[251]],["Ucy",[1059]],["ucy",[1091]],["udarr",[8645]],["Udblac",[368]],["udblac",[369]],["udhar",[10606]],["ufisht",[10622]],["Ufr",[120088]],["ufr",[120114]],["Ugrave",[217]],["ugrave",[249]],["uHar",[10595]],["uharl",[8639]],["uharr",[8638]],["uhblk",[9600]],["ulcorn",[8988]],["ulcorner",[8988]],["ulcrop",[8975]],["ultri",[9720]],["Umacr",[362]],["umacr",[363]],["uml",[168]],["UnderBar",[95]],["UnderBrace",[9183]],["UnderBracket",[9141]],["UnderParenthesis",[9181]],["Union",[8899]],["UnionPlus",[8846]],["Uogon",[370]],["uogon",[371]],["Uopf",[120140]],["uopf",[120166]],["UpArrowBar",[10514]],["uparrow",[8593]],["UpArrow",[8593]],["Uparrow",[8657]],["UpArrowDownArrow",[8645]],["updownarrow",[8597]],["UpDownArrow",[8597]],["Updownarrow",[8661]],["UpEquilibrium",[10606]],["upharpoonleft",[8639]],["upharpoonright",[8638]],["uplus",[8846]],["UpperLeftArrow",[8598]],["UpperRightArrow",[8599]],["upsi",[965]],["Upsi",[978]],["upsih",[978]],["Upsilon",[933]],["upsilon",[965]],["UpTeeArrow",[8613]],["UpTee",[8869]],["upuparrows",[8648]],["urcorn",[8989]],["urcorner",[8989]],["urcrop",[8974]],["Uring",[366]],["uring",[367]],["urtri",[9721]],["Uscr",[119984]],["uscr",[120010]],["utdot",[8944]],["Utilde",[360]],["utilde",[361]],["utri",[9653]],["utrif",[9652]],["uuarr",[8648]],["Uuml",[220]],["uuml",[252]],["uwangle",[10663]],["vangrt",[10652]],["varepsilon",[1013]],["varkappa",[1008]],["varnothing",[8709]],["varphi",[981]],["varpi",[982]],["varpropto",[8733]],["varr",[8597]],["vArr",[8661]],["varrho",[1009]],["varsigma",[962]],["varsubsetneq",[8842,65024]],["varsubsetneqq",[10955,65024]],["varsupsetneq",[8843,65024]],["varsupsetneqq",[10956,65024]],["vartheta",[977]],["vartriangleleft",[8882]],["vartriangleright",[8883]],["vBar",[10984]],["Vbar",[10987]],["vBarv",[10985]],["Vcy",[1042]],["vcy",[1074]],["vdash",[8866]],["vDash",[8872]],["Vdash",[8873]],["VDash",[8875]],["Vdashl",[10982]],["veebar",[8891]],["vee",[8744]],["Vee",[8897]],["veeeq",[8794]],["vellip",[8942]],["verbar",[124]],["Verbar",[8214]],["vert",[124]],["Vert",[8214]],["VerticalBar",[8739]],["VerticalLine",[124]],["VerticalSeparator",[10072]],["VerticalTilde",[8768]],["VeryThinSpace",[8202]],["Vfr",[120089]],["vfr",[120115]],["vltri",[8882]],["vnsub",[8834,8402]],["vnsup",[8835,8402]],["Vopf",[120141]],["vopf",[120167]],["vprop",[8733]],["vrtri",[8883]],["Vscr",[119985]],["vscr",[120011]],["vsubnE",[10955,65024]],["vsubne",[8842,65024]],["vsupnE",[10956,65024]],["vsupne",[8843,65024]],["Vvdash",[8874]],["vzigzag",[10650]],["Wcirc",[372]],["wcirc",[373]],["wedbar",[10847]],["wedge",[8743]],["Wedge",[8896]],["wedgeq",[8793]],["weierp",[8472]],["Wfr",[120090]],["wfr",[120116]],["Wopf",[120142]],["wopf",[120168]],["wp",[8472]],["wr",[8768]],["wreath",[8768]],["Wscr",[119986]],["wscr",[120012]],["xcap",[8898]],["xcirc",[9711]],["xcup",[8899]],["xdtri",[9661]],["Xfr",[120091]],["xfr",[120117]],["xharr",[10231]],["xhArr",[10234]],["Xi",[926]],["xi",[958]],["xlarr",[10229]],["xlArr",[10232]],["xmap",[10236]],["xnis",[8955]],["xodot",[10752]],["Xopf",[120143]],["xopf",[120169]],["xoplus",[10753]],["xotime",[10754]],["xrarr",[10230]],["xrArr",[10233]],["Xscr",[119987]],["xscr",[120013]],["xsqcup",[10758]],["xuplus",[10756]],["xutri",[9651]],["xvee",[8897]],["xwedge",[8896]],["Yacute",[221]],["yacute",[253]],["YAcy",[1071]],["yacy",[1103]],["Ycirc",[374]],["ycirc",[375]],["Ycy",[1067]],["ycy",[1099]],["yen",[165]],["Yfr",[120092]],["yfr",[120118]],["YIcy",[1031]],["yicy",[1111]],["Yopf",[120144]],["yopf",[120170]],["Yscr",[119988]],["yscr",[120014]],["YUcy",[1070]],["yucy",[1102]],["yuml",[255]],["Yuml",[376]],["Zacute",[377]],["zacute",[378]],["Zcaron",[381]],["zcaron",[382]],["Zcy",[1047]],["zcy",[1079]],["Zdot",[379]],["zdot",[380]],["zeetrf",[8488]],["ZeroWidthSpace",[8203]],["Zeta",[918]],["zeta",[950]],["zfr",[120119]],["Zfr",[8488]],["ZHcy",[1046]],["zhcy",[1078]],["zigrarr",[8669]],["zopf",[120171]],["Zopf",[8484]],["Zscr",[119989]],["zscr",[120015]],["zwj",[8205]],["zwnj",[8204]]],n={},o={};function i(){}!function(e,t){var n=r.length,o=[];for(;n--;){var i,s=r[n],a=s[0],c=s[1],l=c[0],u=l<32||l>126||62===l||60===l||38===l||34===l||39===l;if(u&&(i=t[l]=t[l]||{}),c[1]){var d=c[1];e[a]=String.fromCharCode(l)+String.fromCharCode(d),o.push(u&&(i[d]=a))}else e[a]=String.fromCharCode(l),o.push(u&&(i[""]=a))}}(n,o),i.prototype.decode=function(e){return e&&e.length?e.replace(/&(#?[\w\d]+);?/g,function(e,t){var r;if("#"===t.charAt(0)){var o="x"===t.charAt(1)?parseInt(t.substr(2).toLowerCase(),16):parseInt(t.substr(1));isNaN(o)||o<-32768||o>65535||(r=String.fromCharCode(o))}else r=n[t];return r||e}):""},i.decode=function(e){return(new i).decode(e)},i.prototype.encode=function(e){if(!e||!e.length)return"";for(var t=e.length,r="",n=0;n<t;){var i=o[e.charCodeAt(n)];if(i){var s=i[e.charCodeAt(n+1)];if(s?n++:s=i[""],s){r+="&"+s+";",n++;continue}}r+=e.charAt(n),n++}return r},i.encode=function(e){return(new i).encode(e)},i.prototype.encodeNonUTF=function(e){if(!e||!e.length)return"";for(var t=e.length,r="",n=0;n<t;){var i=e.charCodeAt(n),s=o[i];if(s){var a=s[e.charCodeAt(n+1)];if(a?n++:a=s[""],a){r+="&"+a+";",n++;continue}}r+=i<32||i>126?"&#"+i+";":e.charAt(n),n++}return r},i.encodeNonUTF=function(e){return(new i).encodeNonUTF(e)},i.prototype.encodeNonASCII=function(e){if(!e||!e.length)return"";for(var t=e.length,r="",n=0;n<t;){var o=e.charCodeAt(n);o<=255?r+=e[n++]:(r+="&#"+o+";",n++)}return r},i.encodeNonASCII=function(e){return(new i).encodeNonASCII(e)},e.exports=i},function(e,t){var r;r=function(){return this}();try{r=r||Function("return this")()||(0,eval)("this")}catch(e){"object"==typeof window&&(r=window)}e.exports=r},function(e,t,r){var n,o;
/*!
 * reveal.js
 * http://revealjs.com
 * MIT licensed
 *
 * Copyright (C) 2017 Hakim El Hattab, http://hakim.se
 */
/*!
 * reveal.js
 * http://revealjs.com
 * MIT licensed
 *
 * Copyright (C) 2017 Hakim El Hattab, http://hakim.se
 */
o=this,void 0===(n=function(){return o.Reveal=function(){"use strict";var e,t,r,n,o,i,s,a,c,l=".slides section",u=".slides>section",d=".slides>section.present>section",p=".slides>section:first-of-type",f=navigator.userAgent,h={width:960,height:700,margin:.04,minScale:.2,maxScale:2,controls:!0,controlsTutorial:!0,controlsLayout:"bottom-right",controlsBackArrows:"faded",progress:!0,slideNumber:!1,showSlideNumber:"all",history:!1,keyboard:!0,keyboardCondition:null,overview:!0,center:!0,touch:!0,loop:!1,rtl:!1,shuffle:!1,fragments:!0,embedded:!1,help:!0,pause:!0,showNotes:!1,autoPlayMedia:null,autoSlide:0,autoSlideStoppable:!0,autoSlideMethod:null,mouseWheel:!1,rollingLinks:!1,hideAddressBar:!0,previewLinks:!1,postMessage:!0,postMessageEvents:!1,focusBodyOnPageVisibilityChange:!0,transition:"slide",transitionSpeed:"default",backgroundTransition:"fade",parallaxBackgroundImage:"",parallaxBackgroundSize:"",parallaxBackgroundHorizontal:null,parallaxBackgroundVertical:null,pdfMaxPagesPerSlide:Number.POSITIVE_INFINITY,pdfPageHeightOffset:-1,viewDistance:3,display:"block",dependencies:[]},v=!1,m=!1,g=!1,b=null,y=null,w=!1,x=!1,E=[],A=1,k={layout:"",overview:""},S={},L={},q=0,N=0,T=!1,C=0,_=0,O=-1,j=!1,I={startX:0,startY:0,startSpan:0,startCount:0,captured:!1,threshold:40},D={"N  ,  SPACE":"Next slide",P:"Previous slide","&#8592;  ,  H":"Navigate left","&#8594;  ,  L":"Navigate right","&#8593;  ,  K":"Navigate up","&#8595;  ,  J":"Navigate down",Home:"First slide",End:"Last slide","B  ,  .":"Pause",F:"Fullscreen","ESC, O":"Slide overview"};function R(e){var t="";if(3===e.nodeType)t+=e.textContent;else if(1===e.nodeType){var r=e.getAttribute("aria-hidden"),n="none"===window.getComputedStyle(e).display;"true"===r||n||z(e.childNodes).forEach(function(e){t+=R(e)})}return t}function M(){var e=ce(window.innerWidth,window.innerHeight),t=Math.floor(e.width*(1+h.margin)),r=Math.floor(e.height*(1+h.margin)),n=e.width,o=e.height;Y("@page{size:"+t+"px "+r+"px; margin: 0px;}"),Y(".reveal section>img, .reveal section>video, .reveal section>iframe{max-width: "+n+"px; max-height:"+o+"px}"),document.body.classList.add("print-pdf"),document.body.style.width=t+"px",document.body.style.height=r+"px",ae(n,o),z(S.wrapper.querySelectorAll(u)).forEach(function(e,t){e.setAttribute("data-index-h",t),e.classList.contains("stack")&&z(e.querySelectorAll("section")).forEach(function(e,r){e.setAttribute("data-index-h",t),e.setAttribute("data-index-v",r)})}),z(S.wrapper.querySelectorAll(l)).forEach(function(e){if(!1===e.classList.contains("stack")){var i=(t-n)/2,s=(r-o)/2,a=e.scrollHeight,c=Math.max(Math.ceil(a/r),1);(1===(c=Math.min(c,h.pdfMaxPagesPerSlide))&&h.center||e.classList.contains("center"))&&(s=Math.max((r-a)/2,0));var l=document.createElement("div");if(l.className="pdf-page",l.style.height=(r+h.pdfPageHeightOffset)*c+"px",e.parentNode.insertBefore(l,e),l.appendChild(e),e.style.left=i+"px",e.style.top=s+"px",e.style.width=n+"px",e.slideBackgroundElement&&l.insertBefore(e.slideBackgroundElement,e),h.showNotes){var u=Qe(e);if(u){var d="string"==typeof h.showNotes?h.showNotes:"inline",p=document.createElement("div");p.classList.add("speaker-notes"),p.classList.add("speaker-notes-pdf"),p.setAttribute("data-layout",d),p.innerHTML=u,"separate-page"===d?l.parentNode.insertBefore(p,l.nextSibling):(p.style.left="8px",p.style.bottom="8px",p.style.width=t-16+"px",l.appendChild(p))}}if(h.slideNumber&&/all|print/i.test(h.showSlideNumber)){var f=parseInt(e.getAttribute("data-index-h"),10)+1,v=parseInt(e.getAttribute("data-index-v"),10)+1,m=document.createElement("div");m.classList.add("slide-number"),m.classList.add("slide-number-pdf"),m.innerHTML=_e(f,".",v),l.appendChild(m)}}}),z(S.wrapper.querySelectorAll(l+" .fragment")).forEach(function(e){e.classList.add("visible")}),ee("pdf-ready")}function P(e,t,r,n){for(var o=e.querySelectorAll("."+r),i=0;i<o.length;i++){var s=o[i];if(s.parentNode===e)return s}var a=document.createElement(t);return a.className=r,"string"==typeof n&&(a.innerHTML=n),e.appendChild(a),a}function U(e,t){var r={background:e.getAttribute("data-background"),backgroundSize:e.getAttribute("data-background-size"),backgroundImage:e.getAttribute("data-background-image"),backgroundVideo:e.getAttribute("data-background-video"),backgroundIframe:e.getAttribute("data-background-iframe"),backgroundColor:e.getAttribute("data-background-color"),backgroundRepeat:e.getAttribute("data-background-repeat"),backgroundPosition:e.getAttribute("data-background-position"),backgroundTransition:e.getAttribute("data-background-transition")},n=document.createElement("div");n.className="slide-background "+e.className.replace(/present|past|future/,""),r.background&&(/^(http|file|\/\/)/gi.test(r.background)||/\.(svg|png|jpg|jpeg|gif|bmp)([?#]|$)/gi.test(r.background)?e.setAttribute("data-background-image",r.background):n.style.background=r.background),(r.background||r.backgroundColor||r.backgroundImage||r.backgroundVideo||r.backgroundIframe)&&n.setAttribute("data-background-hash",r.background+r.backgroundSize+r.backgroundImage+r.backgroundVideo+r.backgroundIframe+r.backgroundColor+r.backgroundRepeat+r.backgroundPosition+r.backgroundTransition),r.backgroundSize&&(n.style.backgroundSize=r.backgroundSize),r.backgroundSize&&n.setAttribute("data-background-size",r.backgroundSize),r.backgroundColor&&(n.style.backgroundColor=r.backgroundColor),r.backgroundRepeat&&(n.style.backgroundRepeat=r.backgroundRepeat),r.backgroundPosition&&(n.style.backgroundPosition=r.backgroundPosition),r.backgroundTransition&&n.setAttribute("data-background-transition",r.backgroundTransition),t.appendChild(n),e.classList.remove("has-dark-background"),e.classList.remove("has-light-background"),e.slideBackgroundElement=n;var o,i=window.getComputedStyle(n);if(i&&i.backgroundColor){var s=$(i.backgroundColor);s&&0!==s.a&&("string"==typeof(o=i.backgroundColor)&&(o=$(o)),(o?(299*o.r+587*o.g+114*o.b)/1e3:null)<128?e.classList.add("has-dark-background"):e.classList.add("has-light-background"))}return n}function H(e){var t=h.transition;if("object"==typeof e&&F(h,e),!1!==m){var r=S.wrapper.querySelectorAll(l).length;S.wrapper.classList.remove(t),!1===L.transforms3d&&(h.transition="linear"),S.wrapper.classList.add(h.transition),S.wrapper.setAttribute("data-transition-speed",h.transitionSpeed),S.wrapper.setAttribute("data-background-transition",h.backgroundTransition),S.controls.style.display=h.controls?"block":"none",S.progress.style.display=h.progress?"block":"none",S.controls.setAttribute("data-controls-layout",h.controlsLayout),S.controls.setAttribute("data-controls-back-arrows",h.controlsBackArrows),h.shuffle&&Se(),h.rtl?S.wrapper.classList.add("rtl"):S.wrapper.classList.remove("rtl"),h.center?S.wrapper.classList.add("center"):S.wrapper.classList.remove("center"),!1===h.pause&&ye(),h.showNotes&&S.speakerNotes.setAttribute("data-layout","string"==typeof h.showNotes?h.showNotes:"inline"),h.mouseWheel?(document.addEventListener("DOMMouseScroll",St,!1),document.addEventListener("mousewheel",St,!1)):(document.removeEventListener("DOMMouseScroll",St,!1),document.removeEventListener("mousewheel",St,!1)),h.rollingLinks?function(){if(L.transforms3d&&!("msPerspective"in document.body.style))for(var e=S.wrapper.querySelectorAll(l+" a"),t=0,r=e.length;t<r;t++){var n=e[t];if(n.textContent&&!n.querySelector("*")&&(!n.className||!n.classList.contains(n,"roll"))){var o=document.createElement("span");o.setAttribute("data-title",n.text),o.innerHTML=n.innerHTML,n.classList.add("roll"),n.innerHTML="",n.appendChild(o)}}}():function(){for(var e=S.wrapper.querySelectorAll(l+" a.roll"),t=0,r=e.length;t<r;t++){var n=e[t],o=n.querySelector("span");o&&(n.classList.remove("roll"),n.innerHTML=o.innerHTML)}}(),h.previewLinks?(te(),re("[data-preview-link=false]")):(re(),te("[data-preview-link]:not([data-preview-link=false])")),c&&(c.destroy(),c=null),r>1&&h.autoSlide&&h.autoSlideStoppable&&L.canvas&&L.requestAnimationFrame&&((c=new Ut(S.wrapper,function(){return Math.min(Math.max((Date.now()-O)/C,0),1)})).on("click",Pt),j=!1),!1===h.fragments&&z(S.slides.querySelectorAll(".fragment")).forEach(function(e){e.classList.add("visible"),e.classList.remove("current-fragment")});var n="none";h.slideNumber&&!K()&&("all"===h.showSlideNumber?n="block":"speaker"===h.showSlideNumber&&We()&&(n="block")),S.slideNumber.style.display=n,ke()}}function B(){var e;T=!0,window.addEventListener("hashchange",jt,!1),window.addEventListener("resize",It,!1),h.touch&&(S.wrapper.addEventListener("touchstart",yt,!1),S.wrapper.addEventListener("touchmove",wt,!1),S.wrapper.addEventListener("touchend",xt,!1),window.navigator.pointerEnabled?(S.wrapper.addEventListener("pointerdown",Et,!1),S.wrapper.addEventListener("pointermove",At,!1),S.wrapper.addEventListener("pointerup",kt,!1)):window.navigator.msPointerEnabled&&(S.wrapper.addEventListener("MSPointerDown",Et,!1),S.wrapper.addEventListener("MSPointerMove",At,!1),S.wrapper.addEventListener("MSPointerUp",kt,!1))),h.keyboard&&(document.addEventListener("keydown",bt,!1),document.addEventListener("keypress",gt,!1)),h.progress&&S.progress&&S.progress.addEventListener("click",Lt,!1),h.focusBodyOnPageVisibilityChange&&("hidden"in document?e="visibilitychange":"msHidden"in document?e="msvisibilitychange":"webkitHidden"in document&&(e="webkitvisibilitychange"),e&&document.addEventListener(e,Dt,!1));var t=["touchstart","click"];f.match(/android/gi)&&(t=["touchstart"]),t.forEach(function(e){S.controlsLeft.forEach(function(t){t.addEventListener(e,qt,!1)}),S.controlsRight.forEach(function(t){t.addEventListener(e,Nt,!1)}),S.controlsUp.forEach(function(t){t.addEventListener(e,Tt,!1)}),S.controlsDown.forEach(function(t){t.addEventListener(e,Ct,!1)}),S.controlsPrev.forEach(function(t){t.addEventListener(e,_t,!1)}),S.controlsNext.forEach(function(t){t.addEventListener(e,Ot,!1)})})}function V(){T=!1,document.removeEventListener("keydown",bt,!1),document.removeEventListener("keypress",gt,!1),window.removeEventListener("hashchange",jt,!1),window.removeEventListener("resize",It,!1),S.wrapper.removeEventListener("touchstart",yt,!1),S.wrapper.removeEventListener("touchmove",wt,!1),S.wrapper.removeEventListener("touchend",xt,!1),window.navigator.pointerEnabled?(S.wrapper.removeEventListener("pointerdown",Et,!1),S.wrapper.removeEventListener("pointermove",At,!1),S.wrapper.removeEventListener("pointerup",kt,!1)):window.navigator.msPointerEnabled&&(S.wrapper.removeEventListener("MSPointerDown",Et,!1),S.wrapper.removeEventListener("MSPointerMove",At,!1),S.wrapper.removeEventListener("MSPointerUp",kt,!1)),h.progress&&S.progress&&S.progress.removeEventListener("click",Lt,!1),["touchstart","click"].forEach(function(e){S.controlsLeft.forEach(function(t){t.removeEventListener(e,qt,!1)}),S.controlsRight.forEach(function(t){t.removeEventListener(e,Nt,!1)}),S.controlsUp.forEach(function(t){t.removeEventListener(e,Tt,!1)}),S.controlsDown.forEach(function(t){t.removeEventListener(e,Ct,!1)}),S.controlsPrev.forEach(function(t){t.removeEventListener(e,_t,!1)}),S.controlsNext.forEach(function(t){t.removeEventListener(e,Ot,!1)})})}function F(e,t){for(var r in t)e[r]=t[r];return e}function z(e){return Array.prototype.slice.call(e)}function W(e){if("string"==typeof e){if("null"===e)return null;if("true"===e)return!0;if("false"===e)return!1;if(e.match(/^-?[\d\.]+$/))return parseFloat(e)}return e}function G(e,t){var r=e.x-t.x,n=e.y-t.y;return Math.sqrt(r*r+n*n)}function J(e,t){e.style.WebkitTransform=t,e.style.MozTransform=t,e.style.msTransform=t,e.style.transform=t}function X(e){"string"==typeof e.layout&&(k.layout=e.layout),"string"==typeof e.overview&&(k.overview=e.overview),k.layout?J(S.slides,k.layout+" "+k.overview):J(S.slides,k.overview)}function Y(e){var t=document.createElement("style");t.type="text/css",t.styleSheet?t.styleSheet.cssText=e:t.appendChild(document.createTextNode(e)),document.getElementsByTagName("head")[0].appendChild(t)}function Z(e,t){for(var r=e.parentNode;r;){var n=r.matches||r.matchesSelector||r.msMatchesSelector;if(n&&n.call(r,t))return r;r=r.parentNode}return null}function $(e){var t=e.match(/^#([0-9a-f]{3})$/i);if(t&&t[1])return t=t[1],{r:17*parseInt(t.charAt(0),16),g:17*parseInt(t.charAt(1),16),b:17*parseInt(t.charAt(2),16)};var r=e.match(/^#([0-9a-f]{6})$/i);if(r&&r[1])return r=r[1],{r:parseInt(r.substr(0,2),16),g:parseInt(r.substr(2,2),16),b:parseInt(r.substr(4,2),16)};var n=e.match(/^rgb\s*\(\s*(\d+)\s*,\s*(\d+)\s*,\s*(\d+)\s*\)$/i);if(n)return{r:parseInt(n[1],10),g:parseInt(n[2],10),b:parseInt(n[3],10)};var o=e.match(/^rgba\s*\(\s*(\d+)\s*,\s*(\d+)\s*,\s*(\d+)\s*\,\s*([\d]+|[\d]*.[\d]+)\s*\)$/i);return o?{r:parseInt(o[1],10),g:parseInt(o[2],10),b:parseInt(o[3],10),a:parseFloat(o[4])}:null}function K(){return/print-pdf/gi.test(window.location.search)}function Q(){setTimeout(function(){window.scrollTo(0,1)},10)}function ee(e,t){var r=document.createEvent("HTMLEvents",1,2);r.initEvent(e,!0,!0),F(r,t),S.wrapper.dispatchEvent(r),h.postMessageEvents&&window.parent!==window.self&&window.parent.postMessage(JSON.stringify({namespace:"reveal",eventName:e,state:et()}),"*")}function te(e){var t=z(document.querySelectorAll(e||"a"));t.forEach(function(e){/^(http|www)/gi.test(e.getAttribute("href"))&&e.addEventListener("click",Mt,!1)})}function re(e){var t=z(document.querySelectorAll(e||"a"));t.forEach(function(e){/^(http|www)/gi.test(e.getAttribute("href"))&&e.removeEventListener("click",Mt,!1)})}function ne(e){"boolean"==typeof e?e?oe():ie():S.overlay?ie():oe()}function oe(){if(h.help){ie(),S.overlay=document.createElement("div"),S.overlay.classList.add("overlay"),S.overlay.classList.add("overlay-help"),S.wrapper.appendChild(S.overlay);var e='<p class="title">Keyboard Shortcuts</p><br/>';for(var t in e+="<table><th>KEY</th><th>ACTION</th>",D)e+="<tr><td>"+t+"</td><td>"+D[t]+"</td></tr>";e+="</table>",S.overlay.innerHTML=["<header>",'<a class="close" href="#"><span class="icon"></span></a>',"</header>",'<div class="viewport">','<div class="viewport-inner">'+e+"</div>","</div>"].join(""),S.overlay.querySelector(".close").addEventListener("click",function(e){ie(),e.preventDefault()},!1),setTimeout(function(){S.overlay.classList.add("visible")},1)}}function ie(){S.overlay&&(S.overlay.parentNode.removeChild(S.overlay),S.overlay=null)}function se(){if(S.wrapper&&!K()){var e=ce();ae(h.width,h.height),S.slides.style.width=e.width+"px",S.slides.style.height=e.height+"px",A=Math.min(e.presentationWidth/e.width,e.presentationHeight/e.height),A=Math.max(A,h.minScale),1===(A=Math.min(A,h.maxScale))?(S.slides.style.zoom="",S.slides.style.left="",S.slides.style.top="",S.slides.style.bottom="",S.slides.style.right="",X({layout:""})):A>1&&L.zoom?(S.slides.style.zoom=A,S.slides.style.left="",S.slides.style.top="",S.slides.style.bottom="",S.slides.style.right="",X({layout:""})):(S.slides.style.zoom="",S.slides.style.left="50%",S.slides.style.top="50%",S.slides.style.bottom="auto",S.slides.style.right="auto",X({layout:"translate(-50%, -50%) scale("+A+")"}));for(var t=z(S.wrapper.querySelectorAll(l)),r=0,n=t.length;r<n;r++){var o=t[r];"none"!==o.style.display&&(h.center||o.classList.contains("center")?o.classList.contains("stack")?o.style.top=0:o.style.top=Math.max((e.height-o.scrollHeight)/2,0)+"px":o.style.top="")}Te(),Ie(),me()&&fe()}}function ae(e,t){z(S.slides.querySelectorAll("section > .stretch")).forEach(function(r){var n=function(e,t){if(t=t||0,e){var r,n=e.style.height;return e.style.height="0px",r=t-e.parentNode.offsetHeight,e.style.height=n+"px",r}return t}(r,t);if(/(img|video)/gi.test(r.nodeName)){var o=r.naturalWidth||r.videoWidth,i=r.naturalHeight||r.videoHeight,s=Math.min(e/o,n/i);r.style.width=o*s+"px",r.style.height=i*s+"px"}else r.style.width=e+"px",r.style.height=n+"px"})}function ce(e,t){var r={width:h.width,height:h.height,presentationWidth:e||S.wrapper.offsetWidth,presentationHeight:t||S.wrapper.offsetHeight};return r.presentationWidth-=r.presentationWidth*h.margin,r.presentationHeight-=r.presentationHeight*h.margin,"string"==typeof r.width&&/%$/.test(r.width)&&(r.width=parseInt(r.width,10)/100*r.presentationWidth),"string"==typeof r.height&&/%$/.test(r.height)&&(r.height=parseInt(r.height,10)/100*r.presentationHeight),r}function le(e,t){"object"==typeof e&&"function"==typeof e.setAttribute&&e.setAttribute("data-previous-indexv",t||0)}function ue(e){if("object"==typeof e&&"function"==typeof e.setAttribute&&e.classList.contains("stack")){var t=e.hasAttribute("data-start-indexv")?"data-start-indexv":"data-previous-indexv";return parseInt(e.getAttribute(t)||0,10)}return 0}function de(){if(h.overview&&!me()){g=!0,S.wrapper.classList.add("overview"),S.wrapper.classList.remove("overview-deactivating"),L.overviewTransitions&&setTimeout(function(){S.wrapper.classList.add("overview-animated")},1),st(),S.slides.appendChild(S.background),z(S.wrapper.querySelectorAll(l)).forEach(function(e){e.classList.contains("stack")||e.addEventListener("click",Rt,!0)});var e=ce();b=e.width+70,y=e.height+70,h.rtl&&(b=-b),qe(),pe(),fe(),se(),ee("overviewshown",{indexh:t,indexv:r,currentSlide:o})}}function pe(){z(S.wrapper.querySelectorAll(u)).forEach(function(e,t){e.setAttribute("data-index-h",t),J(e,"translate3d("+t*b+"px, 0, 0)"),e.classList.contains("stack")&&z(e.querySelectorAll("section")).forEach(function(e,r){e.setAttribute("data-index-h",t),e.setAttribute("data-index-v",r),J(e,"translate3d(0, "+r*y+"px, 0)")})}),z(S.background.childNodes).forEach(function(e,t){J(e,"translate3d("+t*b+"px, 0, 0)"),z(e.querySelectorAll(".slide-background")).forEach(function(e,t){J(e,"translate3d(0, "+t*y+"px, 0)")})})}function fe(){var e=Math.min(window.innerWidth,window.innerHeight),n=Math.max(e/5,150)/e;X({overview:["scale("+n+")","translateX("+-t*b+"px)","translateY("+-r*y+"px)"].join(" ")})}function he(){h.overview&&(g=!1,S.wrapper.classList.remove("overview"),S.wrapper.classList.remove("overview-animated"),S.wrapper.classList.add("overview-deactivating"),setTimeout(function(){S.wrapper.classList.remove("overview-deactivating")},1),S.wrapper.appendChild(S.background),z(S.wrapper.querySelectorAll(l)).forEach(function(e){J(e,""),e.removeEventListener("click",Rt,!0)}),z(S.background.querySelectorAll(".slide-background")).forEach(function(e){J(e,"")}),X({overview:""}),Ae(t,r),se(),it(),ee("overviewhidden",{indexh:t,indexv:r,currentSlide:o}))}function ve(e){"boolean"==typeof e?e?de():he():me()?he():de()}function me(){return g}function ge(e){return(e=e||o)&&e.parentNode&&!!e.parentNode.nodeName.match(/section/i)}function be(){if(h.pause){var e=S.wrapper.classList.contains("paused");st(),S.wrapper.classList.add("paused"),!1===e&&ee("paused")}}function ye(){var e=S.wrapper.classList.contains("paused");S.wrapper.classList.remove("paused"),it(),e&&ee("resumed")}function we(e){"boolean"==typeof e?e?be():ye():xe()?ye():be()}function xe(){return S.wrapper.classList.contains("paused")}function Ee(e){"boolean"==typeof e?e?ct():at():j?ct():at()}function Ae(e,i,s,a){n=o;var c=S.wrapper.querySelectorAll(u);if(0!==c.length){void 0!==i||me()||(i=ue(c[e])),n&&n.parentNode&&n.parentNode.classList.contains("stack")&&le(n.parentNode,r);var l=E.concat();E.length=0;var f=t||0,h=r||0;t=Le(u,void 0===e?t:e),r=Le(d,void 0===i?r:i),qe(),se();e:for(var v=0,m=E.length;v<m;v++){for(var g=0;g<l.length;g++)if(l[g]===E[v]){l.splice(g,1);continue e}document.documentElement.classList.add(E[v]),ee(E[v])}for(;l.length;)document.documentElement.classList.remove(l.pop());me()&&fe();var b=c[t],y=b.querySelectorAll("section");o=y[r]||b,void 0!==s&&rt(s);var w=t!==f||r!==h;w?ee("slidechanged",{indexh:t,indexv:r,previousSlide:n,currentSlide:o,origin:a}):n=null,n&&(n.classList.remove("present"),n.setAttribute("aria-hidden","true"),S.wrapper.querySelector(p).classList.contains("present")&&setTimeout(function(){var e,t=z(S.wrapper.querySelectorAll(u+".stack"));for(e in t)t[e]&&le(t[e],0)},0)),!w&&n||(Ve(n),Ue(o)),S.statusDiv.textContent=R(o),Oe(),Te(),je(),Ie(),Ce(),Ne(),Je(),it()}}function ke(){var e;V(),B(),se(),C=h.autoSlide,it(),K(),S.background.innerHTML="",S.background.classList.add("no-transition"),z(S.wrapper.querySelectorAll(u)).forEach(function(e){var t=U(e,S.background);z(e.querySelectorAll("section")).forEach(function(e){U(e,t),t.classList.add("stack")})}),h.parallaxBackgroundImage?(S.background.style.backgroundImage='url("'+h.parallaxBackgroundImage+'")',S.background.style.backgroundSize=h.parallaxBackgroundSize,setTimeout(function(){S.wrapper.classList.add("has-parallax-background")},1)):(S.background.style.backgroundImage="",S.wrapper.classList.remove("has-parallax-background")),Je(),z(S.wrapper.querySelectorAll(u)).forEach(function(e){var t=z(e.querySelectorAll("section"));t.forEach(function(e,t){tt(e.querySelectorAll(".fragment"))}),0===t.length&&tt(e.querySelectorAll(".fragment"))}),Oe(),Te(),Ce(),qe(),je(!0),h.showNotes&&S.slides.querySelectorAll("[data-notes], aside.notes").length>0?S.wrapper.classList.add("show-notes"):S.wrapper.classList.remove("show-notes"),Ne(),(e=function(e,t,r){z(S.slides.querySelectorAll("iframe["+e+'*="'+t+'"]')).forEach(function(t){var n=t.getAttribute(e);n&&-1===n.indexOf(r)&&t.setAttribute(e,n+(/\?/.test(n)?"&":"?")+r)})})("src","youtube.com/embed/","enablejsapi=1"),e("data-src","youtube.com/embed/","enablejsapi=1"),e("src","player.vimeo.com/","api=1"),e("data-src","player.vimeo.com/","api=1"),s&&z(S.slides.querySelectorAll("video, audio")).forEach(function(e){e.controls=!0}),!1===h.autoPlayMedia?Ve(o,{unloadIframes:!1}):Ue(o),me()&&pe()}function Se(){var e=z(S.wrapper.querySelectorAll(u));e.forEach(function(t){S.slides.insertBefore(t,e[Math.floor(Math.random()*e.length)])})}function Le(e,t){var r=z(S.wrapper.querySelectorAll(e)),n=r.length,o=K();if(n){h.loop&&(t%=n)<0&&(t=n+t),t=Math.max(Math.min(t,n-1),0);for(var i=0;i<n;i++){var s=r[i],a=h.rtl&&!ge(s);if(s.classList.remove("past"),s.classList.remove("present"),s.classList.remove("future"),s.setAttribute("hidden",""),s.setAttribute("aria-hidden","true"),s.querySelector("section")&&s.classList.add("stack"),o)s.classList.add("present");else if(i<t){if(s.classList.add(a?"future":"past"),h.fragments)for(var c=z(s.querySelectorAll(".fragment"));c.length;){var l=c.pop();l.classList.add("visible"),l.classList.remove("current-fragment")}}else if(i>t&&(s.classList.add(a?"past":"future"),h.fragments))for(var u=z(s.querySelectorAll(".fragment.visible"));u.length;){var d=u.pop();d.classList.remove("visible"),d.classList.remove("current-fragment")}}r[t].classList.add("present"),r[t].removeAttribute("hidden"),r[t].removeAttribute("aria-hidden");var p=r[t].getAttribute("data-state");p&&(E=E.concat(p.split(" ")))}else t=0;return t}function qe(){var e,n,o=z(S.wrapper.querySelectorAll(u)),i=o.length;if(i&&void 0!==t){var a=me()?10:h.viewDistance;s&&(a=me()?6:2),K()&&(a=Number.MAX_VALUE);for(var c=0;c<i;c++){var l=o[c],d=z(l.querySelectorAll("section")),p=d.length;if(e=Math.abs((t||0)-c)||0,h.loop&&(e=Math.abs(((t||0)-c)%(i-a))||0),e<a?De(l):Re(l),p)for(var f=ue(l),v=0;v<p;v++){var m=d[v];n=c===(t||0)?Math.abs((r||0)-v):Math.abs(v-f),e+n<a?De(m):Re(m)}}S.wrapper.querySelectorAll(".slides>section>section").length?S.wrapper.classList.add("has-vertical-slides"):S.wrapper.classList.remove("has-vertical-slides"),S.wrapper.querySelectorAll(".slides>section").length>1?S.wrapper.classList.add("has-horizontal-slides"):S.wrapper.classList.remove("has-horizontal-slides")}}function Ne(){h.showNotes&&S.speakerNotes&&o&&!K()&&(S.speakerNotes.innerHTML=Qe()||'<span class="notes-placeholder">No notes on this slide.</span>')}function Te(){h.progress&&S.progressbar&&(S.progressbar.style.width=ze()*S.wrapper.offsetWidth+"px")}function Ce(){if(h.slideNumber&&S.slideNumber){var e=[],n="h.v";switch("string"==typeof h.slideNumber&&(n=h.slideNumber),n){case"c":e.push(Fe()+1);break;case"c/t":e.push(Fe()+1,"/",Ze());break;case"h/v":e.push(t+1),ge()&&e.push("/",r+1);break;default:e.push(t+1),ge()&&e.push(".",r+1)}S.slideNumber.innerHTML=_e(e[0],e[1],e[2])}}function _e(e,t,r){return"number"!=typeof r||isNaN(r)?'<span class="slide-number-a">'+e+"</span>":'<span class="slide-number-a">'+e+'</span><span class="slide-number-delimiter">'+t+'</span><span class="slide-number-b">'+r+"</span>"}function Oe(){var e=Me(),t=Pe();S.controlsLeft.concat(S.controlsRight).concat(S.controlsUp).concat(S.controlsDown).concat(S.controlsPrev).concat(S.controlsNext).forEach(function(e){e.classList.remove("enabled"),e.classList.remove("fragmented"),e.setAttribute("disabled","disabled")}),e.left&&S.controlsLeft.forEach(function(e){e.classList.add("enabled"),e.removeAttribute("disabled")}),e.right&&S.controlsRight.forEach(function(e){e.classList.add("enabled"),e.removeAttribute("disabled")}),e.up&&S.controlsUp.forEach(function(e){e.classList.add("enabled"),e.removeAttribute("disabled")}),e.down&&S.controlsDown.forEach(function(e){e.classList.add("enabled"),e.removeAttribute("disabled")}),(e.left||e.up)&&S.controlsPrev.forEach(function(e){e.classList.add("enabled"),e.removeAttribute("disabled")}),(e.right||e.down)&&S.controlsNext.forEach(function(e){e.classList.add("enabled"),e.removeAttribute("disabled")}),o&&(t.prev&&S.controlsPrev.forEach(function(e){e.classList.add("fragmented","enabled"),e.removeAttribute("disabled")}),t.next&&S.controlsNext.forEach(function(e){e.classList.add("fragmented","enabled"),e.removeAttribute("disabled")}),ge(o)?(t.prev&&S.controlsUp.forEach(function(e){e.classList.add("fragmented","enabled"),e.removeAttribute("disabled")}),t.next&&S.controlsDown.forEach(function(e){e.classList.add("fragmented","enabled"),e.removeAttribute("disabled")})):(t.prev&&S.controlsLeft.forEach(function(e){e.classList.add("fragmented","enabled"),e.removeAttribute("disabled")}),t.next&&S.controlsRight.forEach(function(e){e.classList.add("fragmented","enabled"),e.removeAttribute("disabled")}))),h.controlsTutorial&&(!x&&e.down?S.controlsDownArrow.classList.add("highlight"):(S.controlsDownArrow.classList.remove("highlight"),!w&&e.right&&0===r?S.controlsRightArrow.classList.add("highlight"):S.controlsRightArrow.classList.remove("highlight")))}function je(e){var n=null,s=h.rtl?"future":"past",a=h.rtl?"past":"future";if(z(S.background.childNodes).forEach(function(o,i){o.classList.remove("past"),o.classList.remove("present"),o.classList.remove("future"),i<t?o.classList.add(s):i>t?o.classList.add(a):(o.classList.add("present"),n=o),(e||i===t)&&z(o.querySelectorAll(".slide-background")).forEach(function(e,o){e.classList.remove("past"),e.classList.remove("present"),e.classList.remove("future"),o<r?e.classList.add("past"):o>r?e.classList.add("future"):(e.classList.add("present"),i===t&&(n=e))})}),i&&Ve(i),n){Ue(n);var c=n.style.backgroundImage||"";/\.gif/i.test(c)&&(n.style.backgroundImage="",window.getComputedStyle(n).opacity,n.style.backgroundImage=c);var l=i?i.getAttribute("data-background-hash"):null,u=n.getAttribute("data-background-hash");u&&u===l&&n!==i&&S.background.classList.add("no-transition"),i=n}o&&["has-light-background","has-dark-background"].forEach(function(e){o.classList.contains(e)?S.wrapper.classList.add(e):S.wrapper.classList.remove(e)}),setTimeout(function(){S.background.classList.remove("no-transition")},1)}function Ie(){if(h.parallaxBackgroundImage){var e,n,o=S.wrapper.querySelectorAll(u),i=S.wrapper.querySelectorAll(d),s=S.background.style.backgroundSize.split(" ");1===s.length?e=n=parseInt(s[0],10):(e=parseInt(s[0],10),n=parseInt(s[1],10));var a,c,l=S.background.offsetWidth,p=o.length;a="number"==typeof h.parallaxBackgroundHorizontal?h.parallaxBackgroundHorizontal:p>1?(e-l)/(p-1):0,c=a*t*-1;var f,v,m=S.background.offsetHeight,g=i.length;f="number"==typeof h.parallaxBackgroundVertical?h.parallaxBackgroundVertical:(n-m)/(g-1),v=g>0?f*r:0,S.background.style.backgroundPosition=c+"px "+-v+"px"}}function De(e,t){t=t||{},e.style.display=h.display,z(e.querySelectorAll("img[data-src], video[data-src], audio[data-src]")).forEach(function(e){e.setAttribute("src",e.getAttribute("data-src")),e.setAttribute("data-lazy-loaded",""),e.removeAttribute("data-src")}),z(e.querySelectorAll("video, audio")).forEach(function(e){var t=0;z(e.querySelectorAll("source[data-src]")).forEach(function(e){e.setAttribute("src",e.getAttribute("data-src")),e.removeAttribute("data-src"),e.setAttribute("data-lazy-loaded",""),t+=1}),t>0&&e.load()});var r=Xe(e),n=Ke(r.h,r.v);if(n&&(n.style.display="block",!1===n.hasAttribute("data-loaded"))){n.setAttribute("data-loaded","true");var o=e.getAttribute("data-background-image"),i=e.getAttribute("data-background-video"),a=e.hasAttribute("data-background-video-loop"),c=e.hasAttribute("data-background-video-muted"),l=e.getAttribute("data-background-iframe");if(o)n.style.backgroundImage="url("+o+")";else if(i&&!We()){var u=document.createElement("video");a&&u.setAttribute("loop",""),c&&(u.muted=!0),s&&(u.muted=!0,u.autoplay=!0,u.setAttribute("playsinline","")),i.split(",").forEach(function(e){u.innerHTML+='<source src="'+e+'">'}),n.appendChild(u)}else if(l&&!0!==t.excludeIframes){var d=document.createElement("iframe");d.setAttribute("allowfullscreen",""),d.setAttribute("mozallowfullscreen",""),d.setAttribute("webkitallowfullscreen",""),/autoplay=(1|true|yes)/gi.test(l)?d.setAttribute("data-src",l):d.setAttribute("src",l),d.style.width="100%",d.style.height="100%",d.style.maxHeight="100%",d.style.maxWidth="100%",n.appendChild(d)}}}function Re(e){e.style.display="none";var t=Xe(e),r=Ke(t.h,t.v);r&&(r.style.display="none"),z(e.querySelectorAll("video[data-lazy-loaded][src], audio[data-lazy-loaded][src]")).forEach(function(e){e.setAttribute("data-src",e.getAttribute("src")),e.removeAttribute("src")}),z(e.querySelectorAll("video[data-lazy-loaded] source[src], audio source[src]")).forEach(function(e){e.setAttribute("data-src",e.getAttribute("src")),e.removeAttribute("src")})}function Me(){var e=S.wrapper.querySelectorAll(u),n=S.wrapper.querySelectorAll(d),o={left:t>0||h.loop,right:t<e.length-1||h.loop,up:r>0,down:r<n.length-1};if(h.rtl){var i=o.left;o.left=o.right,o.right=i}return o}function Pe(){if(o&&h.fragments){var e=o.querySelectorAll(".fragment"),t=o.querySelectorAll(".fragment:not(.visible)");return{prev:e.length-t.length>0,next:!!t.length}}return{prev:!1,next:!1}}function Ue(e){e&&!We()&&(z(e.querySelectorAll('img[src$=".gif"]')).forEach(function(e){e.setAttribute("src",e.getAttribute("src"))}),z(e.querySelectorAll("video, audio")).forEach(function(e){if(!Z(e,".fragment")||Z(e,".fragment.visible")){var t=h.autoPlayMedia;"boolean"!=typeof t&&(t=e.hasAttribute("data-autoplay")||!!Z(e,".slide-background")),t&&"function"==typeof e.play&&(e.readyState>1?He({target:e}):(e.removeEventListener("loadeddata",He),e.addEventListener("loadeddata",He)))}}),z(e.querySelectorAll("iframe[src]")).forEach(function(e){Z(e,".fragment")&&!Z(e,".fragment.visible")||Be({target:e})}),z(e.querySelectorAll("iframe[data-src]")).forEach(function(e){Z(e,".fragment")&&!Z(e,".fragment.visible")||e.getAttribute("src")!==e.getAttribute("data-src")&&(e.removeEventListener("load",Be),e.addEventListener("load",Be),e.setAttribute("src",e.getAttribute("data-src")))}))}function He(e){var t=!!Z(e.target,"html"),r=!!Z(e.target,".present");t&&r&&(e.target.currentTime=0,e.target.play()),e.target.removeEventListener("loadeddata",He)}function Be(e){var t=e.target;if(t&&t.contentWindow){var r=!!Z(e.target,"html"),n=!!Z(e.target,".present");if(r&&n){var o=h.autoPlayMedia;"boolean"!=typeof o&&(o=t.hasAttribute("data-autoplay")||!!Z(t,".slide-background")),/youtube\.com\/embed\//.test(t.getAttribute("src"))&&o?t.contentWindow.postMessage('{"event":"command","func":"playVideo","args":""}',"*"):/player\.vimeo\.com\//.test(t.getAttribute("src"))&&o?t.contentWindow.postMessage('{"method":"play"}',"*"):t.contentWindow.postMessage("slide:start","*")}}}function Ve(e,t){t=F({unloadIframes:!0},t||{}),e&&e.parentNode&&(z(e.querySelectorAll("video, audio")).forEach(function(e){e.hasAttribute("data-ignore")||"function"!=typeof e.pause||(e.setAttribute("data-paused-by-reveal",""),e.pause())}),z(e.querySelectorAll("iframe")).forEach(function(e){e.contentWindow&&e.contentWindow.postMessage("slide:stop","*"),e.removeEventListener("load",Be)}),z(e.querySelectorAll('iframe[src*="youtube.com/embed/"]')).forEach(function(e){!e.hasAttribute("data-ignore")&&e.contentWindow&&"function"==typeof e.contentWindow.postMessage&&e.contentWindow.postMessage('{"event":"command","func":"pauseVideo","args":""}',"*")}),z(e.querySelectorAll('iframe[src*="player.vimeo.com/"]')).forEach(function(e){!e.hasAttribute("data-ignore")&&e.contentWindow&&"function"==typeof e.contentWindow.postMessage&&e.contentWindow.postMessage('{"method":"pause"}',"*")}),!0===t.unloadIframes&&z(e.querySelectorAll("iframe[data-src]")).forEach(function(e){e.setAttribute("src","about:blank"),e.removeAttribute("src")}))}function Fe(){var e=z(S.wrapper.querySelectorAll(u)),t=0;e:for(var r=0;r<e.length;r++){for(var n=e[r],o=z(n.querySelectorAll("section")),i=0;i<o.length;i++){if(o[i].classList.contains("present"))break e;t++}if(n.classList.contains("present"))break;!1===n.classList.contains("stack")&&t++}return t}function ze(){var e=Ze(),t=Fe();if(o){var r=o.querySelectorAll(".fragment");if(r.length>0){var n=o.querySelectorAll(".fragment.visible");t+=n.length/r.length*.9}}return t/(e-1)}function We(){return!!window.location.search.match(/receiver/gi)}function Ge(){var n=window.location.hash,o=n.slice(2).split("/"),i=n.replace(/#|\//gi,"");if(isNaN(parseInt(o[0],10))&&i.length){var s;if(/^[a-zA-Z][\w:.-]*$/.test(i)&&(s=document.getElementById(i)),s){var a=e.getIndices(s);Ae(a.h,a.v)}else Ae(t||0,r||0)}else{var c=parseInt(o[0],10)||0,l=parseInt(o[1],10)||0;c===t&&l===r||Ae(c,l)}}function Je(e){if(h.history)if(clearTimeout(N),"number"==typeof e)N=setTimeout(Je,e);else if(o){var n="/",i=o.getAttribute("id");i&&(i=i.replace(/[^a-zA-Z0-9\-\_\:\.]/g,"")),"string"==typeof i&&i.length?n="/"+i:((t>0||r>0)&&(n+=t),r>0&&(n+="/"+r)),window.location.hash=n}}function Xe(e){var n,i=t,s=r;if(e){var a=ge(e),c=a?e.parentNode:e,l=z(S.wrapper.querySelectorAll(u));i=Math.max(l.indexOf(c),0),s=void 0,a&&(s=Math.max(z(e.parentNode.querySelectorAll("section")).indexOf(e),0))}if(!e&&o){var d=o.querySelectorAll(".fragment").length>0;if(d){var p=o.querySelector(".current-fragment");n=p&&p.hasAttribute("data-fragment-index")?parseInt(p.getAttribute("data-fragment-index"),10):o.querySelectorAll(".fragment.visible").length-1}}return{h:i,v:s,f:n}}function Ye(){return z(S.wrapper.querySelectorAll(l+":not(.stack)"))}function Ze(){return Ye().length}function $e(e,t){var r=S.wrapper.querySelectorAll(u)[e],n=r&&r.querySelectorAll("section");return n&&n.length&&"number"==typeof t?n?n[t]:void 0:r}function Ke(e,t){var r=$e(e,t);if(r)return r.slideBackgroundElement}function Qe(e){if((e=e||o).hasAttribute("data-notes"))return e.getAttribute("data-notes");var t=e.querySelector("aside.notes");return t?t.innerHTML:null}function et(){var e=Xe();return{indexh:e.h,indexv:e.v,indexf:e.f,paused:xe(),overview:me()}}function tt(e){var t=[],r=[],n=[];(e=z(e)).forEach(function(e,n){if(e.hasAttribute("data-fragment-index")){var o=parseInt(e.getAttribute("data-fragment-index"),10);t[o]||(t[o]=[]),t[o].push(e)}else r.push([e])});var o=0;return(t=t.concat(r)).forEach(function(e){e.forEach(function(e){n.push(e),e.setAttribute("data-fragment-index",o)}),o++}),n}function rt(e,t){if(o&&h.fragments){var r=tt(o.querySelectorAll(".fragment"));if(r.length){if("number"!=typeof e){var n=tt(o.querySelectorAll(".fragment.visible")).pop();e=n?parseInt(n.getAttribute("data-fragment-index")||0,10):-1}"number"==typeof t&&(e+=t);var i=[],s=[];return z(r).forEach(function(t,r){t.hasAttribute("data-fragment-index")&&(r=parseInt(t.getAttribute("data-fragment-index"),10)),r<=e?(t.classList.contains("visible")||i.push(t),t.classList.add("visible"),t.classList.remove("current-fragment"),S.statusDiv.textContent=R(t),r===e&&(t.classList.add("current-fragment"),Ue(t))):(t.classList.contains("visible")&&s.push(t),t.classList.remove("visible"),t.classList.remove("current-fragment"))}),s.length&&ee("fragmenthidden",{fragment:s[0],fragments:s}),i.length&&ee("fragmentshown",{fragment:i[0],fragments:i}),Oe(),Te(),!(!i.length&&!s.length)}}return!1}function nt(){return rt(null,1)}function ot(){return rt(null,-1)}function it(){if(st(),o&&!1!==h.autoSlide){var t=o.querySelector(".current-fragment");t||(t=o.querySelector(".fragment"));var r=t?t.getAttribute("data-autoslide"):null,n=o.parentNode?o.parentNode.getAttribute("data-autoslide"):null,i=o.getAttribute("data-autoslide");C=r?parseInt(r,10):i?parseInt(i,10):n?parseInt(n,10):h.autoSlide,0===o.querySelectorAll(".fragment").length&&z(o.querySelectorAll("video, audio")).forEach(function(e){e.hasAttribute("data-autoplay")&&C&&1e3*e.duration/e.playbackRate>C&&(C=1e3*e.duration/e.playbackRate+1e3)}),!C||j||xe()||me()||e.isLastSlide()&&!Pe().next&&!0!==h.loop||(_=setTimeout(function(){"function"==typeof h.autoSlideMethod?h.autoSlideMethod():ht(),it()},C),O=Date.now()),c&&c.setPlaying(-1!==_)}}function st(){clearTimeout(_),_=-1}function at(){C&&!j&&(j=!0,ee("autoslidepaused"),clearTimeout(_),c&&c.setPlaying(!1))}function ct(){C&&j&&(j=!1,ee("autoslideresumed"),it())}function lt(){h.rtl?(me()||!1===nt())&&Me().left&&Ae(t+1):(me()||!1===ot())&&Me().left&&Ae(t-1)}function ut(){w=!0,h.rtl?(me()||!1===ot())&&Me().right&&Ae(t-1):(me()||!1===nt())&&Me().right&&Ae(t+1)}function dt(){(me()||!1===ot())&&Me().up&&Ae(t,r-1)}function pt(){x=!0,(me()||!1===nt())&&Me().down&&Ae(t,r+1)}function ft(){var e;if(!1===ot())if(Me().up)dt();else if(e=h.rtl?z(S.wrapper.querySelectorAll(u+".future")).pop():z(S.wrapper.querySelectorAll(u+".past")).pop()){var r=e.querySelectorAll("section").length-1||void 0,n=t-1;Ae(n,r)}}function ht(){w=!0,x=!0,!1===nt()&&(Me().down?pt():h.rtl?lt():ut())}function vt(e){for(;e&&"function"==typeof e.hasAttribute;){if(e.hasAttribute("data-prevent-swipe"))return!0;e=e.parentNode}return!1}function mt(e){h.autoSlideStoppable&&at()}function gt(e){e.shiftKey&&63===e.charCode&&ne()}function bt(t){if("function"==typeof h.keyboardCondition&&!1===h.keyboardCondition())return!0;var r=j;mt();var n=document.activeElement&&"inherit"!==document.activeElement.contentEditable,o=document.activeElement&&document.activeElement.tagName&&/input|textarea/i.test(document.activeElement.tagName),i=document.activeElement&&document.activeElement.className&&/speaker-notes/i.test(document.activeElement.className);if(!(n||o||i||t.shiftKey&&32!==t.keyCode||t.altKey||t.ctrlKey||t.metaKey)){var s,a=[66,86,190,191];if("object"==typeof h.keyboard)for(s in h.keyboard)"togglePause"===h.keyboard[s]&&a.push(parseInt(s,10));if(xe()&&-1===a.indexOf(t.keyCode))return!1;var c,l,u=!1;if("object"==typeof h.keyboard)for(s in h.keyboard)if(parseInt(s,10)===t.keyCode){var d=h.keyboard[s];"function"==typeof d?d.apply(null,[t]):"string"==typeof d&&"function"==typeof e[d]&&e[d].call(),u=!0}if(!1===u)switch(u=!0,t.keyCode){case 80:case 33:ft();break;case 78:case 34:ht();break;case 72:case 37:lt();break;case 76:case 39:ut();break;case 75:case 38:dt();break;case 74:case 40:pt();break;case 36:Ae(0);break;case 35:Ae(Number.MAX_VALUE);break;case 32:me()?he():t.shiftKey?ft():ht();break;case 13:me()?he():u=!1;break;case 58:case 59:case 66:case 86:case 190:case 191:we();break;case 70:c=document.documentElement,(l=c.requestFullscreen||c.webkitRequestFullscreen||c.webkitRequestFullScreen||c.mozRequestFullScreen||c.msRequestFullscreen)&&l.apply(c);break;case 65:h.autoSlideStoppable&&Ee(r);break;default:u=!1}u?t.preventDefault&&t.preventDefault():27!==t.keyCode&&79!==t.keyCode||!L.transforms3d||(S.overlay?ie():ve(),t.preventDefault&&t.preventDefault()),it()}}function yt(e){if(vt(e.target))return!0;I.startX=e.touches[0].clientX,I.startY=e.touches[0].clientY,I.startCount=e.touches.length,2===e.touches.length&&h.overview&&(I.startSpan=G({x:e.touches[1].clientX,y:e.touches[1].clientY},{x:I.startX,y:I.startY}))}function wt(e){if(vt(e.target))return!0;if(I.captured)f.match(/android/gi)&&e.preventDefault();else{mt();var t=e.touches[0].clientX,r=e.touches[0].clientY;if(2===e.touches.length&&2===I.startCount&&h.overview){var n=G({x:e.touches[1].clientX,y:e.touches[1].clientY},{x:I.startX,y:I.startY});Math.abs(I.startSpan-n)>I.threshold&&(I.captured=!0,n<I.startSpan?de():he()),e.preventDefault()}else if(1===e.touches.length&&2!==I.startCount){var i=t-I.startX,s=r-I.startY;i>I.threshold&&Math.abs(i)>Math.abs(s)?(I.captured=!0,lt()):i<-I.threshold&&Math.abs(i)>Math.abs(s)?(I.captured=!0,ut()):s>I.threshold?(I.captured=!0,dt()):s<-I.threshold&&(I.captured=!0,pt()),h.embedded?(I.captured||ge(o))&&e.preventDefault():e.preventDefault()}}}function xt(e){I.captured=!1}function Et(e){e.pointerType!==e.MSPOINTER_TYPE_TOUCH&&"touch"!==e.pointerType||(e.touches=[{clientX:e.clientX,clientY:e.clientY}],yt(e))}function At(e){e.pointerType!==e.MSPOINTER_TYPE_TOUCH&&"touch"!==e.pointerType||(e.touches=[{clientX:e.clientX,clientY:e.clientY}],wt(e))}function kt(e){e.pointerType!==e.MSPOINTER_TYPE_TOUCH&&"touch"!==e.pointerType||(e.touches=[{clientX:e.clientX,clientY:e.clientY}],xt())}function St(e){if(Date.now()-q>600){q=Date.now();var t=e.detail||-e.wheelDelta;t>0?ht():t<0&&ft()}}function Lt(e){mt(),e.preventDefault();var t=z(S.wrapper.querySelectorAll(u)).length,r=Math.floor(e.clientX/S.wrapper.offsetWidth*t);h.rtl&&(r=t-r),Ae(r)}function qt(e){e.preventDefault(),mt(),lt()}function Nt(e){e.preventDefault(),mt(),ut()}function Tt(e){e.preventDefault(),mt(),dt()}function Ct(e){e.preventDefault(),mt(),pt()}function _t(e){e.preventDefault(),mt(),ft()}function Ot(e){e.preventDefault(),mt(),ht()}function jt(e){Ge()}function It(e){se()}function Dt(e){var t=document.webkitHidden||document.msHidden||document.hidden;!1===t&&document.activeElement!==document.body&&("function"==typeof document.activeElement.blur&&document.activeElement.blur(),document.body.focus())}function Rt(e){if(T&&me()){e.preventDefault();for(var t=e.target;t&&!t.nodeName.match(/section/gi);)t=t.parentNode;if(t&&!t.classList.contains("disabled")&&(he(),t.nodeName.match(/section/gi))){var r=parseInt(t.getAttribute("data-index-h"),10),n=parseInt(t.getAttribute("data-index-v"),10);Ae(r,n)}}}function Mt(e){if(e.currentTarget&&e.currentTarget.hasAttribute("href")){var t=e.currentTarget.getAttribute("href");t&&(function(e){ie(),S.overlay=document.createElement("div"),S.overlay.classList.add("overlay"),S.overlay.classList.add("overlay-preview"),S.wrapper.appendChild(S.overlay),S.overlay.innerHTML=["<header>",'<a class="close" href="#"><span class="icon"></span></a>','<a class="external" href="'+e+'" target="_blank"><span class="icon"></span></a>',"</header>",'<div class="spinner"></div>','<div class="viewport">','<iframe src="'+e+'"></iframe>','<small class="viewport-inner">','<span class="x-frame-error">Unable to load iframe. This is likely due to the site\'s policy (x-frame-options).</span>',"</small>","</div>"].join(""),S.overlay.querySelector("iframe").addEventListener("load",function(e){S.overlay.classList.add("loaded")},!1),S.overlay.querySelector(".close").addEventListener("click",function(e){ie(),e.preventDefault()},!1),S.overlay.querySelector(".external").addEventListener("click",function(e){ie()},!1),setTimeout(function(){S.overlay.classList.add("visible")},1)}(t),e.preventDefault())}}function Pt(t){e.isLastSlide()&&!1===h.loop?(Ae(0,0),ct()):j?ct():at()}function Ut(e,t){this.diameter=100,this.diameter2=this.diameter/2,this.thickness=6,this.playing=!1,this.progress=0,this.progressOffset=1,this.container=e,this.progressCheck=t,this.canvas=document.createElement("canvas"),this.canvas.className="playback",this.canvas.width=this.diameter,this.canvas.height=this.diameter,this.canvas.style.width=this.diameter2+"px",this.canvas.style.height=this.diameter2+"px",this.context=this.canvas.getContext("2d"),this.container.appendChild(this.canvas),this.render()}return Ut.prototype.setPlaying=function(e){var t=this.playing;this.playing=e,!t&&this.playing?this.animate():this.render()},Ut.prototype.animate=function(){var e=this.progress;this.progress=this.progressCheck(),e>.8&&this.progress<.2&&(this.progressOffset=this.progress),this.render(),this.playing&&L.requestAnimationFrameMethod.call(window,this.animate.bind(this))},Ut.prototype.render=function(){var e=this.playing?this.progress:0,t=this.diameter2-this.thickness,r=this.diameter2,n=this.diameter2;this.progressOffset+=.1*(1-this.progressOffset);var o=-Math.PI/2+e*(2*Math.PI),i=-Math.PI/2+this.progressOffset*(2*Math.PI);this.context.save(),this.context.clearRect(0,0,this.diameter,this.diameter),this.context.beginPath(),this.context.arc(r,n,t+4,0,2*Math.PI,!1),this.context.fillStyle="rgba( 0, 0, 0, 0.4 )",this.context.fill(),this.context.beginPath(),this.context.arc(r,n,t,0,2*Math.PI,!1),this.context.lineWidth=this.thickness,this.context.strokeStyle="rgba( 255, 255, 255, 0.2 )",this.context.stroke(),this.playing&&(this.context.beginPath(),this.context.arc(r,n,t,i,o,!1),this.context.lineWidth=this.thickness,this.context.strokeStyle="#fff",this.context.stroke()),this.context.translate(r-14,n-14),this.playing?(this.context.fillStyle="#fff",this.context.fillRect(0,0,10,28),this.context.fillRect(18,0,10,28)):(this.context.beginPath(),this.context.translate(4,0),this.context.moveTo(0,0),this.context.lineTo(24,14),this.context.lineTo(0,28),this.context.fillStyle="#fff",this.context.fill()),this.context.restore()},Ut.prototype.on=function(e,t){this.canvas.addEventListener(e,t,!1)},Ut.prototype.off=function(e,t){this.canvas.removeEventListener(e,t,!1)},Ut.prototype.destroy=function(){this.playing=!1,this.canvas.parentNode&&this.container.removeChild(this.canvas)},e={VERSION:"3.6.0",initialize:function(n){if(!0!==v)if(v=!0,function(){s=/(iphone|ipod|ipad|android)/gi.test(f),a=/chrome/i.test(f)&&!/edge/i.test(f);var e=document.createElement("div");L.transforms3d="WebkitPerspective"in e.style||"MozPerspective"in e.style||"msPerspective"in e.style||"OPerspective"in e.style||"perspective"in e.style,L.transforms2d="WebkitTransform"in e.style||"MozTransform"in e.style||"msTransform"in e.style||"OTransform"in e.style||"transform"in e.style,L.requestAnimationFrameMethod=window.requestAnimationFrame||window.webkitRequestAnimationFrame||window.mozRequestAnimationFrame,L.requestAnimationFrame="function"==typeof L.requestAnimationFrameMethod,L.canvas=!!document.createElement("canvas").getContext,L.overviewTransitions=!/Version\/[\d\.]+.*Safari/.test(f),L.zoom="zoom"in e.style&&!s&&(a||/Version\/[\d\.]+.*Safari/.test(f))}(),L.transforms2d||L.transforms3d){S.wrapper=document.querySelector(".reveal"),S.slides=document.querySelector(".reveal .slides"),window.addEventListener("load",se,!1);var i=e.getQueryHash();void 0!==i.dependencies&&delete i.dependencies,F(h,n),F(h,i),h.hideAddressBar&&s&&(window.addEventListener("load",Q,!1),window.addEventListener("orientationchange",Q,!1)),function(){var n=[],i=[],a=0;function c(){var n;i.length&&head.js.apply(null,i),m=!0,S.slides.classList.add("no-transition"),s?S.wrapper.classList.add("no-hover"):S.wrapper.classList.remove("no-hover"),/iphone/gi.test(f)?S.wrapper.classList.add("ua-iphone"):S.wrapper.classList.remove("ua-iphone"),S.background=P(S.wrapper,"div","backgrounds",null),S.progress=P(S.wrapper,"div","progress","<span></span>"),S.progressbar=S.progress.querySelector("span"),S.controls=P(S.wrapper,"aside","controls",'<button class="navigate-left" aria-label="previous slide"><div class="controls-arrow"></div></button><button class="navigate-right" aria-label="next slide"><div class="controls-arrow"></div></button><button class="navigate-up" aria-label="above slide"><div class="controls-arrow"></div></button><button class="navigate-down" aria-label="below slide"><div class="controls-arrow"></div></button>'),S.slideNumber=P(S.wrapper,"div","slide-number",""),S.speakerNotes=P(S.wrapper,"div","speaker-notes",null),S.speakerNotes.setAttribute("data-prevent-swipe",""),S.speakerNotes.setAttribute("tabindex","0"),P(S.wrapper,"div","pause-overlay",null),S.wrapper.setAttribute("role","application"),S.controlsLeft=z(document.querySelectorAll(".navigate-left")),S.controlsRight=z(document.querySelectorAll(".navigate-right")),S.controlsUp=z(document.querySelectorAll(".navigate-up")),S.controlsDown=z(document.querySelectorAll(".navigate-down")),S.controlsPrev=z(document.querySelectorAll(".navigate-prev")),S.controlsNext=z(document.querySelectorAll(".navigate-next")),S.controlsRightArrow=S.controls.querySelector(".navigate-right"),S.controlsDownArrow=S.controls.querySelector(".navigate-down"),S.statusDiv=((n=document.getElementById("aria-status-div"))||((n=document.createElement("div")).style.position="absolute",n.style.height="1px",n.style.width="1px",n.style.overflow="hidden",n.style.clip="rect( 1px, 1px, 1px, 1px )",n.setAttribute("id","aria-status-div"),n.setAttribute("aria-live","polite"),n.setAttribute("aria-atomic","true"),S.wrapper.appendChild(n)),n),h.postMessage&&window.addEventListener("message",function(t){var r=t.data;"string"==typeof r&&"{"===r.charAt(0)&&"}"===r.charAt(r.length-1)&&(r=JSON.parse(r)).method&&"function"==typeof e[r.method]&&e[r.method].apply(e,r.args)},!1),setInterval(function(){0===S.wrapper.scrollTop&&0===S.wrapper.scrollLeft||(S.wrapper.scrollTop=0,S.wrapper.scrollLeft=0)},1e3),z(S.wrapper.querySelectorAll(u)).forEach(function(e){var t=z(e.querySelectorAll("section"));t.forEach(function(e,t){t>0&&(e.classList.remove("present"),e.classList.remove("past"),e.classList.add("future"),e.setAttribute("aria-hidden","true"))})}),H(),Ge(),je(!0),setTimeout(function(){S.slides.classList.remove("no-transition"),S.wrapper.classList.add("ready"),ee("ready",{indexh:t,indexv:r,currentSlide:o})},1),K()&&(V(),"complete"===document.readyState?M():window.addEventListener("load",M))}function l(e){head.ready(e.src.match(/([\w\d_\-]*)\.?js$|[^\\\/]*$/i)[0],function(){"function"==typeof e.callback&&e.callback.apply(this),0==--a&&c()})}for(var d=0,p=h.dependencies.length;d<p;d++){var v=h.dependencies[d];v.condition&&!v.condition()||(v.async?i.push(v.src):n.push(v.src),l(v))}n.length?(a=n.length,head.js.apply(null,n)):c()}()}else{document.body.setAttribute("class","no-transforms");for(var c=z(document.getElementsByTagName("img")),l=z(document.getElementsByTagName("iframe")),d=c.concat(l),p=0,g=d.length;p<g;p++){var b=d[p];b.getAttribute("data-src")&&(b.setAttribute("src",b.getAttribute("data-src")),b.removeAttribute("data-src"))}}},configure:H,sync:ke,slide:Ae,left:lt,right:ut,up:dt,down:pt,prev:ft,next:ht,navigateFragment:rt,prevFragment:ot,nextFragment:nt,navigateTo:Ae,navigateLeft:lt,navigateRight:ut,navigateUp:dt,navigateDown:pt,navigatePrev:ft,navigateNext:ht,layout:se,shuffle:Se,availableRoutes:Me,availableFragments:Pe,toggleHelp:ne,toggleOverview:ve,togglePause:we,toggleAutoSlide:Ee,isOverview:me,isPaused:xe,isAutoSliding:function(){return!(!C||j)},isSpeakerNotes:We,loadSlide:De,unloadSlide:Re,addEventListeners:B,removeEventListeners:V,getState:et,setState:function(e){if("object"==typeof e){Ae(W(e.indexh),W(e.indexv),W(e.indexf));var t=W(e.paused),r=W(e.overview);"boolean"==typeof t&&t!==xe()&&we(t),"boolean"==typeof r&&r!==me()&&ve(r)}},getSlidePastCount:Fe,getProgress:ze,getIndices:Xe,getSlides:Ye,getTotalSlides:Ze,getSlide:$e,getSlideBackground:Ke,getSlideNotes:Qe,getPreviousSlide:function(){return n},getCurrentSlide:function(){return o},getScale:function(){return A},getConfig:function(){return h},getQueryHash:function(){var e={};for(var t in location.search.replace(/[A-Z0-9]+?=([\w\.%-]*)/gi,function(t){e[t.split("=").shift()]=t.split("=").pop()}),e){var r=e[t];e[t]=W(unescape(r))}return e},isFirstSlide:function(){return 0===t&&0===r},isLastSlide:function(){return!(!o||o.nextElementSibling||ge(o)&&o.parentNode.nextElementSibling)},isReady:function(){return m},addEventListener:function(e,t,r){"addEventListener"in window&&(S.wrapper||document.querySelector(".reveal")).addEventListener(e,t,r)},removeEventListener:function(e,t,r){"addEventListener"in window&&(S.wrapper||document.querySelector(".reveal")).removeEventListener(e,t,r)},triggerKey:function(e){bt({keyCode:e})},registerKeyboardShortcut:function(e,t){D[e]=t}}}(),o.Reveal}.call(t,r,t,e))||(e.exports=n)},function(e,t){
/*! head.core - v1.0.2 */
!function(e,t){"use strict";var r=e.document,n=e.navigator,o=e.location,i=r.documentElement,s=[],a={screens:[240,320,480,640,768,800,1024,1280,1440,1680,1920],screensCss:{gt:!0,gte:!1,lt:!0,lte:!1,eq:!1},browsers:[{ie:{min:6,max:11}}],browserCss:{gt:!0,gte:!1,lt:!0,lte:!1,eq:!0},html5:!0,page:"-page",section:"-section",head:"head"};if(e.head_conf)for(var c in e.head_conf)void 0!==e.head_conf[c]&&(a[c]=e.head_conf[c]);function l(e){s[s.length]=e}function u(e){var t=new RegExp(" ?\\b"+e+"\\b");i.className=i.className.replace(t,"")}function d(e,t){for(var r=0,n=e.length;r<n;r++)t.call(e,e[r],r)}var p=e[a.head]=function(){p.ready.apply(null,arguments)};p.feature=function(e,t,r){return e?("[object Function]"===Object.prototype.toString.call(t)&&(t=t.call()),l((t?"":"no-")+e),p[e]=!!t,r||(u("no-"+e),u(e),p.feature()),p):(i.className+=" "+s.join(" "),s=[],p)},p.feature("js",!0);var f=n.userAgent.toLowerCase(),h=/mobile|android|kindle|silk|midp|phone|(windows .+arm|touch)/.test(f);p.feature("mobile",h,!0),p.feature("desktop",!h,!0);var v=(f=/(chrome|firefox)[ \/]([\w.]+)/.exec(f)||/(iphone|ipad|ipod)(?:.*version)?[ \/]([\w.]+)/.exec(f)||/(android)(?:.*version)?[ \/]([\w.]+)/.exec(f)||/(webkit|opera)(?:.*version)?[ \/]([\w.]+)/.exec(f)||/(msie) ([\w.]+)/.exec(f)||/(trident).+rv:(\w.)+/.exec(f)||[])[1],m=parseFloat(f[2]);switch(v){case"msie":case"trident":v="ie",m=r.documentMode||m;break;case"firefox":v="ff";break;case"ipod":case"ipad":case"iphone":v="ios";break;case"webkit":v="safari"}p.browser={name:v,version:m},p.browser[v]=!0;for(var g=0,b=a.browsers.length;g<b;g++)for(var y in a.browsers[g])if(v===y){l(y);for(var w=a.browsers[g][y].min,x=a.browsers[g][y].max,E=w;E<=x;E++)m>E?(a.browserCss.gt&&l("gt-"+y+E),a.browserCss.gte&&l("gte-"+y+E)):m<E?(a.browserCss.lt&&l("lt-"+y+E),a.browserCss.lte&&l("lte-"+y+E)):m===E&&(a.browserCss.lte&&l("lte-"+y+E),a.browserCss.eq&&l("eq-"+y+E),a.browserCss.gte&&l("gte-"+y+E))}else l("no-"+y);function A(){i.className=i.className.replace(/ (w-|eq-|gt-|gte-|lt-|lte-|portrait|no-portrait|landscape|no-landscape)\d+/g,"");var t=e.innerWidth||i.clientWidth,r=e.outerWidth||e.screen.width;p.screen.innerWidth=t,p.screen.outerWidth=r,l("w-"+t),d(a.screens,function(e){t>e?(a.screensCss.gt&&l("gt-"+e),a.screensCss.gte&&l("gte-"+e)):t<e?(a.screensCss.lt&&l("lt-"+e),a.screensCss.lte&&l("lte-"+e)):t===e&&(a.screensCss.lte&&l("lte-"+e),a.screensCss.eq&&l("e-q"+e),a.screensCss.gte&&l("gte-"+e))});var n=e.innerHeight||i.clientHeight,o=e.outerHeight||e.screen.height;p.screen.innerHeight=n,p.screen.outerHeight=o,p.feature("portrait",n>t),p.feature("landscape",n<t)}l(v),l(v+parseInt(m,10)),a.html5&&"ie"===v&&m<9&&d("abbr|article|aside|audio|canvas|details|figcaption|figure|footer|header|hgroup|main|mark|meter|nav|output|progress|section|summary|time|video".split("|"),function(e){r.createElement(e)}),d(o.pathname.split("/"),function(e,t){if(this.length>2&&void 0!==this[t+1])t&&l(this.slice(t,t+1).join("-").toLowerCase()+a.section);else{var r=e||"index",n=r.indexOf(".");n>0&&(r=r.substring(0,n)),i.id=r.toLowerCase()+a.page,t||l("root"+a.section)}}),p.screen={height:e.screen.height,width:e.screen.width},A();var k=0;function S(){e.clearTimeout(k),k=e.setTimeout(A,50)}e.addEventListener?e.addEventListener("resize",S,!1):e.attachEvent("onresize",S)}(window),
/*! head.css3 - v1.0.0 */
function(e,t){"use strict";var r=e.document.createElement("i"),n=r.style,o=" -o- -moz- -ms- -webkit- -khtml- ".split(" "),i="Webkit Moz O ms Khtml".split(" "),s=e.head_conf&&e.head_conf.head||"head",a=e[s];function c(e){var r=e.charAt(0).toUpperCase()+e.substr(1);return!!function(e){for(var r in e)if(n[e[r]]!==t)return!0;return!1}((e+" "+i.join(r+" ")+r).split(" "))}var l={gradient:function(){var e="background-image:";return n.cssText=(e+o.join("gradient(linear,left top,right bottom,from(#9f9),to(#fff));"+e)+o.join("linear-gradient(left top,#eee,#fff);"+e)).slice(0,-e.length),!!n.backgroundImage},rgba:function(){return n.cssText="background-color:rgba(0,0,0,0.5)",!!n.backgroundColor},opacity:function(){return""===r.style.opacity},textshadow:function(){return""===n.textShadow},multiplebgs:function(){n.cssText="background:url(https://),url(https://),red url(https://)";var e=(n.background||"").match(/url/g);return"[object Array]"===Object.prototype.toString.call(e)&&3===e.length},boxshadow:function(){return c("boxShadow")},borderimage:function(){return c("borderImage")},borderradius:function(){return c("borderRadius")},cssreflections:function(){return c("boxReflect")},csstransforms:function(){return c("transform")},csstransitions:function(){return c("transition")},touch:function(){return"ontouchstart"in e},retina:function(){return e.devicePixelRatio>1},fontface:function(){var e=a.browser.name,t=a.browser.version;switch(e){case"ie":return t>=9;case"chrome":return t>=13;case"ff":return t>=6;case"ios":return t>=5;case"android":return!1;case"webkit":return t>=5.1;case"opera":return t>=10;default:return!1}}};for(var u in l)l[u]&&a.feature(u,l[u].call(),!0);a.feature()}(window),
/*! head.load - v1.0.3 */
function(e,t){"use strict";var r,n=e.document,o=[],i={},s={},a="async"in n.createElement("script")||"MozAppearance"in n.documentElement.style||e.opera,c=e.head_conf&&e.head_conf.head||"head",l=e[c]=e[c]||function(){l.ready.apply(null,arguments)},u=1,d=2,p=3,f=4;function h(){}function v(e,t){if(e){"object"==typeof e&&(e=[].slice.call(e));for(var r=0,n=e.length;r<n;r++)t.call(e,e[r],r)}}function m(e,r){var n=Object.prototype.toString.call(r).slice(8,-1);return r!==t&&null!==r&&n===e}function g(e){return m("Function",e)}function b(e){return m("Array",e)}function y(e){(e=e||h)._done||(e(),e._done=1)}function w(e){var t,r,n,o,i={};if("object"==typeof e)for(var a in e)e[a]&&(i={name:a,url:e[a]});else i={name:(t=e,r=t.split("/"),n=r[r.length-1],o=n.indexOf("?"),-1!==o?n.substring(0,o):n),url:e};var c=s[i.name];return c&&c.url===i.url?c:(s[i.name]=i,i)}function x(e){for(var t in e=e||s)if(e.hasOwnProperty(t)&&e[t].state!==f)return!1;return!0}function E(e,r){e.state===t&&(e.state=u,e.onpreload=[],k({url:e.url,type:"cache"},function(){!function(e){e.state=d,v(e.onpreload,function(e){e.call()})}(e)}))}function A(e,t){t=t||h,e.state!==f?e.state!==p?e.state!==u?(e.state=p,k(e,function(){e.state=f,t(),v(i[e.name],function(e){y(e)}),r&&x()&&v(i.ALL,function(e){y(e)})})):e.onpreload.push(function(){A(e,t)}):l.ready(e.name,t):t()}function k(t,r){function o(t){t=t||e.event,s.onload=s.onreadystatechange=s.onerror=null,r()}function i(o){("load"===(o=o||e.event).type||/loaded|complete/.test(s.readyState)&&(!n.documentMode||n.documentMode<9))&&(e.clearTimeout(t.errorTimeout),e.clearTimeout(t.cssTimeout),s.onload=s.onreadystatechange=s.onerror=null,r())}var s,a,c;r=r||h,"css"===(a=t.url,(c=(a=a||"").split("?")[0].split("."))[c.length-1].toLowerCase())?((s=n.createElement("link")).type="text/"+(t.type||"css"),s.rel="stylesheet",s.href=t.url,t.cssRetries=0,t.cssTimeout=e.setTimeout(function r(){if(t.state!==f&&t.cssRetries<=20){for(var o=0,a=n.styleSheets.length;o<a;o++)if(n.styleSheets[o].href===s.href)return void i({type:"load"});t.cssRetries++,t.cssTimeout=e.setTimeout(r,250)}},500)):((s=n.createElement("script")).type="text/"+(t.type||"javascript"),s.src=t.url),s.onload=s.onreadystatechange=i,s.onerror=o,s.async=!1,s.defer=!1,t.errorTimeout=e.setTimeout(function(){o({type:"timeout"})},7e3);var l=n.head||n.getElementsByTagName("head")[0];l.insertBefore(s,l.lastChild)}function S(){if(!n.body)return e.clearTimeout(l.readyTimeout),void(l.readyTimeout=e.setTimeout(S,50));r||(r=!0,function(){for(var e=n.getElementsByTagName("script"),t=0,r=e.length;t<r;t++){var o=e[t].getAttribute("data-headjs-load");if(o)return void l.load(o)}}(),v(o,function(e){y(e)}))}function L(){n.addEventListener?(n.removeEventListener("DOMContentLoaded",L,!1),S()):"complete"===n.readyState&&(n.detachEvent("onreadystatechange",L),S())}if("complete"===n.readyState)S();else if(n.addEventListener)n.addEventListener("DOMContentLoaded",L,!1),e.addEventListener("load",S,!1);else{n.attachEvent("onreadystatechange",L),e.attachEvent("onload",S);var q=!1;try{q=!e.frameElement&&n.documentElement}catch(e){}q&&q.doScroll&&function t(){if(!r){try{q.doScroll("left")}catch(r){return e.clearTimeout(l.readyTimeout),void(l.readyTimeout=e.setTimeout(t,50))}S()}}()}l.load=l.js=a?function(){var e=arguments,t=e[e.length-1],r={};return g(t)||(t=null),b(e[0])?(e[0].push(t),l.load.apply(null,e[0]),l):(v(e,function(e,n){e!==t&&(e=w(e),r[e.name]=e)}),v(e,function(e,n){e!==t&&A(e=w(e),function(){x(r)&&y(t)})}),l)}:function(){var e=arguments,t=e[e.length-1],r=[].slice.call(e,1),n=r[0];return g(t)||(t=null),b(e[0])?(e[0].push(t),l.load.apply(null,e[0]),l):(n?(v(r,function(e){!g(e)&&e&&E(w(e))}),A(w(e[0]),g(n)?n:function(){l.load.apply(null,r)})):A(w(e[0])),l)},l.test=function(e,t,r,n){var o="object"==typeof e?e:{test:e,success:!!t&&(b(t)?t:[t]),failure:!!r&&(b(r)?r:[r]),callback:n||h},i=!!o.test;return i&&o.success?(o.success.push(o.callback),l.load.apply(null,o.success)):!i&&o.failure?(o.failure.push(o.callback),l.load.apply(null,o.failure)):n(),l},l.ready=function(e,t){if(e===n)return r?y(t):o.push(t),l;if(g(e)&&(t=e,e="ALL"),b(e)){var a={};return v(e,function(e){a[e]=s[e],l.ready(e,function(){x(a)&&y(t)})}),l}if("string"!=typeof e||!g(t))return l;var c=s[e];if(c&&c.state===f||"ALL"===e&&x()&&r)return y(t),l;var u=i[e];return u?u.push(t):u=i[e]=[t],l},l.ready(n,function(){x()&&v(i.ALL,function(e){y(e)}),l.feature&&l.feature("domloaded",!0)})}(window)},function(e,t,r){"use strict";r.r(t);r(3);var n=r(2);r.n(n).a.initialize({dependencies:[{src:"highlight.js",async:!0,callback:function(){hljs.initHighlightingOnLoad()}}]})},function(e,t){function r(){this._events=this._events||{},this._maxListeners=this._maxListeners||void 0}function n(e){return"function"==typeof e}function o(e){return"object"==typeof e&&null!==e}function i(e){return void 0===e}e.exports=r,r.EventEmitter=r,r.prototype._events=void 0,r.prototype._maxListeners=void 0,r.defaultMaxListeners=10,r.prototype.setMaxListeners=function(e){if("number"!=typeof e||e<0||isNaN(e))throw TypeError("n must be a positive number");return this._maxListeners=e,this},r.prototype.emit=function(e){var t,r,s,a,c,l;if(this._events||(this._events={}),"error"===e&&(!this._events.error||o(this._events.error)&&!this._events.error.length)){if((t=arguments[1])instanceof Error)throw t;var u=new Error('Uncaught, unspecified "error" event. ('+t+")");throw u.context=t,u}if(i(r=this._events[e]))return!1;if(n(r))switch(arguments.length){case 1:r.call(this);break;case 2:r.call(this,arguments[1]);break;case 3:r.call(this,arguments[1],arguments[2]);break;default:a=Array.prototype.slice.call(arguments,1),r.apply(this,a)}else if(o(r))for(a=Array.prototype.slice.call(arguments,1),s=(l=r.slice()).length,c=0;c<s;c++)l[c].apply(this,a);return!0},r.prototype.addListener=function(e,t){var s;if(!n(t))throw TypeError("listener must be a function");return this._events||(this._events={}),this._events.newListener&&this.emit("newListener",e,n(t.listener)?t.listener:t),this._events[e]?o(this._events[e])?this._events[e].push(t):this._events[e]=[this._events[e],t]:this._events[e]=t,o(this._events[e])&&!this._events[e].warned&&(s=i(this._maxListeners)?r.defaultMaxListeners:this._maxListeners)&&s>0&&this._events[e].length>s&&(this._events[e].warned=!0,console.error("(node) warning: possible EventEmitter memory leak detected. %d listeners added. Use emitter.setMaxListeners() to increase limit.",this._events[e].length),"function"==typeof console.trace&&console.trace()),this},r.prototype.on=r.prototype.addListener,r.prototype.once=function(e,t){if(!n(t))throw TypeError("listener must be a function");var r=!1;function o(){this.removeListener(e,o),r||(r=!0,t.apply(this,arguments))}return o.listener=t,this.on(e,o),this},r.prototype.removeListener=function(e,t){var r,i,s,a;if(!n(t))throw TypeError("listener must be a function");if(!this._events||!this._events[e])return this;if(s=(r=this._events[e]).length,i=-1,r===t||n(r.listener)&&r.listener===t)delete this._events[e],this._events.removeListener&&this.emit("removeListener",e,t);else if(o(r)){for(a=s;a-- >0;)if(r[a]===t||r[a].listener&&r[a].listener===t){i=a;break}if(i<0)return this;1===r.length?(r.length=0,delete this._events[e]):r.splice(i,1),this._events.removeListener&&this.emit("removeListener",e,t)}return this},r.prototype.removeAllListeners=function(e){var t,r;if(!this._events)return this;if(!this._events.removeListener)return 0===arguments.length?this._events={}:this._events[e]&&delete this._events[e],this;if(0===arguments.length){for(t in this._events)"removeListener"!==t&&this.removeAllListeners(t);return this.removeAllListeners("removeListener"),this._events={},this}if(n(r=this._events[e]))this.removeListener(e,r);else if(r)for(;r.length;)this.removeListener(e,r[r.length-1]);return delete this._events[e],this},r.prototype.listeners=function(e){return this._events&&this._events[e]?n(this._events[e])?[this._events[e]]:this._events[e].slice():[]},r.prototype.listenerCount=function(e){if(this._events){var t=this._events[e];if(n(t))return 1;if(t)return t.length}return 0},r.listenerCount=function(e,t){return e.listenerCount(t)}},function(e,t,r){var n=r(5);e.exports=new n},function(e,t){var r="info";function n(){}function o(e){return"info"===r&&"info"===e||["info","warning"].indexOf(r)>=0&&"warning"===e||["info","warning","error"].indexOf(r)>=0&&"error"===e}function i(e){return function(t,r){o(t)&&e(r)}}e.exports=function(e,t){o(e)&&("info"===e?console.log(t):"warning"===e?console.warn(t):"error"===e&&console.error(t))};var s=console.group||n,a=console.groupCollapsed||n,c=console.groupEnd||n;e.exports.group=i(s),e.exports.groupCollapsed=i(a),e.exports.groupEnd=i(c),e.exports.setLogLevel=function(e){r=e}},function(e,t,r){var n={"./log":7};function o(e){var t=i(e);return r(t)}function i(e){var t=n[e];if(!(t+1)){var r=new Error('Cannot find module "'+e+'".');throw r.code="MODULE_NOT_FOUND",r}return t}o.keys=function(){return Object.keys(n)},o.resolve=i,e.exports=o,o.id=8},function(e,t){for(var r=["apos","nbsp","iexcl","cent","pound","curren","yen","brvbar","sect","uml","copy","ordf","laquo","not","shy","reg","macr","deg","plusmn","sup2","sup3","acute","micro","para","middot","cedil","sup1","ordm","raquo","frac14","frac12","frac34","iquest","Agrave","Aacute","Acirc","Atilde","Auml","Aring","Aelig","Ccedil","Egrave","Eacute","Ecirc","Euml","Igrave","Iacute","Icirc","Iuml","ETH","Ntilde","Ograve","Oacute","Ocirc","Otilde","Ouml","times","Oslash","Ugrave","Uacute","Ucirc","Uuml","Yacute","THORN","szlig","agrave","aacute","acirc","atilde","auml","aring","aelig","ccedil","egrave","eacute","ecirc","euml","igrave","iacute","icirc","iuml","eth","ntilde","ograve","oacute","ocirc","otilde","ouml","divide","oslash","ugrave","uacute","ucirc","uuml","yacute","thorn","yuml","quot","amp","lt","gt","OElig","oelig","Scaron","scaron","Yuml","circ","tilde","ensp","emsp","thinsp","zwnj","zwj","lrm","rlm","ndash","mdash","lsquo","rsquo","sbquo","ldquo","rdquo","bdquo","dagger","Dagger","permil","lsaquo","rsaquo","euro","fnof","Alpha","Beta","Gamma","Delta","Epsilon","Zeta","Eta","Theta","Iota","Kappa","Lambda","Mu","Nu","Xi","Omicron","Pi","Rho","Sigma","Tau","Upsilon","Phi","Chi","Psi","Omega","alpha","beta","gamma","delta","epsilon","zeta","eta","theta","iota","kappa","lambda","mu","nu","xi","omicron","pi","rho","sigmaf","sigma","tau","upsilon","phi","chi","psi","omega","thetasym","upsih","piv","bull","hellip","prime","Prime","oline","frasl","weierp","image","real","trade","alefsym","larr","uarr","rarr","darr","harr","crarr","lArr","uArr","rArr","dArr","hArr","forall","part","exist","empty","nabla","isin","notin","ni","prod","sum","minus","lowast","radic","prop","infin","ang","and","or","cap","cup","int","there4","sim","cong","asymp","ne","equiv","le","ge","sub","sup","nsub","sube","supe","oplus","otimes","perp","sdot","lceil","rceil","lfloor","rfloor","lang","rang","loz","spades","clubs","hearts","diams"],n=[39,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,250,251,252,253,254,255,34,38,60,62,338,339,352,353,376,710,732,8194,8195,8201,8204,8205,8206,8207,8211,8212,8216,8217,8218,8220,8221,8222,8224,8225,8240,8249,8250,8364,402,913,914,915,916,917,918,919,920,921,922,923,924,925,926,927,928,929,931,932,933,934,935,936,937,945,946,947,948,949,950,951,952,953,954,955,956,957,958,959,960,961,962,963,964,965,966,967,968,969,977,978,982,8226,8230,8242,8243,8254,8260,8472,8465,8476,8482,8501,8592,8593,8594,8595,8596,8629,8656,8657,8658,8659,8660,8704,8706,8707,8709,8711,8712,8713,8715,8719,8721,8722,8727,8730,8733,8734,8736,8743,8744,8745,8746,8747,8756,8764,8773,8776,8800,8801,8804,8805,8834,8835,8836,8838,8839,8853,8855,8869,8901,8968,8969,8970,8971,9001,9002,9674,9824,9827,9829,9830],o={},i={},s=0,a=r.length;s<a;){var c=r[s],l=n[s];o[c]=String.fromCharCode(l),i[l]=c,s++}function u(){}u.prototype.decode=function(e){return e&&e.length?e.replace(/&(#?[\w\d]+);?/g,function(e,t){var r;if("#"===t.charAt(0)){var n="x"===t.charAt(1).toLowerCase()?parseInt(t.substr(2),16):parseInt(t.substr(1));isNaN(n)||n<-32768||n>65535||(r=String.fromCharCode(n))}else r=o[t];return r||e}):""},u.decode=function(e){return(new u).decode(e)},u.prototype.encode=function(e){if(!e||!e.length)return"";for(var t=e.length,r="",n=0;n<t;){var o=i[e.charCodeAt(n)];r+=o?"&"+o+";":e.charAt(n),n++}return r},u.encode=function(e){return(new u).encode(e)},u.prototype.encodeNonUTF=function(e){if(!e||!e.length)return"";for(var t=e.length,r="",n=0;n<t;){var o=e.charCodeAt(n),s=i[o];r+=s?"&"+s+";":o<32||o>126?"&#"+o+";":e.charAt(n),n++}return r},u.encodeNonUTF=function(e){return(new u).encodeNonUTF(e)},u.prototype.encodeNonASCII=function(e){if(!e||!e.length)return"";for(var t=e.length,r="",n=0;n<t;){var o=e.charCodeAt(n);o<=255?r+=e[n++]:(r+="&#"+o+";",n++)}return r},u.encodeNonASCII=function(e){return(new u).encodeNonASCII(e)},e.exports=u},function(e,t){var r={"&lt":"<","&gt":">","&quot":'"',"&apos":"'","&amp":"&","&lt;":"<","&gt;":">","&quot;":'"',"&apos;":"'","&amp;":"&"},n={60:"lt",62:"gt",34:"quot",39:"apos",38:"amp"},o={"<":"&lt;",">":"&gt;",'"':"&quot;","'":"&apos;","&":"&amp;"};function i(){}i.prototype.encode=function(e){return e&&e.length?e.replace(/<|>|"|'|&/g,function(e){return o[e]}):""},i.encode=function(e){return(new i).encode(e)},i.prototype.decode=function(e){return e&&e.length?e.replace(/&#?[0-9a-zA-Z]+;?/g,function(e){if("#"===e.charAt(1)){var t="x"===e.charAt(2).toLowerCase()?parseInt(e.substr(3),16):parseInt(e.substr(2));return isNaN(t)||t<-32768||t>65535?"":String.fromCharCode(t)}return r[e]||e}):""},i.decode=function(e){return(new i).decode(e)},i.prototype.encodeNonUTF=function(e){if(!e||!e.length)return"";for(var t=e.length,r="",o=0;o<t;){var i=e.charCodeAt(o),s=n[i];s?(r+="&"+s+";",o++):(r+=i<32||i>126?"&#"+i+";":e.charAt(o),o++)}return r},i.encodeNonUTF=function(e){return(new i).encodeNonUTF(e)},i.prototype.encodeNonASCII=function(e){if(!e||!e.length)return"";for(var t=e.length,r="",n=0;n<t;){var o=e.charCodeAt(n);o<=255?r+=e[n++]:(r+="&#"+o+";",n++)}return r},i.encodeNonASCII=function(e){return(new i).encodeNonASCII(e)},e.exports=i},function(e,t,r){e.exports={XmlEntities:r(10),Html4Entities:r(9),Html5Entities:r(0),AllHtmlEntities:r(0)}},function(e,t,r){"use strict";e.exports=c;var n=/(?:(?:\u001b\[)|\u009b)(?:(?:[0-9]{1,3})?(?:(?:;[0-9]{0,3})*)?[A-M|f-m])|\u001b[A-M]/,o={reset:["fff","000"],black:"000",red:"ff0000",green:"209805",yellow:"e8bf03",blue:"0000ff",magenta:"ff00ff",cyan:"00ffee",lightgrey:"f0f0f0",darkgrey:"888"},i={30:"black",31:"red",32:"green",33:"yellow",34:"blue",35:"magenta",36:"cyan",37:"lightgrey"},s={1:"font-weight:bold",2:"opacity:0.5",3:"<i>",4:"<u>",8:"display:none",9:"<del>"},a={23:"</i>",24:"</u>",29:"</del>"};function c(e){if(!n.test(e))return e;var t=[],r=e.replace(/\033\[(\d+)*m/g,function(e,r){var n=s[r];if(n)return~t.indexOf(r)?(t.pop(),"</span>"):(t.push(r),"<"===n[0]?n:'<span style="'+n+';">');var o=a[r];return o?(t.pop(),o):""}),o=t.length;return o>0&&(r+=Array(o+1).join("</span>")),r}function l(e){for(var t in s[0]="font-weight:normal;opacity:1;color:#"+e.reset[0]+";background:#"+e.reset[1],s[7]="color:#"+e.reset[1]+";background:#"+e.reset[0],s[90]="color:#"+e.darkgrey,i){var r=e[i[t]]||"000";s[t]="color:#"+r,t=parseInt(t),s[(t+10).toString()]="background:#"+r}}[0,21,22,27,28,39,49].forEach(function(e){a[e]="</span>"}),c.setColors=function(e){if("object"!=typeof e)throw new Error("`colors` parameter must be an Object.");var t={};for(var r in o){var n=e.hasOwnProperty(r)?e[r]:null;if(n){if("reset"===r){if("string"==typeof n&&(n=[n]),!Array.isArray(n)||0===n.length||n.some(function(e){return"string"!=typeof e}))throw new Error("The value of `"+r+"` property must be an Array and each item could only be a hex string, e.g.: FF0000");var i=o[r];n[0]||(n[0]=i[0]),1!==n.length&&n[1]||(n=[n[0]]).push(i[1]),n=n.slice(0,2)}else if("string"!=typeof n)throw new Error("The value of `"+r+"` property must be a hex string, e.g.: FF0000");t[r]=n}else t[r]=o[r]}l(t)},c.reset=function(){l(o)},c.tags={},Object.defineProperty?(Object.defineProperty(c.tags,"open",{get:function(){return s}}),Object.defineProperty(c.tags,"close",{get:function(){return a}})):(c.tags.open=s,c.tags.close=a),c.reset()},function(e,t,r){"use strict";var n=r(12),o=new(0,r(11).AllHtmlEntities),i={reset:["transparent","transparent"],black:"181818",red:"E36049",green:"B3CB74",yellow:"FFD080",blue:"7CAFC2",magenta:"7FACCA",cyan:"C3C2EF",lightgrey:"EBE7E3",darkgrey:"6D7891"};n.setColors(i);var s=null,a=null,c=null;function l(e){var t,r;a?e(a):(c=e,s||(t=function(){var e,t;(t=(e=s).contentDocument.createElement("div")).id="webpack-dev-server-client-overlay-div",t.style.position="fixed",t.style.boxSizing="border-box",t.style.left=0,t.style.top=0,t.style.right=0,t.style.bottom=0,t.style.width="100vw",t.style.height="100vh",t.style.backgroundColor="rgba(0, 0, 0, 0.85)",t.style.color="#E8E8E8",t.style.fontFamily="Menlo, Consolas, monospace",t.style.fontSize="large",t.style.padding="2rem",t.style.lineHeight="1.2",t.style.whiteSpace="pre-wrap",t.style.overflow="auto",e.contentDocument.body.appendChild(t),c(a=t)},(r=document.createElement("iframe")).id="webpack-dev-server-client-overlay",r.src="about:blank",r.style.position="fixed",r.style.left=0,r.style.top=0,r.style.right=0,r.style.bottom=0,r.style.width="100vw",r.style.height="100vh",r.style.border="none",r.style.zIndex=9999999999,r.onload=t,s=r,document.body.appendChild(s)))}t.clear=function(){a&&(document.body.removeChild(s),a=null,s=null,c=null)},t.showMessage=function(e){var t;t=e[0],l(function(e){e.innerHTML='<span style="color: #'+i.red+'">Failed to compile.</span><br><br>'+n(o.encode(t))})}},function(e,t,r){(function(t){var r;e.exports=function e(t,n,o){function i(a,c){if(!n[a]){if(!t[a]){var l="function"==typeof r&&r;if(!c&&l)return r(a,!0);if(s)return s(a,!0);var u=new Error("Cannot find module '"+a+"'");throw u.code="MODULE_NOT_FOUND",u}var d=n[a]={exports:{}};t[a][0].call(d.exports,function(e){var r=t[a][1][e];return i(r||e)},d,d.exports,e,t,n,o)}return n[a].exports}for(var s="function"==typeof r&&r,a=0;a<o.length;a++)i(o[a]);return i}({1:[function(e,r,n){(function(t){"use strict";var n=e("./transport-list");r.exports=e("./main")(n),"_sockjs_onload"in t&&setTimeout(t._sockjs_onload,1)}).call(this,void 0!==t?t:"undefined"!=typeof self?self:"undefined"!=typeof window?window:{})},{"./main":14,"./transport-list":16}],2:[function(e,t,r){"use strict";var n=e("inherits"),o=e("./event");function i(){o.call(this),this.initEvent("close",!1,!1),this.wasClean=!1,this.code=0,this.reason=""}n(i,o),t.exports=i},{"./event":4,inherits:57}],3:[function(e,t,r){"use strict";var n=e("inherits"),o=e("./eventtarget");function i(){o.call(this)}n(i,o),i.prototype.removeAllListeners=function(e){e?delete this._listeners[e]:this._listeners={}},i.prototype.once=function(e,t){var r=this,n=!1;this.on(e,function o(){r.removeListener(e,o),n||(n=!0,t.apply(this,arguments))})},i.prototype.emit=function(){var e=arguments[0],t=this._listeners[e];if(t){for(var r=arguments.length,n=new Array(r-1),o=1;o<r;o++)n[o-1]=arguments[o];for(var i=0;i<t.length;i++)t[i].apply(this,n)}},i.prototype.on=i.prototype.addListener=o.prototype.addEventListener,i.prototype.removeListener=o.prototype.removeEventListener,t.exports.EventEmitter=i},{"./eventtarget":5,inherits:57}],4:[function(e,t,r){"use strict";function n(e){this.type=e}n.prototype.initEvent=function(e,t,r){return this.type=e,this.bubbles=t,this.cancelable=r,this.timeStamp=+new Date,this},n.prototype.stopPropagation=function(){},n.prototype.preventDefault=function(){},n.CAPTURING_PHASE=1,n.AT_TARGET=2,n.BUBBLING_PHASE=3,t.exports=n},{}],5:[function(e,t,r){"use strict";function n(){this._listeners={}}n.prototype.addEventListener=function(e,t){e in this._listeners||(this._listeners[e]=[]);var r=this._listeners[e];-1===r.indexOf(t)&&(r=r.concat([t])),this._listeners[e]=r},n.prototype.removeEventListener=function(e,t){var r=this._listeners[e];if(r){var n=r.indexOf(t);-1===n||(r.length>1?this._listeners[e]=r.slice(0,n).concat(r.slice(n+1)):delete this._listeners[e])}},n.prototype.dispatchEvent=function(){var e=arguments[0],t=e.type,r=1===arguments.length?[e]:Array.apply(null,arguments);if(this["on"+t]&&this["on"+t].apply(this,r),t in this._listeners)for(var n=this._listeners[t],o=0;o<n.length;o++)n[o].apply(this,r)},t.exports=n},{}],6:[function(e,t,r){"use strict";var n=e("inherits"),o=e("./event");function i(e){o.call(this),this.initEvent("message",!1,!1),this.data=e}n(i,o),t.exports=i},{"./event":4,inherits:57}],7:[function(e,t,r){"use strict";var n=e("json3"),o=e("./utils/iframe");function i(e){this._transport=e,e.on("message",this._transportMessage.bind(this)),e.on("close",this._transportClose.bind(this))}i.prototype._transportClose=function(e,t){o.postMessage("c",n.stringify([e,t]))},i.prototype._transportMessage=function(e){o.postMessage("t",e)},i.prototype._send=function(e){this._transport.send(e)},i.prototype._close=function(){this._transport.close(),this._transport.removeAllListeners()},t.exports=i},{"./utils/iframe":47,json3:58}],8:[function(e,t,r){(function(r){"use strict";var n=e("./utils/url"),o=e("./utils/event"),i=e("json3"),s=e("./facade"),a=e("./info-iframe-receiver"),c=e("./utils/iframe"),l=e("./location"),u=function(){};"production"!==r.env.NODE_ENV&&(u=e("debug")("sockjs-client:iframe-bootstrap")),t.exports=function(e,t){var r,d={};t.forEach(function(e){e.facadeTransport&&(d[e.facadeTransport.transportName]=e.facadeTransport)}),d[a.transportName]=a,e.bootstrap_iframe=function(){var t;c.currentWindowId=l.hash.slice(1),o.attachEvent("message",function(o){if(o.source===parent&&(void 0===r&&(r=o.origin),o.origin===r)){var a;try{a=i.parse(o.data)}catch(e){return void u("bad json",o.data)}if(a.windowId===c.currentWindowId)switch(a.type){case"s":var p;try{p=i.parse(a.data)}catch(e){u("bad json",a.data);break}var f=p[0],h=p[1],v=p[2],m=p[3];if(u(f,h,v,m),f!==e.version)throw new Error('Incompatible SockJS! Main site uses: "'+f+'", the iframe: "'+e.version+'".');if(!n.isOriginEqual(v,l.href)||!n.isOriginEqual(m,l.href))throw new Error("Can't connect to different domain from within an iframe. ("+l.href+", "+v+", "+m+")");t=new s(new d[h](v,m));break;case"m":t._send(a.data);break;case"c":t&&t._close(),t=null}}}),c.postMessage("s")}}}).call(this,{env:{}})},{"./facade":7,"./info-iframe-receiver":10,"./location":13,"./utils/event":46,"./utils/iframe":47,"./utils/url":52,debug:55,json3:58}],9:[function(e,t,r){(function(r){"use strict";var n=e("events").EventEmitter,o=e("inherits"),i=e("json3"),s=e("./utils/object"),a=function(){};function c(e,t){n.call(this);var r=this,o=+new Date;this.xo=new t("GET",e),this.xo.once("finish",function(e,t){var n,c;if(200===e){if(c=+new Date-o,t)try{n=i.parse(t)}catch(e){a("bad json",t)}s.isObject(n)||(n={})}r.emit("finish",n,c),r.removeAllListeners()})}"production"!==r.env.NODE_ENV&&(a=e("debug")("sockjs-client:info-ajax")),o(c,n),c.prototype.close=function(){this.removeAllListeners(),this.xo.close()},t.exports=c}).call(this,{env:{}})},{"./utils/object":49,debug:55,events:3,inherits:57,json3:58}],10:[function(e,t,r){"use strict";var n=e("inherits"),o=e("events").EventEmitter,i=e("json3"),s=e("./transport/sender/xhr-local"),a=e("./info-ajax");function c(e){var t=this;o.call(this),this.ir=new a(e,s),this.ir.once("finish",function(e,r){t.ir=null,t.emit("message",i.stringify([e,r]))})}n(c,o),c.transportName="iframe-info-receiver",c.prototype.close=function(){this.ir&&(this.ir.close(),this.ir=null),this.removeAllListeners()},t.exports=c},{"./info-ajax":9,"./transport/sender/xhr-local":37,events:3,inherits:57,json3:58}],11:[function(e,r,n){(function(t,n){"use strict";var o=e("events").EventEmitter,i=e("inherits"),s=e("json3"),a=e("./utils/event"),c=e("./transport/iframe"),l=e("./info-iframe-receiver"),u=function(){};function d(e,t){var r=this;o.call(this);var i=function(){var n=r.ifr=new c(l.transportName,t,e);n.once("message",function(e){if(e){var t;try{t=s.parse(e)}catch(t){return u("bad json",e),r.emit("finish"),void r.close()}var n=t[0],o=t[1];r.emit("finish",n,o)}r.close()}),n.once("close",function(){r.emit("finish"),r.close()})};n.document.body?i():a.attachEvent("load",i)}"production"!==t.env.NODE_ENV&&(u=e("debug")("sockjs-client:info-iframe")),i(d,o),d.enabled=function(){return c.enabled()},d.prototype.close=function(){this.ifr&&this.ifr.close(),this.removeAllListeners(),this.ifr=null},r.exports=d}).call(this,{env:{}},void 0!==t?t:"undefined"!=typeof self?self:"undefined"!=typeof window?window:{})},{"./info-iframe-receiver":10,"./transport/iframe":22,"./utils/event":46,debug:55,events:3,inherits:57,json3:58}],12:[function(e,t,r){(function(r){"use strict";var n=e("events").EventEmitter,o=e("inherits"),i=e("./utils/url"),s=e("./transport/sender/xdr"),a=e("./transport/sender/xhr-cors"),c=e("./transport/sender/xhr-local"),l=e("./transport/sender/xhr-fake"),u=e("./info-iframe"),d=e("./info-ajax"),p=function(){};function f(e,t){p(e);var r=this;n.call(this),setTimeout(function(){r.doXhr(e,t)},0)}"production"!==r.env.NODE_ENV&&(p=e("debug")("sockjs-client:info-receiver")),o(f,n),f._getReceiver=function(e,t,r){return r.sameOrigin?new d(t,c):a.enabled?new d(t,a):s.enabled&&r.sameScheme?new d(t,s):u.enabled()?new u(e,t):new d(t,l)},f.prototype.doXhr=function(e,t){var r=this,n=i.addPath(e,"/info");p("doXhr",n),this.xo=f._getReceiver(e,n,t),this.timeoutRef=setTimeout(function(){p("timeout"),r._cleanup(!1),r.emit("finish")},f.timeout),this.xo.once("finish",function(e,t){p("finish",e,t),r._cleanup(!0),r.emit("finish",e,t)})},f.prototype._cleanup=function(e){p("_cleanup"),clearTimeout(this.timeoutRef),this.timeoutRef=null,!e&&this.xo&&this.xo.close(),this.xo=null},f.prototype.close=function(){p("close"),this.removeAllListeners(),this._cleanup(!1)},f.timeout=8e3,t.exports=f}).call(this,{env:{}})},{"./info-ajax":9,"./info-iframe":11,"./transport/sender/xdr":34,"./transport/sender/xhr-cors":35,"./transport/sender/xhr-fake":36,"./transport/sender/xhr-local":37,"./utils/url":52,debug:55,events:3,inherits:57}],13:[function(e,r,n){(function(e){"use strict";r.exports=e.location||{origin:"http://localhost:80",protocol:"http",host:"localhost",port:80,href:"http://localhost/",hash:""}}).call(this,void 0!==t?t:"undefined"!=typeof self?self:"undefined"!=typeof window?window:{})},{}],14:[function(e,r,n){(function(t,n){"use strict";e("./shims");var o,i=e("url-parse"),s=e("inherits"),a=e("json3"),c=e("./utils/random"),l=e("./utils/escape"),u=e("./utils/url"),d=e("./utils/event"),p=e("./utils/transport"),f=e("./utils/object"),h=e("./utils/browser"),v=e("./utils/log"),m=e("./event/event"),g=e("./event/eventtarget"),b=e("./location"),y=e("./event/close"),w=e("./event/trans-message"),x=e("./info-receiver"),E=function(){};function A(e,t,r){if(!(this instanceof A))return new A(e,t,r);if(arguments.length<1)throw new TypeError("Failed to construct 'SockJS: 1 argument required, but only 0 present");g.call(this),this.readyState=A.CONNECTING,this.extensions="",this.protocol="",(r=r||{}).protocols_whitelist&&v.warn("'protocols_whitelist' is DEPRECATED. Use 'transports' instead."),this._transportsWhitelist=r.transports,this._transportOptions=r.transportOptions||{};var n=r.sessionId||8;if("function"==typeof n)this._generateSessionId=n;else{if("number"!=typeof n)throw new TypeError("If sessionId is used in the options, it needs to be a number or a function.");this._generateSessionId=function(){return c.string(n)}}this._server=r.server||c.numberString(1e3);var o=new i(e);if(!o.host||!o.protocol)throw new SyntaxError("The URL '"+e+"' is invalid");if(o.hash)throw new SyntaxError("The URL must not contain a fragment");if("http:"!==o.protocol&&"https:"!==o.protocol)throw new SyntaxError("The URL's scheme must be either 'http:' or 'https:'. '"+o.protocol+"' is not allowed.");var s="https:"===o.protocol;if("https"===b.protocol&&!s)throw new Error("SecurityError: An insecure SockJS connection may not be initiated from a page loaded over HTTPS");t?Array.isArray(t)||(t=[t]):t=[];var a=t.sort();a.forEach(function(e,t){if(!e)throw new SyntaxError("The protocols entry '"+e+"' is invalid.");if(t<a.length-1&&e===a[t+1])throw new SyntaxError("The protocols entry '"+e+"' is duplicated.")});var l=u.getOrigin(b.href);this._origin=l?l.toLowerCase():null,o.set("pathname",o.pathname.replace(/\/+$/,"")),this.url=o.href,E("using url",this.url),this._urlInfo={nullOrigin:!h.hasDomain(),sameOrigin:u.isOriginEqual(this.url,b.href),sameScheme:u.isSchemeEqual(this.url,b.href)},this._ir=new x(this.url,this._urlInfo),this._ir.once("finish",this._receiveInfo.bind(this))}function k(e){return 1e3===e||e>=3e3&&e<=4999}"production"!==t.env.NODE_ENV&&(E=e("debug")("sockjs-client:main")),s(A,g),A.prototype.close=function(e,t){if(e&&!k(e))throw new Error("InvalidAccessError: Invalid code");if(t&&t.length>123)throw new SyntaxError("reason argument has an invalid length");this.readyState!==A.CLOSING&&this.readyState!==A.CLOSED&&this._close(e||1e3,t||"Normal closure",!0)},A.prototype.send=function(e){if("string"!=typeof e&&(e=""+e),this.readyState===A.CONNECTING)throw new Error("InvalidStateError: The connection has not been established yet");this.readyState===A.OPEN&&this._transport.send(l.quote(e))},A.version=e("./version"),A.CONNECTING=0,A.OPEN=1,A.CLOSING=2,A.CLOSED=3,A.prototype._receiveInfo=function(e,t){if(E("_receiveInfo",t),this._ir=null,e){this._rto=this.countRTO(t),this._transUrl=e.base_url?e.base_url:this.url,e=f.extend(e,this._urlInfo),E("info",e);var r=o.filterToEnabled(this._transportsWhitelist,e);this._transports=r.main,E(this._transports.length+" enabled transports"),this._connect()}else this._close(1002,"Cannot connect to server")},A.prototype._connect=function(){for(var e=this._transports.shift();e;e=this._transports.shift()){if(E("attempt",e.transportName),e.needBody&&(!n.document.body||void 0!==n.document.readyState&&"complete"!==n.document.readyState&&"interactive"!==n.document.readyState))return E("waiting for body"),this._transports.unshift(e),void d.attachEvent("load",this._connect.bind(this));var t=this._rto*e.roundTrips||5e3;this._transportTimeoutId=setTimeout(this._transportTimeout.bind(this),t),E("using timeout",t);var r=u.addPath(this._transUrl,"/"+this._server+"/"+this._generateSessionId()),o=this._transportOptions[e.transportName];E("transport url",r);var i=new e(r,this._transUrl,o);return i.on("message",this._transportMessage.bind(this)),i.once("close",this._transportClose.bind(this)),i.transportName=e.transportName,void(this._transport=i)}this._close(2e3,"All transports failed",!1)},A.prototype._transportTimeout=function(){E("_transportTimeout"),this.readyState===A.CONNECTING&&this._transportClose(2007,"Transport timed out")},A.prototype._transportMessage=function(e){E("_transportMessage",e);var t,r=this,n=e.slice(0,1),o=e.slice(1);switch(n){case"o":return void this._open();case"h":return this.dispatchEvent(new m("heartbeat")),void E("heartbeat",this.transport)}if(o)try{t=a.parse(o)}catch(e){E("bad json",o)}if(void 0!==t)switch(n){case"a":Array.isArray(t)&&t.forEach(function(e){E("message",r.transport,e),r.dispatchEvent(new w(e))});break;case"m":E("message",this.transport,t),this.dispatchEvent(new w(t));break;case"c":Array.isArray(t)&&2===t.length&&this._close(t[0],t[1],!0)}else E("empty payload",o)},A.prototype._transportClose=function(e,t){E("_transportClose",this.transport,e,t),this._transport&&(this._transport.removeAllListeners(),this._transport=null,this.transport=null),k(e)||2e3===e||this.readyState!==A.CONNECTING?this._close(e,t):this._connect()},A.prototype._open=function(){E("_open",this._transport.transportName,this.readyState),this.readyState===A.CONNECTING?(this._transportTimeoutId&&(clearTimeout(this._transportTimeoutId),this._transportTimeoutId=null),this.readyState=A.OPEN,this.transport=this._transport.transportName,this.dispatchEvent(new m("open")),E("connected",this.transport)):this._close(1006,"Server lost session")},A.prototype._close=function(e,t,r){E("_close",this.transport,e,t,r,this.readyState);var n=!1;if(this._ir&&(n=!0,this._ir.close(),this._ir=null),this._transport&&(this._transport.close(),this._transport=null,this.transport=null),this.readyState===A.CLOSED)throw new Error("InvalidStateError: SockJS has already been closed");this.readyState=A.CLOSING,setTimeout(function(){this.readyState=A.CLOSED,n&&this.dispatchEvent(new m("error"));var o=new y("close");o.wasClean=r||!1,o.code=e||1e3,o.reason=t,this.dispatchEvent(o),this.onmessage=this.onclose=this.onerror=null,E("disconnected")}.bind(this),0)},A.prototype.countRTO=function(e){return e>100?4*e:300+e},r.exports=function(t){return o=p(t),e("./iframe-bootstrap")(A,t),A}}).call(this,{env:{}},void 0!==t?t:"undefined"!=typeof self?self:"undefined"!=typeof window?window:{})},{"./event/close":2,"./event/event":4,"./event/eventtarget":5,"./event/trans-message":6,"./iframe-bootstrap":8,"./info-receiver":12,"./location":13,"./shims":15,"./utils/browser":44,"./utils/escape":45,"./utils/event":46,"./utils/log":48,"./utils/object":49,"./utils/random":50,"./utils/transport":51,"./utils/url":52,"./version":53,debug:55,inherits:57,json3:58,"url-parse":61}],15:[function(e,t,r){"use strict";var n,o=Array.prototype,i=Object.prototype,s=Function.prototype,a=String.prototype,c=o.slice,l=i.toString,u=function(e){return"[object Function]"===i.toString.call(e)},d=function(e){return"[object String]"===l.call(e)},p=Object.defineProperty&&function(){try{return Object.defineProperty({},"x",{}),!0}catch(e){return!1}}();n=p?function(e,t,r,n){!n&&t in e||Object.defineProperty(e,t,{configurable:!0,enumerable:!1,writable:!0,value:r})}:function(e,t,r,n){!n&&t in e||(e[t]=r)};var f=function(e,t,r){for(var o in t)i.hasOwnProperty.call(t,o)&&n(e,o,t[o],r)},h=function(e){if(null==e)throw new TypeError("can't convert "+e+" to object");return Object(e)};function v(){}f(s,{bind:function(e){var t=this;if(!u(t))throw new TypeError("Function.prototype.bind called on incompatible "+t);for(var r=c.call(arguments,1),n=Math.max(0,t.length-r.length),o=[],i=0;i<n;i++)o.push("$"+i);var s=Function("binder","return function ("+o.join(",")+"){ return binder.apply(this, arguments); }")(function(){if(this instanceof s){var n=t.apply(this,r.concat(c.call(arguments)));return Object(n)===n?n:this}return t.apply(e,r.concat(c.call(arguments)))});return t.prototype&&(v.prototype=t.prototype,s.prototype=new v,v.prototype=null),s}}),f(Array,{isArray:function(e){return"[object Array]"===l.call(e)}});var m,g,b,y=Object("a"),w="a"!==y[0]||!(0 in y);f(o,{forEach:function(e){var t=h(this),r=w&&d(this)?this.split(""):t,n=arguments[1],o=-1,i=r.length>>>0;if(!u(e))throw new TypeError;for(;++o<i;)o in r&&e.call(n,r[o],o,t)}},(m=o.forEach,g=!0,b=!0,m&&(m.call("foo",function(e,t,r){"object"!=typeof r&&(g=!1)}),m.call([1],function(){b="string"==typeof this},"x")),!(m&&g&&b)));var x=Array.prototype.indexOf&&-1!==[0,1].indexOf(1,2);f(o,{indexOf:function(e){var t=w&&d(this)?this.split(""):h(this),r=t.length>>>0;if(!r)return-1;var n,o,i=0;for(arguments.length>1&&(n=arguments[1],o=void 0,(o=+n)!=o?o=0:0!==o&&o!==1/0&&o!==-1/0&&(o=(o>0||-1)*Math.floor(Math.abs(o))),i=o),i=i>=0?i:Math.max(0,r+i);i<r;i++)if(i in t&&t[i]===e)return i;return-1}},x);var E,A=a.split;2!=="ab".split(/(?:ab)*/).length||4!==".".split(/(.?)(.?)/).length||"t"==="tesst".split(/(s)*/)[1]||4!=="test".split(/(?:)/,-1).length||"".split(/.?/).length||".".split(/()()/).length>1?(E=void 0===/()??/.exec("")[1],a.split=function(e,t){var r=this;if(void 0===e&&0===t)return[];if("[object RegExp]"!==l.call(e))return A.call(this,e,t);var n,i,s,a,c=[],u=(e.ignoreCase?"i":"")+(e.multiline?"m":"")+(e.extended?"x":"")+(e.sticky?"y":""),d=0;for(e=new RegExp(e.source,u+"g"),r+="",E||(n=new RegExp("^"+e.source+"$(?!\\s)",u)),t=void 0===t?-1>>>0:t>>>0;(i=e.exec(r))&&!((s=i.index+i[0].length)>d&&(c.push(r.slice(d,i.index)),!E&&i.length>1&&i[0].replace(n,function(){for(var e=1;e<arguments.length-2;e++)void 0===arguments[e]&&(i[e]=void 0)}),i.length>1&&i.index<r.length&&o.push.apply(c,i.slice(1)),a=i[0].length,d=s,c.length>=t));)e.lastIndex===i.index&&e.lastIndex++;return d===r.length?!a&&e.test("")||c.push(""):c.push(r.slice(d)),c.length>t?c.slice(0,t):c}):"0".split(void 0,0).length&&(a.split=function(e,t){return void 0===e&&0===t?[]:A.call(this,e,t)});var k=a.substr,S="".substr&&"b"!=="0b".substr(-1);f(a,{substr:function(e,t){return k.call(this,e<0&&(e=this.length+e)<0?0:e,t)}},S)},{}],16:[function(e,t,r){"use strict";t.exports=[e("./transport/websocket"),e("./transport/xhr-streaming"),e("./transport/xdr-streaming"),e("./transport/eventsource"),e("./transport/lib/iframe-wrap")(e("./transport/eventsource")),e("./transport/htmlfile"),e("./transport/lib/iframe-wrap")(e("./transport/htmlfile")),e("./transport/xhr-polling"),e("./transport/xdr-polling"),e("./transport/lib/iframe-wrap")(e("./transport/xhr-polling")),e("./transport/jsonp-polling")]},{"./transport/eventsource":20,"./transport/htmlfile":21,"./transport/jsonp-polling":23,"./transport/lib/iframe-wrap":26,"./transport/websocket":38,"./transport/xdr-polling":39,"./transport/xdr-streaming":40,"./transport/xhr-polling":41,"./transport/xhr-streaming":42}],17:[function(e,r,n){(function(t,n){"use strict";var o=e("events").EventEmitter,i=e("inherits"),s=e("../../utils/event"),a=e("../../utils/url"),c=n.XMLHttpRequest,l=function(){};function u(e,t,r,n){l(e,t);var i=this;o.call(this),setTimeout(function(){i._start(e,t,r,n)},0)}"production"!==t.env.NODE_ENV&&(l=e("debug")("sockjs-client:browser:xhr")),i(u,o),u.prototype._start=function(e,t,r,n){var o=this;try{this.xhr=new c}catch(e){}if(!this.xhr)return l("no xhr"),this.emit("finish",0,"no xhr support"),void this._cleanup();t=a.addQuery(t,"t="+ +new Date),this.unloadRef=s.unloadAdd(function(){l("unload cleanup"),o._cleanup(!0)});try{this.xhr.open(e,t,!0),this.timeout&&"timeout"in this.xhr&&(this.xhr.timeout=this.timeout,this.xhr.ontimeout=function(){l("xhr timeout"),o.emit("finish",0,""),o._cleanup(!1)})}catch(e){return l("exception",e),this.emit("finish",0,""),void this._cleanup(!1)}if(n&&n.noCredentials||!u.supportsCORS||(l("withCredentials"),this.xhr.withCredentials="true"),n&&n.headers)for(var i in n.headers)this.xhr.setRequestHeader(i,n.headers[i]);this.xhr.onreadystatechange=function(){if(o.xhr){var e,t,r=o.xhr;switch(l("readyState",r.readyState),r.readyState){case 3:try{t=r.status,e=r.responseText}catch(e){}l("status",t),1223===t&&(t=204),200===t&&e&&e.length>0&&(l("chunk"),o.emit("chunk",t,e));break;case 4:t=r.status,l("status",t),1223===t&&(t=204),12005!==t&&12029!==t||(t=0),l("finish",t,r.responseText),o.emit("finish",t,r.responseText),o._cleanup(!1)}}};try{o.xhr.send(r)}catch(e){o.emit("finish",0,""),o._cleanup(!1)}},u.prototype._cleanup=function(e){if(l("cleanup"),this.xhr){if(this.removeAllListeners(),s.unloadDel(this.unloadRef),this.xhr.onreadystatechange=function(){},this.xhr.ontimeout&&(this.xhr.ontimeout=null),e)try{this.xhr.abort()}catch(e){}this.unloadRef=this.xhr=null}},u.prototype.close=function(){l("close"),this._cleanup(!0)},u.enabled=!!c;var d=["Active"].concat("Object").join("X");!u.enabled&&d in n&&(l("overriding xmlhttprequest"),c=function(){try{return new n[d]("Microsoft.XMLHTTP")}catch(e){return null}},u.enabled=!!new c);var p=!1;try{p="withCredentials"in new c}catch(e){}u.supportsCORS=p,r.exports=u}).call(this,{env:{}},void 0!==t?t:"undefined"!=typeof self?self:"undefined"!=typeof window?window:{})},{"../../utils/event":46,"../../utils/url":52,debug:55,events:3,inherits:57}],18:[function(e,r,n){(function(e){r.exports=e.EventSource}).call(this,void 0!==t?t:"undefined"!=typeof self?self:"undefined"!=typeof window?window:{})},{}],19:[function(e,r,n){(function(e){"use strict";var t=e.WebSocket||e.MozWebSocket;r.exports=t?function(e){return new t(e)}:void 0}).call(this,void 0!==t?t:"undefined"!=typeof self?self:"undefined"!=typeof window?window:{})},{}],20:[function(e,t,r){"use strict";var n=e("inherits"),o=e("./lib/ajax-based"),i=e("./receiver/eventsource"),s=e("./sender/xhr-cors"),a=e("eventsource");function c(e){if(!c.enabled())throw new Error("Transport created when disabled");o.call(this,e,"/eventsource",i,s)}n(c,o),c.enabled=function(){return!!a},c.transportName="eventsource",c.roundTrips=2,t.exports=c},{"./lib/ajax-based":24,"./receiver/eventsource":29,"./sender/xhr-cors":35,eventsource:18,inherits:57}],21:[function(e,t,r){"use strict";var n=e("inherits"),o=e("./receiver/htmlfile"),i=e("./sender/xhr-local"),s=e("./lib/ajax-based");function a(e){if(!o.enabled)throw new Error("Transport created when disabled");s.call(this,e,"/htmlfile",o,i)}n(a,s),a.enabled=function(e){return o.enabled&&e.sameOrigin},a.transportName="htmlfile",a.roundTrips=2,t.exports=a},{"./lib/ajax-based":24,"./receiver/htmlfile":30,"./sender/xhr-local":37,inherits:57}],22:[function(e,t,r){(function(r){"use strict";var n=e("inherits"),o=e("json3"),i=e("events").EventEmitter,s=e("../version"),a=e("../utils/url"),c=e("../utils/iframe"),l=e("../utils/event"),u=e("../utils/random"),d=function(){};function p(e,t,r){if(!p.enabled())throw new Error("Transport created when disabled");i.call(this);var n=this;this.origin=a.getOrigin(r),this.baseUrl=r,this.transUrl=t,this.transport=e,this.windowId=u.string(8);var o=a.addPath(r,"/iframe.html")+"#"+this.windowId;d(e,t,o),this.iframeObj=c.createIframe(o,function(e){d("err callback"),n.emit("close",1006,"Unable to load an iframe ("+e+")"),n.close()}),this.onmessageCallback=this._message.bind(this),l.attachEvent("message",this.onmessageCallback)}"production"!==r.env.NODE_ENV&&(d=e("debug")("sockjs-client:transport:iframe")),n(p,i),p.prototype.close=function(){if(d("close"),this.removeAllListeners(),this.iframeObj){l.detachEvent("message",this.onmessageCallback);try{this.postMessage("c")}catch(e){}this.iframeObj.cleanup(),this.iframeObj=null,this.onmessageCallback=this.iframeObj=null}},p.prototype._message=function(e){if(d("message",e.data),a.isOriginEqual(e.origin,this.origin)){var t;try{t=o.parse(e.data)}catch(t){return void d("bad json",e.data)}if(t.windowId===this.windowId)switch(t.type){case"s":this.iframeObj.loaded(),this.postMessage("s",o.stringify([s,this.transport,this.transUrl,this.baseUrl]));break;case"t":this.emit("message",t.data);break;case"c":var r;try{r=o.parse(t.data)}catch(e){return void d("bad json",t.data)}this.emit("close",r[0],r[1]),this.close()}else d("mismatched window id",t.windowId,this.windowId)}else d("not same origin",e.origin,this.origin)},p.prototype.postMessage=function(e,t){d("postMessage",e,t),this.iframeObj.post(o.stringify({windowId:this.windowId,type:e,data:t||""}),this.origin)},p.prototype.send=function(e){d("send",e),this.postMessage("m",e)},p.enabled=function(){return c.iframeEnabled},p.transportName="iframe",p.roundTrips=2,t.exports=p}).call(this,{env:{}})},{"../utils/event":46,"../utils/iframe":47,"../utils/random":50,"../utils/url":52,"../version":53,debug:55,events:3,inherits:57,json3:58}],23:[function(e,r,n){(function(t){"use strict";var n=e("inherits"),o=e("./lib/sender-receiver"),i=e("./receiver/jsonp"),s=e("./sender/jsonp");function a(e){if(!a.enabled())throw new Error("Transport created when disabled");o.call(this,e,"/jsonp",s,i)}n(a,o),a.enabled=function(){return!!t.document},a.transportName="jsonp-polling",a.roundTrips=1,a.needBody=!0,r.exports=a}).call(this,void 0!==t?t:"undefined"!=typeof self?self:"undefined"!=typeof window?window:{})},{"./lib/sender-receiver":28,"./receiver/jsonp":31,"./sender/jsonp":33,inherits:57}],24:[function(e,t,r){(function(r){"use strict";var n=e("inherits"),o=e("../../utils/url"),i=e("./sender-receiver"),s=function(){};function a(e,t,r,n){i.call(this,e,t,function(e){return function(t,r,n){s("create ajax sender",t,r);var i={};"string"==typeof r&&(i.headers={"Content-type":"text/plain"});var a=o.addPath(t,"/xhr_send"),c=new e("POST",a,r,i);return c.once("finish",function(e){if(s("finish",e),c=null,200!==e&&204!==e)return n(new Error("http status "+e));n()}),function(){s("abort"),c.close(),c=null;var e=new Error("Aborted");e.code=1e3,n(e)}}}(n),r,n)}"production"!==r.env.NODE_ENV&&(s=e("debug")("sockjs-client:ajax-based")),n(a,i),t.exports=a}).call(this,{env:{}})},{"../../utils/url":52,"./sender-receiver":28,debug:55,inherits:57}],25:[function(e,t,r){(function(r){"use strict";var n=e("inherits"),o=e("events").EventEmitter,i=function(){};function s(e,t){i(e),o.call(this),this.sendBuffer=[],this.sender=t,this.url=e}"production"!==r.env.NODE_ENV&&(i=e("debug")("sockjs-client:buffered-sender")),n(s,o),s.prototype.send=function(e){i("send",e),this.sendBuffer.push(e),this.sendStop||this.sendSchedule()},s.prototype.sendScheduleWait=function(){i("sendScheduleWait");var e,t=this;this.sendStop=function(){i("sendStop"),t.sendStop=null,clearTimeout(e)},e=setTimeout(function(){i("timeout"),t.sendStop=null,t.sendSchedule()},25)},s.prototype.sendSchedule=function(){i("sendSchedule",this.sendBuffer.length);var e=this;if(this.sendBuffer.length>0){var t="["+this.sendBuffer.join(",")+"]";this.sendStop=this.sender(this.url,t,function(t){e.sendStop=null,t?(i("error",t),e.emit("close",t.code||1006,"Sending error: "+t),e.close()):e.sendScheduleWait()}),this.sendBuffer=[]}},s.prototype._cleanup=function(){i("_cleanup"),this.removeAllListeners()},s.prototype.close=function(){i("close"),this._cleanup(),this.sendStop&&(this.sendStop(),this.sendStop=null)},t.exports=s}).call(this,{env:{}})},{debug:55,events:3,inherits:57}],26:[function(e,r,n){(function(t){"use strict";var n=e("inherits"),o=e("../iframe"),i=e("../../utils/object");r.exports=function(e){function r(t,r){o.call(this,e.transportName,t,r)}return n(r,o),r.enabled=function(r,n){if(!t.document)return!1;var s=i.extend({},n);return s.sameOrigin=!0,e.enabled(s)&&o.enabled()},r.transportName="iframe-"+e.transportName,r.needBody=!0,r.roundTrips=o.roundTrips+e.roundTrips-1,r.facadeTransport=e,r}}).call(this,void 0!==t?t:"undefined"!=typeof self?self:"undefined"!=typeof window?window:{})},{"../../utils/object":49,"../iframe":22,inherits:57}],27:[function(e,t,r){(function(r){"use strict";var n=e("inherits"),o=e("events").EventEmitter,i=function(){};function s(e,t,r){i(t),o.call(this),this.Receiver=e,this.receiveUrl=t,this.AjaxObject=r,this._scheduleReceiver()}"production"!==r.env.NODE_ENV&&(i=e("debug")("sockjs-client:polling")),n(s,o),s.prototype._scheduleReceiver=function(){i("_scheduleReceiver");var e=this,t=this.poll=new this.Receiver(this.receiveUrl,this.AjaxObject);t.on("message",function(t){i("message",t),e.emit("message",t)}),t.once("close",function(r,n){i("close",r,n,e.pollIsClosing),e.poll=t=null,e.pollIsClosing||("network"===n?e._scheduleReceiver():(e.emit("close",r||1006,n),e.removeAllListeners()))})},s.prototype.abort=function(){i("abort"),this.removeAllListeners(),this.pollIsClosing=!0,this.poll&&this.poll.abort()},t.exports=s}).call(this,{env:{}})},{debug:55,events:3,inherits:57}],28:[function(e,t,r){(function(r){"use strict";var n=e("inherits"),o=e("../../utils/url"),i=e("./buffered-sender"),s=e("./polling"),a=function(){};function c(e,t,r,n,c){var l=o.addPath(e,t);a(l);var u=this;i.call(this,e,r),this.poll=new s(n,l,c),this.poll.on("message",function(e){a("poll message",e),u.emit("message",e)}),this.poll.once("close",function(e,t){a("poll close",e,t),u.poll=null,u.emit("close",e,t),u.close()})}"production"!==r.env.NODE_ENV&&(a=e("debug")("sockjs-client:sender-receiver")),n(c,i),c.prototype.close=function(){i.prototype.close.call(this),a("close"),this.removeAllListeners(),this.poll&&(this.poll.abort(),this.poll=null)},t.exports=c}).call(this,{env:{}})},{"../../utils/url":52,"./buffered-sender":25,"./polling":27,debug:55,inherits:57}],29:[function(e,t,r){(function(r){"use strict";var n=e("inherits"),o=e("events").EventEmitter,i=e("eventsource"),s=function(){};function a(e){s(e),o.call(this);var t=this,r=this.es=new i(e);r.onmessage=function(e){s("message",e.data),t.emit("message",decodeURI(e.data))},r.onerror=function(e){s("error",r.readyState,e);var n=2!==r.readyState?"network":"permanent";t._cleanup(),t._close(n)}}"production"!==r.env.NODE_ENV&&(s=e("debug")("sockjs-client:receiver:eventsource")),n(a,o),a.prototype.abort=function(){s("abort"),this._cleanup(),this._close("user")},a.prototype._cleanup=function(){s("cleanup");var e=this.es;e&&(e.onmessage=e.onerror=null,e.close(),this.es=null)},a.prototype._close=function(e){s("close",e);var t=this;setTimeout(function(){t.emit("close",null,e),t.removeAllListeners()},200)},t.exports=a}).call(this,{env:{}})},{debug:55,events:3,eventsource:18,inherits:57}],30:[function(e,r,n){(function(t,n){"use strict";var o=e("inherits"),i=e("../../utils/iframe"),s=e("../../utils/url"),a=e("events").EventEmitter,c=e("../../utils/random"),l=function(){};function u(e){l(e),a.call(this);var t=this;i.polluteGlobalNamespace(),this.id="a"+c.string(6),e=s.addQuery(e,"c="+decodeURIComponent(i.WPrefix+"."+this.id)),l("using htmlfile",u.htmlfileEnabled);var r=u.htmlfileEnabled?i.createHtmlfile:i.createIframe;n[i.WPrefix][this.id]={start:function(){l("start"),t.iframeObj.loaded()},message:function(e){l("message",e),t.emit("message",e)},stop:function(){l("stop"),t._cleanup(),t._close("network")}},this.iframeObj=r(e,function(){l("callback"),t._cleanup(),t._close("permanent")})}"production"!==t.env.NODE_ENV&&(l=e("debug")("sockjs-client:receiver:htmlfile")),o(u,a),u.prototype.abort=function(){l("abort"),this._cleanup(),this._close("user")},u.prototype._cleanup=function(){l("_cleanup"),this.iframeObj&&(this.iframeObj.cleanup(),this.iframeObj=null),delete n[i.WPrefix][this.id]},u.prototype._close=function(e){l("_close",e),this.emit("close",null,e),this.removeAllListeners()},u.htmlfileEnabled=!1;var d=["Active"].concat("Object").join("X");if(d in n)try{u.htmlfileEnabled=!!new n[d]("htmlfile")}catch(e){}u.enabled=u.htmlfileEnabled||i.iframeEnabled,r.exports=u}).call(this,{env:{}},void 0!==t?t:"undefined"!=typeof self?self:"undefined"!=typeof window?window:{})},{"../../utils/iframe":47,"../../utils/random":50,"../../utils/url":52,debug:55,events:3,inherits:57}],31:[function(e,r,n){(function(t,n){"use strict";var o=e("../../utils/iframe"),i=e("../../utils/random"),s=e("../../utils/browser"),a=e("../../utils/url"),c=e("inherits"),l=e("events").EventEmitter,u=function(){};function d(e){u(e);var t=this;l.call(this),o.polluteGlobalNamespace(),this.id="a"+i.string(6);var r=a.addQuery(e,"c="+encodeURIComponent(o.WPrefix+"."+this.id));n[o.WPrefix][this.id]=this._callback.bind(this),this._createScript(r),this.timeoutId=setTimeout(function(){u("timeout"),t._abort(new Error("JSONP script loaded abnormally (timeout)"))},d.timeout)}"production"!==t.env.NODE_ENV&&(u=e("debug")("sockjs-client:receiver:jsonp")),c(d,l),d.prototype.abort=function(){if(u("abort"),n[o.WPrefix][this.id]){var e=new Error("JSONP user aborted read");e.code=1e3,this._abort(e)}},d.timeout=35e3,d.scriptErrorTimeout=1e3,d.prototype._callback=function(e){u("_callback",e),this._cleanup(),this.aborting||(e&&(u("message",e),this.emit("message",e)),this.emit("close",null,"network"),this.removeAllListeners())},d.prototype._abort=function(e){u("_abort",e),this._cleanup(),this.aborting=!0,this.emit("close",e.code,e.message),this.removeAllListeners()},d.prototype._cleanup=function(){if(u("_cleanup"),clearTimeout(this.timeoutId),this.script2&&(this.script2.parentNode.removeChild(this.script2),this.script2=null),this.script){var e=this.script;e.parentNode.removeChild(e),e.onreadystatechange=e.onerror=e.onload=e.onclick=null,this.script=null}delete n[o.WPrefix][this.id]},d.prototype._scriptError=function(){u("_scriptError");var e=this;this.errorTimer||(this.errorTimer=setTimeout(function(){e.loadedOkay||e._abort(new Error("JSONP script loaded abnormally (onerror)"))},d.scriptErrorTimeout))},d.prototype._createScript=function(e){u("_createScript",e);var t,r=this,o=this.script=n.document.createElement("script");if(o.id="a"+i.string(8),o.src=e,o.type="text/javascript",o.charset="UTF-8",o.onerror=this._scriptError.bind(this),o.onload=function(){u("onload"),r._abort(new Error("JSONP script loaded abnormally (onload)"))},o.onreadystatechange=function(){if(u("onreadystatechange",o.readyState),/loaded|closed/.test(o.readyState)){if(o&&o.htmlFor&&o.onclick){r.loadedOkay=!0;try{o.onclick()}catch(e){}}o&&r._abort(new Error("JSONP script loaded abnormally (onreadystatechange)"))}},void 0===o.async&&n.document.attachEvent)if(s.isOpera())(t=this.script2=n.document.createElement("script")).text="try{var a = document.getElementById('"+o.id+"'); if(a)a.onerror();}catch(x){};",o.async=t.async=!1;else{try{o.htmlFor=o.id,o.event="onclick"}catch(e){}o.async=!0}void 0!==o.async&&(o.async=!0);var a=n.document.getElementsByTagName("head")[0];a.insertBefore(o,a.firstChild),t&&a.insertBefore(t,a.firstChild)},r.exports=d}).call(this,{env:{}},void 0!==t?t:"undefined"!=typeof self?self:"undefined"!=typeof window?window:{})},{"../../utils/browser":44,"../../utils/iframe":47,"../../utils/random":50,"../../utils/url":52,debug:55,events:3,inherits:57}],32:[function(e,t,r){(function(r){"use strict";var n=e("inherits"),o=e("events").EventEmitter,i=function(){};function s(e,t){i(e),o.call(this);var r=this;this.bufferPosition=0,this.xo=new t("POST",e,null),this.xo.on("chunk",this._chunkHandler.bind(this)),this.xo.once("finish",function(e,t){i("finish",e,t),r._chunkHandler(e,t),r.xo=null;var n=200===e?"network":"permanent";i("close",n),r.emit("close",null,n),r._cleanup()})}"production"!==r.env.NODE_ENV&&(i=e("debug")("sockjs-client:receiver:xhr")),n(s,o),s.prototype._chunkHandler=function(e,t){if(i("_chunkHandler",e),200===e&&t)for(var r=-1;;this.bufferPosition+=r+1){var n=t.slice(this.bufferPosition);if(-1===(r=n.indexOf("\n")))break;var o=n.slice(0,r);o&&(i("message",o),this.emit("message",o))}},s.prototype._cleanup=function(){i("_cleanup"),this.removeAllListeners()},s.prototype.abort=function(){i("abort"),this.xo&&(this.xo.close(),i("close"),this.emit("close",null,"user"),this.xo=null),this._cleanup()},t.exports=s}).call(this,{env:{}})},{debug:55,events:3,inherits:57}],33:[function(e,r,n){(function(t,n){"use strict";var o,i,s=e("../../utils/random"),a=e("../../utils/url"),c=function(){};"production"!==t.env.NODE_ENV&&(c=e("debug")("sockjs-client:sender:jsonp")),r.exports=function(e,t,r){c(e,t),o||(c("createForm"),(o=n.document.createElement("form")).style.display="none",o.style.position="absolute",o.method="POST",o.enctype="application/x-www-form-urlencoded",o.acceptCharset="UTF-8",(i=n.document.createElement("textarea")).name="d",o.appendChild(i),n.document.body.appendChild(o));var l="a"+s.string(8);o.target=l,o.action=a.addQuery(a.addPath(e,"/jsonp_send"),"i="+l);var u=function(e){c("createIframe",e);try{return n.document.createElement('<iframe name="'+e+'">')}catch(r){var t=n.document.createElement("iframe");return t.name=e,t}}(l);u.id=l,u.style.display="none",o.appendChild(u);try{i.value=t}catch(e){}o.submit();var d=function(e){c("completed",l,e),u.onerror&&(u.onreadystatechange=u.onerror=u.onload=null,setTimeout(function(){c("cleaning up",l),u.parentNode.removeChild(u),u=null},500),i.value="",r(e))};return u.onerror=function(){c("onerror",l),d()},u.onload=function(){c("onload",l),d()},u.onreadystatechange=function(e){c("onreadystatechange",l,u.readyState,e),"complete"===u.readyState&&d()},function(){c("aborted",l),d(new Error("Aborted"))}}}).call(this,{env:{}},void 0!==t?t:"undefined"!=typeof self?self:"undefined"!=typeof window?window:{})},{"../../utils/random":50,"../../utils/url":52,debug:55}],34:[function(e,r,n){(function(t,n){"use strict";var o=e("events").EventEmitter,i=e("inherits"),s=e("../../utils/event"),a=e("../../utils/browser"),c=e("../../utils/url"),l=function(){};function u(e,t,r){l(e,t);var n=this;o.call(this),setTimeout(function(){n._start(e,t,r)},0)}"production"!==t.env.NODE_ENV&&(l=e("debug")("sockjs-client:sender:xdr")),i(u,o),u.prototype._start=function(e,t,r){l("_start");var o=this,i=new n.XDomainRequest;t=c.addQuery(t,"t="+ +new Date),i.onerror=function(){l("onerror"),o._error()},i.ontimeout=function(){l("ontimeout"),o._error()},i.onprogress=function(){l("progress",i.responseText),o.emit("chunk",200,i.responseText)},i.onload=function(){l("load"),o.emit("finish",200,i.responseText),o._cleanup(!1)},this.xdr=i,this.unloadRef=s.unloadAdd(function(){o._cleanup(!0)});try{this.xdr.open(e,t),this.timeout&&(this.xdr.timeout=this.timeout),this.xdr.send(r)}catch(e){this._error()}},u.prototype._error=function(){this.emit("finish",0,""),this._cleanup(!1)},u.prototype._cleanup=function(e){if(l("cleanup",e),this.xdr){if(this.removeAllListeners(),s.unloadDel(this.unloadRef),this.xdr.ontimeout=this.xdr.onerror=this.xdr.onprogress=this.xdr.onload=null,e)try{this.xdr.abort()}catch(e){}this.unloadRef=this.xdr=null}},u.prototype.close=function(){l("close"),this._cleanup(!0)},u.enabled=!(!n.XDomainRequest||!a.hasDomain()),r.exports=u}).call(this,{env:{}},void 0!==t?t:"undefined"!=typeof self?self:"undefined"!=typeof window?window:{})},{"../../utils/browser":44,"../../utils/event":46,"../../utils/url":52,debug:55,events:3,inherits:57}],35:[function(e,t,r){"use strict";var n=e("inherits"),o=e("../driver/xhr");function i(e,t,r,n){o.call(this,e,t,r,n)}n(i,o),i.enabled=o.enabled&&o.supportsCORS,t.exports=i},{"../driver/xhr":17,inherits:57}],36:[function(e,t,r){"use strict";var n=e("events").EventEmitter,o=e("inherits");function i(){var e=this;n.call(this),this.to=setTimeout(function(){e.emit("finish",200,"{}")},i.timeout)}o(i,n),i.prototype.close=function(){clearTimeout(this.to)},i.timeout=2e3,t.exports=i},{events:3,inherits:57}],37:[function(e,t,r){"use strict";var n=e("inherits"),o=e("../driver/xhr");function i(e,t,r){o.call(this,e,t,r,{noCredentials:!0})}n(i,o),i.enabled=o.enabled,t.exports=i},{"../driver/xhr":17,inherits:57}],38:[function(e,t,r){(function(r){"use strict";var n=e("../utils/event"),o=e("../utils/url"),i=e("inherits"),s=e("events").EventEmitter,a=e("./driver/websocket"),c=function(){};function l(e,t,r){if(!l.enabled())throw new Error("Transport created when disabled");s.call(this),c("constructor",e);var i=this,u=o.addPath(e,"/websocket");u="https"===u.slice(0,5)?"wss"+u.slice(5):"ws"+u.slice(4),this.url=u,this.ws=new a(this.url,[],r),this.ws.onmessage=function(e){c("message event",e.data),i.emit("message",e.data)},this.unloadRef=n.unloadAdd(function(){c("unload"),i.ws.close()}),this.ws.onclose=function(e){c("close event",e.code,e.reason),i.emit("close",e.code,e.reason),i._cleanup()},this.ws.onerror=function(e){c("error event",e),i.emit("close",1006,"WebSocket connection broken"),i._cleanup()}}"production"!==r.env.NODE_ENV&&(c=e("debug")("sockjs-client:websocket")),i(l,s),l.prototype.send=function(e){var t="["+e+"]";c("send",t),this.ws.send(t)},l.prototype.close=function(){c("close");var e=this.ws;this._cleanup(),e&&e.close()},l.prototype._cleanup=function(){c("_cleanup");var e=this.ws;e&&(e.onmessage=e.onclose=e.onerror=null),n.unloadDel(this.unloadRef),this.unloadRef=this.ws=null,this.removeAllListeners()},l.enabled=function(){return c("enabled"),!!a},l.transportName="websocket",l.roundTrips=2,t.exports=l}).call(this,{env:{}})},{"../utils/event":46,"../utils/url":52,"./driver/websocket":19,debug:55,events:3,inherits:57}],39:[function(e,t,r){"use strict";var n=e("inherits"),o=e("./lib/ajax-based"),i=e("./xdr-streaming"),s=e("./receiver/xhr"),a=e("./sender/xdr");function c(e){if(!a.enabled)throw new Error("Transport created when disabled");o.call(this,e,"/xhr",s,a)}n(c,o),c.enabled=i.enabled,c.transportName="xdr-polling",c.roundTrips=2,t.exports=c},{"./lib/ajax-based":24,"./receiver/xhr":32,"./sender/xdr":34,"./xdr-streaming":40,inherits:57}],40:[function(e,t,r){"use strict";var n=e("inherits"),o=e("./lib/ajax-based"),i=e("./receiver/xhr"),s=e("./sender/xdr");function a(e){if(!s.enabled)throw new Error("Transport created when disabled");o.call(this,e,"/xhr_streaming",i,s)}n(a,o),a.enabled=function(e){return!e.cookie_needed&&!e.nullOrigin&&s.enabled&&e.sameScheme},a.transportName="xdr-streaming",a.roundTrips=2,t.exports=a},{"./lib/ajax-based":24,"./receiver/xhr":32,"./sender/xdr":34,inherits:57}],41:[function(e,t,r){"use strict";var n=e("inherits"),o=e("./lib/ajax-based"),i=e("./receiver/xhr"),s=e("./sender/xhr-cors"),a=e("./sender/xhr-local");function c(e){if(!a.enabled&&!s.enabled)throw new Error("Transport created when disabled");o.call(this,e,"/xhr",i,s)}n(c,o),c.enabled=function(e){return!e.nullOrigin&&(!(!a.enabled||!e.sameOrigin)||s.enabled)},c.transportName="xhr-polling",c.roundTrips=2,t.exports=c},{"./lib/ajax-based":24,"./receiver/xhr":32,"./sender/xhr-cors":35,"./sender/xhr-local":37,inherits:57}],42:[function(e,r,n){(function(t){"use strict";var n=e("inherits"),o=e("./lib/ajax-based"),i=e("./receiver/xhr"),s=e("./sender/xhr-cors"),a=e("./sender/xhr-local"),c=e("../utils/browser");function l(e){if(!a.enabled&&!s.enabled)throw new Error("Transport created when disabled");o.call(this,e,"/xhr_streaming",i,s)}n(l,o),l.enabled=function(e){return!e.nullOrigin&&!c.isOpera()&&s.enabled},l.transportName="xhr-streaming",l.roundTrips=2,l.needBody=!!t.document,r.exports=l}).call(this,void 0!==t?t:"undefined"!=typeof self?self:"undefined"!=typeof window?window:{})},{"../utils/browser":44,"./lib/ajax-based":24,"./receiver/xhr":32,"./sender/xhr-cors":35,"./sender/xhr-local":37,inherits:57}],43:[function(e,r,n){(function(e){"use strict";e.crypto&&e.crypto.getRandomValues?r.exports.randomBytes=function(t){var r=new Uint8Array(t);return e.crypto.getRandomValues(r),r}:r.exports.randomBytes=function(e){for(var t=new Array(e),r=0;r<e;r++)t[r]=Math.floor(256*Math.random());return t}}).call(this,void 0!==t?t:"undefined"!=typeof self?self:"undefined"!=typeof window?window:{})},{}],44:[function(e,r,n){(function(e){"use strict";r.exports={isOpera:function(){return e.navigator&&/opera/i.test(e.navigator.userAgent)},isKonqueror:function(){return e.navigator&&/konqueror/i.test(e.navigator.userAgent)},hasDomain:function(){if(!e.document)return!0;try{return!!e.document.domain}catch(e){return!1}}}}).call(this,void 0!==t?t:"undefined"!=typeof self?self:"undefined"!=typeof window?window:{})},{}],45:[function(e,t,r){"use strict";var n,o=e("json3"),i=/[\x00-\x1f\ud800-\udfff\ufffe\uffff\u0300-\u0333\u033d-\u0346\u034a-\u034c\u0350-\u0352\u0357-\u0358\u035c-\u0362\u0374\u037e\u0387\u0591-\u05af\u05c4\u0610-\u0617\u0653-\u0654\u0657-\u065b\u065d-\u065e\u06df-\u06e2\u06eb-\u06ec\u0730\u0732-\u0733\u0735-\u0736\u073a\u073d\u073f-\u0741\u0743\u0745\u0747\u07eb-\u07f1\u0951\u0958-\u095f\u09dc-\u09dd\u09df\u0a33\u0a36\u0a59-\u0a5b\u0a5e\u0b5c-\u0b5d\u0e38-\u0e39\u0f43\u0f4d\u0f52\u0f57\u0f5c\u0f69\u0f72-\u0f76\u0f78\u0f80-\u0f83\u0f93\u0f9d\u0fa2\u0fa7\u0fac\u0fb9\u1939-\u193a\u1a17\u1b6b\u1cda-\u1cdb\u1dc0-\u1dcf\u1dfc\u1dfe\u1f71\u1f73\u1f75\u1f77\u1f79\u1f7b\u1f7d\u1fbb\u1fbe\u1fc9\u1fcb\u1fd3\u1fdb\u1fe3\u1feb\u1fee-\u1fef\u1ff9\u1ffb\u1ffd\u2000-\u2001\u20d0-\u20d1\u20d4-\u20d7\u20e7-\u20e9\u2126\u212a-\u212b\u2329-\u232a\u2adc\u302b-\u302c\uaab2-\uaab3\uf900-\ufa0d\ufa10\ufa12\ufa15-\ufa1e\ufa20\ufa22\ufa25-\ufa26\ufa2a-\ufa2d\ufa30-\ufa6d\ufa70-\ufad9\ufb1d\ufb1f\ufb2a-\ufb36\ufb38-\ufb3c\ufb3e\ufb40-\ufb41\ufb43-\ufb44\ufb46-\ufb4e\ufff0-\uffff]/g;t.exports={quote:function(e){var t=o.stringify(e);return i.lastIndex=0,i.test(t)?(n||(n=function(e){var t,r={},n=[];for(t=0;t<65536;t++)n.push(String.fromCharCode(t));return e.lastIndex=0,n.join("").replace(e,function(e){return r[e]="\\u"+("0000"+e.charCodeAt(0).toString(16)).slice(-4),""}),e.lastIndex=0,r}(i)),t.replace(i,function(e){return n[e]})):t}}},{json3:58}],46:[function(e,r,n){(function(t){"use strict";var n=e("./random"),o={},i=!1,s=t.chrome&&t.chrome.app&&t.chrome.app.runtime;r.exports={attachEvent:function(e,r){void 0!==t.addEventListener?t.addEventListener(e,r,!1):t.document&&t.attachEvent&&(t.document.attachEvent("on"+e,r),t.attachEvent("on"+e,r))},detachEvent:function(e,r){void 0!==t.addEventListener?t.removeEventListener(e,r,!1):t.document&&t.detachEvent&&(t.document.detachEvent("on"+e,r),t.detachEvent("on"+e,r))},unloadAdd:function(e){if(s)return null;var t=n.string(8);return o[t]=e,i&&setTimeout(this.triggerUnloadCallbacks,0),t},unloadDel:function(e){e in o&&delete o[e]},triggerUnloadCallbacks:function(){for(var e in o)o[e](),delete o[e]}},s||r.exports.attachEvent("unload",function(){i||(i=!0,r.exports.triggerUnloadCallbacks())})}).call(this,void 0!==t?t:"undefined"!=typeof self?self:"undefined"!=typeof window?window:{})},{"./random":50}],47:[function(e,r,n){(function(t,n){"use strict";var o=e("./event"),i=e("json3"),s=e("./browser"),a=function(){};"production"!==t.env.NODE_ENV&&(a=e("debug")("sockjs-client:utils:iframe")),r.exports={WPrefix:"_jp",currentWindowId:null,polluteGlobalNamespace:function(){r.exports.WPrefix in n||(n[r.exports.WPrefix]={})},postMessage:function(e,t){n.parent!==n?n.parent.postMessage(i.stringify({windowId:r.exports.currentWindowId,type:e,data:t||""}),"*"):a("Cannot postMessage, no parent window.",e,t)},createIframe:function(e,t){var r,i,s=n.document.createElement("iframe"),c=function(){a("unattach"),clearTimeout(r);try{s.onload=null}catch(e){}s.onerror=null},l=function(){a("cleanup"),s&&(c(),setTimeout(function(){s&&s.parentNode.removeChild(s),s=null},0),o.unloadDel(i))},u=function(e){a("onerror",e),s&&(l(),t(e))};return s.src=e,s.style.display="none",s.style.position="absolute",s.onerror=function(){u("onerror")},s.onload=function(){a("onload"),clearTimeout(r),r=setTimeout(function(){u("onload timeout")},2e3)},n.document.body.appendChild(s),r=setTimeout(function(){u("timeout")},15e3),i=o.unloadAdd(l),{post:function(e,t){a("post",e,t);try{setTimeout(function(){s&&s.contentWindow&&s.contentWindow.postMessage(e,t)},0)}catch(e){}},cleanup:l,loaded:c}},createHtmlfile:function(e,t){var i,s,c,l=["Active"].concat("Object").join("X"),u=new n[l]("htmlfile"),d=function(){clearTimeout(i),c.onerror=null},p=function(){u&&(d(),o.unloadDel(s),c.parentNode.removeChild(c),c=u=null,CollectGarbage())},f=function(e){a("onerror",e),u&&(p(),t(e))};u.open(),u.write('<html><script>document.domain="'+n.document.domain+'";<\/script></html>'),u.close(),u.parentWindow[r.exports.WPrefix]=n[r.exports.WPrefix];var h=u.createElement("div");return u.body.appendChild(h),c=u.createElement("iframe"),h.appendChild(c),c.src=e,c.onerror=function(){f("onerror")},i=setTimeout(function(){f("timeout")},15e3),s=o.unloadAdd(p),{post:function(e,t){try{setTimeout(function(){c&&c.contentWindow&&c.contentWindow.postMessage(e,t)},0)}catch(e){}},cleanup:p,loaded:d}}},r.exports.iframeEnabled=!1,n.document&&(r.exports.iframeEnabled=("function"==typeof n.postMessage||"object"==typeof n.postMessage)&&!s.isKonqueror())}).call(this,{env:{}},void 0!==t?t:"undefined"!=typeof self?self:"undefined"!=typeof window?window:{})},{"./browser":44,"./event":46,debug:55,json3:58}],48:[function(e,r,n){(function(e){"use strict";var t={};["log","debug","warn"].forEach(function(r){var n;try{n=e.console&&e.console[r]&&e.console[r].apply}catch(e){}t[r]=n?function(){return e.console[r].apply(e.console,arguments)}:"log"===r?function(){}:t.log}),r.exports=t}).call(this,void 0!==t?t:"undefined"!=typeof self?self:"undefined"!=typeof window?window:{})},{}],49:[function(e,t,r){"use strict";t.exports={isObject:function(e){var t=typeof e;return"function"===t||"object"===t&&!!e},extend:function(e){if(!this.isObject(e))return e;for(var t,r,n=1,o=arguments.length;n<o;n++)for(r in t=arguments[n])Object.prototype.hasOwnProperty.call(t,r)&&(e[r]=t[r]);return e}}},{}],50:[function(e,t,r){"use strict";var n=e("crypto");t.exports={string:function(e){for(var t="abcdefghijklmnopqrstuvwxyz012345".length,r=n.randomBytes(e),o=[],i=0;i<e;i++)o.push("abcdefghijklmnopqrstuvwxyz012345".substr(r[i]%t,1));return o.join("")},number:function(e){return Math.floor(Math.random()*e)},numberString:function(e){var t=(""+(e-1)).length,r=new Array(t+1).join("0");return(r+this.number(e)).slice(-t)}}},{crypto:43}],51:[function(e,t,r){(function(r){"use strict";var n=function(){};"production"!==r.env.NODE_ENV&&(n=e("debug")("sockjs-client:utils:transport")),t.exports=function(e){return{filterToEnabled:function(t,r){var o={main:[],facade:[]};return t?"string"==typeof t&&(t=[t]):t=[],e.forEach(function(e){e&&("websocket"!==e.transportName||!1!==r.websocket?t.length&&-1===t.indexOf(e.transportName)?n("not in whitelist",e.transportName):e.enabled(r)?(n("enabled",e.transportName),o.main.push(e),e.facadeTransport&&o.facade.push(e.facadeTransport)):n("disabled",e.transportName):n("disabled from server","websocket"))}),o}}}}).call(this,{env:{}})},{debug:55}],52:[function(e,t,r){(function(r){"use strict";var n=e("url-parse"),o=function(){};"production"!==r.env.NODE_ENV&&(o=e("debug")("sockjs-client:utils:url")),t.exports={getOrigin:function(e){if(!e)return null;var t=new n(e);if("file:"===t.protocol)return null;var r=t.port;return r||(r="https:"===t.protocol?"443":"80"),t.protocol+"//"+t.hostname+":"+r},isOriginEqual:function(e,t){var r=this.getOrigin(e)===this.getOrigin(t);return o("same",e,t,r),r},isSchemeEqual:function(e,t){return e.split(":")[0]===t.split(":")[0]},addPath:function(e,t){var r=e.split("?");return r[0]+t+(r[1]?"?"+r[1]:"")},addQuery:function(e,t){return e+(-1===e.indexOf("?")?"?"+t:"&"+t)}}}).call(this,{env:{}})},{debug:55,"url-parse":61}],53:[function(e,t,r){t.exports="1.1.4"},{}],54:[function(e,t,r){var n=1e3,o=60*n,i=60*o,s=24*i,a=365.25*s;function c(e,t,r){if(!(e<t))return e<1.5*t?Math.floor(e/t)+" "+r:Math.ceil(e/t)+" "+r+"s"}t.exports=function(e,t){t=t||{};var r,l=typeof e;if("string"===l&&e.length>0)return function(e){if(!((e=String(e)).length>1e4)){var t=/^((?:\d+)?\.?\d+) *(milliseconds?|msecs?|ms|seconds?|secs?|s|minutes?|mins?|m|hours?|hrs?|h|days?|d|years?|yrs?|y)?$/i.exec(e);if(t){var r=parseFloat(t[1]);switch((t[2]||"ms").toLowerCase()){case"years":case"year":case"yrs":case"yr":case"y":return r*a;case"days":case"day":case"d":return r*s;case"hours":case"hour":case"hrs":case"hr":case"h":return r*i;case"minutes":case"minute":case"mins":case"min":case"m":return r*o;case"seconds":case"second":case"secs":case"sec":case"s":return r*n;case"milliseconds":case"millisecond":case"msecs":case"msec":case"ms":return r;default:return}}}}(e);if("number"===l&&!1===isNaN(e))return t.long?c(r=e,s,"day")||c(r,i,"hour")||c(r,o,"minute")||c(r,n,"second")||r+" ms":function(e){return e>=s?Math.round(e/s)+"d":e>=i?Math.round(e/i)+"h":e>=o?Math.round(e/o)+"m":e>=n?Math.round(e/n)+"s":e+"ms"}(e);throw new Error("val is not a non-empty string or a valid number. val="+JSON.stringify(e))}},{}],55:[function(e,t,r){(function(n){function o(){var e;try{e=r.storage.debug}catch(e){}return!e&&void 0!==n&&"env"in n&&(e=n.env.DEBUG),e}(r=t.exports=e("./debug")).log=function(){return"object"==typeof console&&console.log&&Function.prototype.apply.call(console.log,console,arguments)},r.formatArgs=function(e){var t=this.useColors;if(e[0]=(t?"%c":"")+this.namespace+(t?" %c":" ")+e[0]+(t?"%c ":" ")+"+"+r.humanize(this.diff),t){var n="color: "+this.color;e.splice(1,0,n,"color: inherit");var o=0,i=0;e[0].replace(/%[a-zA-Z%]/g,function(e){"%%"!==e&&"%c"===e&&(i=++o)}),e.splice(i,0,n)}},r.save=function(e){try{null==e?r.storage.removeItem("debug"):r.storage.debug=e}catch(e){}},r.load=o,r.useColors=function(){return!("undefined"==typeof window||!window.process||"renderer"!==window.process.type)||"undefined"!=typeof document&&document&&document.documentElement&&document.documentElement.style&&document.documentElement.style.WebkitAppearance||"undefined"!=typeof window&&window&&window.console&&(window.console.firebug||window.console.exception&&window.console.table)||"undefined"!=typeof navigator&&navigator&&navigator.userAgent&&navigator.userAgent.toLowerCase().match(/firefox\/(\d+)/)&&parseInt(RegExp.$1,10)>=31||"undefined"!=typeof navigator&&navigator&&navigator.userAgent&&navigator.userAgent.toLowerCase().match(/applewebkit\/(\d+)/)},r.storage="undefined"!=typeof chrome&&void 0!==chrome.storage?chrome.storage.local:function(){try{return window.localStorage}catch(e){}}(),r.colors=["lightseagreen","forestgreen","goldenrod","dodgerblue","darkorchid","crimson"],r.formatters.j=function(e){try{return JSON.stringify(e)}catch(e){return"[UnexpectedJSONParseError]: "+e.message}},r.enable(o())}).call(this,{env:{}})},{"./debug":56}],56:[function(e,t,r){var n;function o(e){function t(){if(t.enabled){var e=t,o=+new Date,i=o-(n||o);e.diff=i,e.prev=n,e.curr=o,n=o;for(var s=new Array(arguments.length),a=0;a<s.length;a++)s[a]=arguments[a];s[0]=r.coerce(s[0]),"string"!=typeof s[0]&&s.unshift("%O");var c=0;s[0]=s[0].replace(/%([a-zA-Z%])/g,function(t,n){if("%%"===t)return t;c++;var o=r.formatters[n];if("function"==typeof o){var i=s[c];t=o.call(e,i),s.splice(c,1),c--}return t}),r.formatArgs.call(e,s);var l=t.log||r.log||console.log.bind(console);l.apply(e,s)}}return t.namespace=e,t.enabled=r.enabled(e),t.useColors=r.useColors(),t.color=function(e){var t,n=0;for(t in e)n=(n<<5)-n+e.charCodeAt(t),n|=0;return r.colors[Math.abs(n)%r.colors.length]}(e),"function"==typeof r.init&&r.init(t),t}(r=t.exports=o.debug=o.default=o).coerce=function(e){return e instanceof Error?e.stack||e.message:e},r.disable=function(){r.enable("")},r.enable=function(e){r.save(e),r.names=[],r.skips=[];for(var t=("string"==typeof e?e:"").split(/[\s,]+/),n=t.length,o=0;o<n;o++)t[o]&&("-"===(e=t[o].replace(/\*/g,".*?"))[0]?r.skips.push(new RegExp("^"+e.substr(1)+"$")):r.names.push(new RegExp("^"+e+"$")))},r.enabled=function(e){var t,n;for(t=0,n=r.skips.length;t<n;t++)if(r.skips[t].test(e))return!1;for(t=0,n=r.names.length;t<n;t++)if(r.names[t].test(e))return!0;return!1},r.humanize=e("ms"),r.names=[],r.skips=[],r.formatters={}},{ms:54}],57:[function(e,t,r){"function"==typeof Object.create?t.exports=function(e,t){e.super_=t,e.prototype=Object.create(t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}})}:t.exports=function(e,t){e.super_=t;var r=function(){};r.prototype=t.prototype,e.prototype=new r,e.prototype.constructor=e}},{}],58:[function(e,r,n){(function(e){(function(){var t={function:!0,object:!0},o=t[typeof n]&&n&&!n.nodeType&&n,i=t[typeof window]&&window||this,s=o&&t[typeof r]&&r&&!r.nodeType&&"object"==typeof e&&e;function a(e,r){e||(e=i.Object()),r||(r=i.Object());var n=e.Number||i.Number,o=e.String||i.String,s=e.Object||i.Object,c=e.Date||i.Date,l=e.SyntaxError||i.SyntaxError,u=e.TypeError||i.TypeError,d=e.Math||i.Math,p=e.JSON||i.JSON;"object"==typeof p&&p&&(r.stringify=p.stringify,r.parse=p.parse);var f,h,v,m=s.prototype,g=m.toString,b=new c(-0xc782b5b800cec);try{b=-109252==b.getUTCFullYear()&&0===b.getUTCMonth()&&1===b.getUTCDate()&&10==b.getUTCHours()&&37==b.getUTCMinutes()&&6==b.getUTCSeconds()&&708==b.getUTCMilliseconds()}catch(e){}function y(e){if(y[e]!==v)return y[e];var t;if("bug-string-char-index"==e)t="a"!="a"[0];else if("json"==e)t=y("json-stringify")&&y("json-parse");else{var i,s='{"a":[1,true,false,null,"\\u0000\\b\\n\\f\\r\\t"]}';if("json-stringify"==e){var a=r.stringify,l="function"==typeof a&&b;if(l){(i=function(){return 1}).toJSON=i;try{l="0"===a(0)&&"0"===a(new n)&&'""'==a(new o)&&a(g)===v&&a(v)===v&&a()===v&&"1"===a(i)&&"[1]"==a([i])&&"[null]"==a([v])&&"null"==a(null)&&"[null,null,null]"==a([v,g,null])&&a({a:[i,!0,!1,null,"\0\b\n\f\r\t"]})==s&&"1"===a(null,i)&&"[\n 1,\n 2\n]"==a([1,2],null,1)&&'"-271821-04-20T00:00:00.000Z"'==a(new c(-864e13))&&'"+275760-09-13T00:00:00.000Z"'==a(new c(864e13))&&'"-000001-01-01T00:00:00.000Z"'==a(new c(-621987552e5))&&'"1969-12-31T23:59:59.999Z"'==a(new c(-1))}catch(e){l=!1}}t=l}if("json-parse"==e){var u=r.parse;if("function"==typeof u)try{if(0===u("0")&&!u(!1)){var d=5==(i=u(s)).a.length&&1===i.a[0];if(d){try{d=!u('"\t"')}catch(e){}if(d)try{d=1!==u("01")}catch(e){}if(d)try{d=1!==u("1.")}catch(e){}}}}catch(e){d=!1}t=d}}return y[e]=!!t}if(!y("json")){var w=y("bug-string-char-index");if(!b)var x=d.floor,E=[0,31,59,90,120,151,181,212,243,273,304,334],A=function(e,t){return E[t]+365*(e-1970)+x((e-1969+(t=+(t>1)))/4)-x((e-1901+t)/100)+x((e-1601+t)/400)};if((f=m.hasOwnProperty)||(f=function(e){var t,r={};return(r.__proto__=null,r.__proto__={toString:1},r).toString!=g?f=function(e){var t=this.__proto__,r=e in(this.__proto__=null,this);return this.__proto__=t,r}:(t=r.constructor,f=function(e){var r=(this.constructor||t).prototype;return e in this&&!(e in r&&this[e]===r[e])}),r=null,f.call(this,e)}),h=function(e,r){var n,o,i,s=0;for(i in(n=function(){this.valueOf=0}).prototype.valueOf=0,o=new n)f.call(o,i)&&s++;return n=o=null,s?h=2==s?function(e,t){var r,n={},o="[object Function]"==g.call(e);for(r in e)o&&"prototype"==r||f.call(n,r)||!(n[r]=1)||!f.call(e,r)||t(r)}:function(e,t){var r,n,o="[object Function]"==g.call(e);for(r in e)o&&"prototype"==r||!f.call(e,r)||(n="constructor"===r)||t(r);(n||f.call(e,r="constructor"))&&t(r)}:(o=["valueOf","toString","toLocaleString","propertyIsEnumerable","isPrototypeOf","hasOwnProperty","constructor"],h=function(e,r){var n,i,s="[object Function]"==g.call(e),a=!s&&"function"!=typeof e.constructor&&t[typeof e.hasOwnProperty]&&e.hasOwnProperty||f;for(n in e)s&&"prototype"==n||!a.call(e,n)||r(n);for(i=o.length;n=o[--i];a.call(e,n)&&r(n));}),h(e,r)},!y("json-stringify")){var k={92:"\\\\",34:'\\"',8:"\\b",12:"\\f",10:"\\n",13:"\\r",9:"\\t"},S=function(e,t){return("000000"+(t||0)).slice(-e)},L=function(e){for(var t='"',r=0,n=e.length,o=!w||n>10,i=o&&(w?e.split(""):e);r<n;r++){var s=e.charCodeAt(r);switch(s){case 8:case 9:case 10:case 12:case 13:case 34:case 92:t+=k[s];break;default:if(s<32){t+="\\u00"+S(2,s.toString(16));break}t+=o?i[r]:e.charAt(r)}}return t+'"'},q=function(e,t,r,n,o,i,s){var a,c,l,d,p,m,b,y,w,E,k,N,T,C,_,O;try{a=t[e]}catch(e){}if("object"==typeof a&&a)if("[object Date]"!=(c=g.call(a))||f.call(a,"toJSON"))"function"==typeof a.toJSON&&("[object Number]"!=c&&"[object String]"!=c&&"[object Array]"!=c||f.call(a,"toJSON"))&&(a=a.toJSON(e));else if(a>-1/0&&a<1/0){if(A){for(p=x(a/864e5),l=x(p/365.2425)+1970-1;A(l+1,0)<=p;l++);for(d=x((p-A(l,0))/30.42);A(l,d+1)<=p;d++);p=1+p-A(l,d),b=x((m=(a%864e5+864e5)%864e5)/36e5)%24,y=x(m/6e4)%60,w=x(m/1e3)%60,E=m%1e3}else l=a.getUTCFullYear(),d=a.getUTCMonth(),p=a.getUTCDate(),b=a.getUTCHours(),y=a.getUTCMinutes(),w=a.getUTCSeconds(),E=a.getUTCMilliseconds();a=(l<=0||l>=1e4?(l<0?"-":"+")+S(6,l<0?-l:l):S(4,l))+"-"+S(2,d+1)+"-"+S(2,p)+"T"+S(2,b)+":"+S(2,y)+":"+S(2,w)+"."+S(3,E)+"Z"}else a=null;if(r&&(a=r.call(t,e,a)),null===a)return"null";if("[object Boolean]"==(c=g.call(a)))return""+a;if("[object Number]"==c)return a>-1/0&&a<1/0?""+a:"null";if("[object String]"==c)return L(""+a);if("object"==typeof a){for(C=s.length;C--;)if(s[C]===a)throw u();if(s.push(a),k=[],_=i,i+=o,"[object Array]"==c){for(T=0,C=a.length;T<C;T++)N=q(T,a,r,n,o,i,s),k.push(N===v?"null":N);O=k.length?o?"[\n"+i+k.join(",\n"+i)+"\n"+_+"]":"["+k.join(",")+"]":"[]"}else h(n||a,function(e){var t=q(e,a,r,n,o,i,s);t!==v&&k.push(L(e)+":"+(o?" ":"")+t)}),O=k.length?o?"{\n"+i+k.join(",\n"+i)+"\n"+_+"}":"{"+k.join(",")+"}":"{}";return s.pop(),O}};r.stringify=function(e,r,n){var o,i,s,a;if(t[typeof r]&&r)if("[object Function]"==(a=g.call(r)))i=r;else if("[object Array]"==a){s={};for(var c,l=0,u=r.length;l<u;c=r[l++],("[object String]"==(a=g.call(c))||"[object Number]"==a)&&(s[c]=1));}if(n)if("[object Number]"==(a=g.call(n))){if((n-=n%1)>0)for(o="",n>10&&(n=10);o.length<n;o+=" ");}else"[object String]"==a&&(o=n.length<=10?n:n.slice(0,10));return q("",((c={})[""]=e,c),i,s,o,"",[])}}if(!y("json-parse")){var N,T,C=o.fromCharCode,_={92:"\\",34:'"',47:"/",98:"\b",116:"\t",110:"\n",102:"\f",114:"\r"},O=function(){throw N=T=null,l()},j=function(){for(var e,t,r,n,o,i=T,s=i.length;N<s;)switch(o=i.charCodeAt(N)){case 9:case 10:case 13:case 32:N++;break;case 123:case 125:case 91:case 93:case 58:case 44:return e=w?i.charAt(N):i[N],N++,e;case 34:for(e="@",N++;N<s;)if((o=i.charCodeAt(N))<32)O();else if(92==o)switch(o=i.charCodeAt(++N)){case 92:case 34:case 47:case 98:case 116:case 110:case 102:case 114:e+=_[o],N++;break;case 117:for(t=++N,r=N+4;N<r;N++)(o=i.charCodeAt(N))>=48&&o<=57||o>=97&&o<=102||o>=65&&o<=70||O();e+=C("0x"+i.slice(t,N));break;default:O()}else{if(34==o)break;for(o=i.charCodeAt(N),t=N;o>=32&&92!=o&&34!=o;)o=i.charCodeAt(++N);e+=i.slice(t,N)}if(34==i.charCodeAt(N))return N++,e;O();default:if(t=N,45==o&&(n=!0,o=i.charCodeAt(++N)),o>=48&&o<=57){for(48==o&&(o=i.charCodeAt(N+1))>=48&&o<=57&&O(),n=!1;N<s&&(o=i.charCodeAt(N))>=48&&o<=57;N++);if(46==i.charCodeAt(N)){for(r=++N;r<s&&(o=i.charCodeAt(r))>=48&&o<=57;r++);r==N&&O(),N=r}if(101==(o=i.charCodeAt(N))||69==o){for(43!=(o=i.charCodeAt(++N))&&45!=o||N++,r=N;r<s&&(o=i.charCodeAt(r))>=48&&o<=57;r++);r==N&&O(),N=r}return+i.slice(t,N)}if(n&&O(),"true"==i.slice(N,N+4))return N+=4,!0;if("false"==i.slice(N,N+5))return N+=5,!1;if("null"==i.slice(N,N+4))return N+=4,null;O()}return"$"},I=function(e){var t,r;if("$"==e&&O(),"string"==typeof e){if("@"==(w?e.charAt(0):e[0]))return e.slice(1);if("["==e){for(t=[];"]"!=(e=j());r||(r=!0))r&&(","==e?"]"==(e=j())&&O():O()),","==e&&O(),t.push(I(e));return t}if("{"==e){for(t={};"}"!=(e=j());r||(r=!0))r&&(","==e?"}"==(e=j())&&O():O()),","!=e&&"string"==typeof e&&"@"==(w?e.charAt(0):e[0])&&":"==j()||O(),t[e.slice(1)]=I(j());return t}O()}return e},D=function(e,t,r){var n=R(e,t,r);n===v?delete e[t]:e[t]=n},R=function(e,t,r){var n,o=e[t];if("object"==typeof o&&o)if("[object Array]"==g.call(o))for(n=o.length;n--;)D(o,n,r);else h(o,function(e){D(o,e,r)});return r.call(e,t,o)};r.parse=function(e,t){var r,n;return N=0,T=""+e,r=I(j()),"$"!=j()&&O(),N=T=null,t&&"[object Function]"==g.call(t)?R(((n={})[""]=r,n),"",t):r}}}return r.runInContext=a,r}if(!s||s.global!==s&&s.window!==s&&s.self!==s||(i=s),o)a(i,o);else{var c=i.JSON,l=i.JSON3,u=!1,d=a(i,i.JSON3={noConflict:function(){return u||(u=!0,i.JSON=c,i.JSON3=l,c=l=null),d}});i.JSON={parse:d.parse,stringify:d.stringify}}}).call(this)}).call(this,void 0!==t?t:"undefined"!=typeof self?self:"undefined"!=typeof window?window:{})},{}],59:[function(e,t,r){"use strict";var n=Object.prototype.hasOwnProperty;r.stringify=function(e,t){var r=[];for(var o in"string"!=typeof(t=t||"")&&(t="?"),e)n.call(e,o)&&r.push(encodeURIComponent(o)+"="+encodeURIComponent(e[o]));return r.length?t+r.join("&"):""},r.parse=function(e){for(var t,r=/([^=?&]+)=?([^&]*)/g,n={};t=r.exec(e);n[decodeURIComponent(t[1])]=decodeURIComponent(t[2]));return n}},{}],60:[function(e,t,r){"use strict";t.exports=function(e,t){if(t=t.split(":")[0],!(e=+e))return!1;switch(t){case"http":case"ws":return 80!==e;case"https":case"wss":return 443!==e;case"ftp":return 21!==e;case"gopher":return 70!==e;case"file":return!1}return 0!==e}},{}],61:[function(e,t,r){"use strict";var n=e("requires-port"),o=e("./lolcation"),i=e("querystringify"),s=/^([a-z][a-z0-9.+-]*:)?(\/\/)?([\S\s]*)/i,a=[["#","hash"],["?","query"],["/","pathname"],["@","auth",1],[NaN,"host",void 0,1,1],[/:(\d+)$/,"port",void 0,1],[NaN,"hostname",void 0,1,1]];function c(e){var t=s.exec(e);return{protocol:t[1]?t[1].toLowerCase():"",slashes:!!t[2],rest:t[3]}}function l(e,t,r){if(!(this instanceof l))return new l(e,t,r);var s,u,d,p,f,h,v=a.slice(),m=typeof t,g=this,b=0;for("object"!==m&&"string"!==m&&(r=t,t=null),r&&"function"!=typeof r&&(r=i.parse),t=o(t),u=c(e||""),s=!u.protocol&&!u.slashes,g.slashes=u.slashes||s&&t.slashes,g.protocol=u.protocol||t.protocol||"",e=u.rest,u.slashes||(v[2]=[/(.*)/,"pathname"]);b<v.length;b++)p=v[b],d=p[0],h=p[1],d!=d?g[h]=e:"string"==typeof d?~(f=e.indexOf(d))&&("number"==typeof p[2]?(g[h]=e.slice(0,f),e=e.slice(f+p[2])):(g[h]=e.slice(f),e=e.slice(0,f))):(f=d.exec(e))&&(g[h]=f[1],e=e.slice(0,f.index)),g[h]=g[h]||s&&p[3]&&t[h]||"",p[4]&&(g[h]=g[h].toLowerCase());r&&(g.query=r(g.query)),s&&t.slashes&&"/"!==g.pathname.charAt(0)&&(""!==g.pathname||""!==t.pathname)&&(g.pathname=function(e,t){for(var r=(t||"/").split("/").slice(0,-1).concat(e.split("/")),n=r.length,o=r[n-1],i=!1,s=0;n--;)"."===r[n]?r.splice(n,1):".."===r[n]?(r.splice(n,1),s++):s&&(0===n&&(i=!0),r.splice(n,1),s--);return i&&r.unshift(""),"."!==o&&".."!==o||r.push(""),r.join("/")}(g.pathname,t.pathname)),n(g.port,g.protocol)||(g.host=g.hostname,g.port=""),g.username=g.password="",g.auth&&(p=g.auth.split(":"),g.username=p[0]||"",g.password=p[1]||""),g.origin=g.protocol&&g.host&&"file:"!==g.protocol?g.protocol+"//"+g.host:"null",g.href=g.toString()}l.prototype={set:function(e,t,r){var o=this;switch(e){case"query":"string"==typeof t&&t.length&&(t=(r||i.parse)(t)),o[e]=t;break;case"port":o[e]=t,n(t,o.protocol)?t&&(o.host=o.hostname+":"+t):(o.host=o.hostname,o[e]="");break;case"hostname":o[e]=t,o.port&&(t+=":"+o.port),o.host=t;break;case"host":o[e]=t,/:\d+$/.test(t)?(t=t.split(":"),o.port=t.pop(),o.hostname=t.join(":")):(o.hostname=t,o.port="");break;case"protocol":o.protocol=t.toLowerCase(),o.slashes=!r;break;case"pathname":o.pathname=t.length&&"/"!==t.charAt(0)?"/"+t:t;break;default:o[e]=t}for(var s=0;s<a.length;s++){var c=a[s];c[4]&&(o[c[1]]=o[c[1]].toLowerCase())}return o.origin=o.protocol&&o.host&&"file:"!==o.protocol?o.protocol+"//"+o.host:"null",o.href=o.toString(),o},toString:function(e){e&&"function"==typeof e||(e=i.stringify);var t,r=this,n=r.protocol;n&&":"!==n.charAt(n.length-1)&&(n+=":");var o=n+(r.slashes?"//":"");return r.username&&(o+=r.username,r.password&&(o+=":"+r.password),o+="@"),o+=r.host+r.pathname,(t="object"==typeof r.query?e(r.query):r.query)&&(o+="?"!==t.charAt(0)?"?"+t:t),r.hash&&(o+=r.hash),o}},l.extractProtocol=c,l.location=o,l.qs=i,t.exports=l},{"./lolcation":62,querystringify:59,"requires-port":60}],62:[function(e,r,n){(function(t){"use strict";var n,o=/^[A-Za-z][A-Za-z0-9+-.]*:\/\//,i={hash:1,query:1};r.exports=function(r){r=r||t.location||{},n=n||e("./");var s,a={},c=typeof r;if("blob:"===r.protocol)a=new n(unescape(r.pathname),{});else if("string"===c)for(s in a=new n(r,{}),i)delete a[s];else if("object"===c){for(s in r)s in i||(a[s]=r[s]);void 0===a.slashes&&(a.slashes=o.test(r.href))}return a}}).call(this,void 0!==t?t:"undefined"!=typeof self?self:"undefined"!=typeof window?window:{})},{"./":61}]},{},[1])(1)}).call(this,r(1))},function(e,t,r){"use strict";var n=r(14),o=0,i=null,s=function(e,t){(i=new n(e)).onopen=function(){o=0},i.onclose=function(){if(0===o&&t.close(),i=null,o<=10){var r=1e3*Math.pow(2,o)+100*Math.random();o+=1,setTimeout(function(){s(e,t)},r)}},i.onmessage=function(e){var r=JSON.parse(e.data);t[r.type]&&t[r.type](r.data)}};e.exports=s},function(e,t,r){var n,o;!function(i,s){"use strict";void 0===(o="function"==typeof(n=function(){var e=function(){},t="undefined",r=["trace","debug","info","warn","error"];function n(e,t){var r=e[t];if("function"==typeof r.bind)return r.bind(e);try{return Function.prototype.bind.call(r,e)}catch(t){return function(){return Function.prototype.apply.apply(r,[e,arguments])}}}function o(t,n){for(var o=0;o<r.length;o++){var i=r[o];this[i]=o<t?e:this.methodFactory(i,t,n)}this.log=this.debug}function i(r,i,s){return function(r){"debug"===r&&(r="log");return typeof console!==t&&(void 0!==console[r]?n(console,r):void 0!==console.log?n(console,"log"):e)}(r)||function(e,r,n){return function(){typeof console!==t&&(o.call(this,r,n),this[e].apply(this,arguments))}}.apply(this,arguments)}function s(e,n,s){var a,c=this,l="loglevel";function u(){var e;if(typeof window!==t){try{e=window.localStorage[l]}catch(e){}if(typeof e===t)try{var r=window.document.cookie,n=r.indexOf(encodeURIComponent(l)+"=");-1!==n&&(e=/^([^;]+)/.exec(r.slice(n))[1])}catch(e){}return void 0===c.levels[e]&&(e=void 0),e}}e&&(l+=":"+e),c.name=e,c.levels={TRACE:0,DEBUG:1,INFO:2,WARN:3,ERROR:4,SILENT:5},c.methodFactory=s||i,c.getLevel=function(){return a},c.setLevel=function(n,i){if("string"==typeof n&&void 0!==c.levels[n.toUpperCase()]&&(n=c.levels[n.toUpperCase()]),!("number"==typeof n&&n>=0&&n<=c.levels.SILENT))throw"log.setLevel() called with invalid level: "+n;if(a=n,!1!==i&&function(e){var n=(r[e]||"silent").toUpperCase();if(typeof window===t)return;try{return void(window.localStorage[l]=n)}catch(e){}try{window.document.cookie=encodeURIComponent(l)+"="+n+";"}catch(e){}}(n),o.call(c,n,e),typeof console===t&&n<c.levels.SILENT)return"No console available for logging"},c.setDefaultLevel=function(e){u()||c.setLevel(e,!1)},c.enableAll=function(e){c.setLevel(c.levels.TRACE,e)},c.disableAll=function(e){c.setLevel(c.levels.SILENT,e)};var d=u();null==d&&(d=null==n?"WARN":n),c.setLevel(d,!1)}var a=new s,c={};a.getLogger=function(e){if("string"!=typeof e||""===e)throw new TypeError("You must supply a name when creating a logger.");var t=c[e];return t||(t=c[e]=new s(e,a.getLevel(),a.methodFactory)),t};var l=typeof window!==t?window.log:void 0;return a.noConflict=function(){return typeof window!==t&&window.log===a&&(window.log=l),a},a.getLoggers=function(){return c},a})?n.call(t,r,t,e):n)||(e.exports=o)}()},function(e,t,r){"use strict";e.exports=function(){return/[\u001b\u009b][[()#;?]*(?:[0-9]{1,4}(?:;[0-9]{0,4})*)?[0-9A-PRZcf-nqry=><]/g}},function(e,t,r){"use strict";var n=r(17)();e.exports=function(e){return"string"==typeof e?e.replace(n,""):e}},function(e,t,r){"use strict";var n=function(e){switch(typeof e){case"string":return e;case"boolean":return e?"true":"false";case"number":return isFinite(e)?e:"";default:return""}};e.exports=function(e,t,r,a){return t=t||"&",r=r||"=",null===e&&(e=void 0),"object"==typeof e?i(s(e),function(s){var a=encodeURIComponent(n(s))+r;return o(e[s])?i(e[s],function(e){return a+encodeURIComponent(n(e))}).join(t):a+encodeURIComponent(n(e[s]))}).join(t):a?encodeURIComponent(n(a))+r+encodeURIComponent(n(e)):""};var o=Array.isArray||function(e){return"[object Array]"===Object.prototype.toString.call(e)};function i(e,t){if(e.map)return e.map(t);for(var r=[],n=0;n<e.length;n++)r.push(t(e[n],n));return r}var s=Object.keys||function(e){var t=[];for(var r in e)Object.prototype.hasOwnProperty.call(e,r)&&t.push(r);return t}},function(e,t,r){"use strict";function n(e,t){return Object.prototype.hasOwnProperty.call(e,t)}e.exports=function(e,t,r,i){t=t||"&",r=r||"=";var s={};if("string"!=typeof e||0===e.length)return s;var a=/\+/g;e=e.split(t);var c=1e3;i&&"number"==typeof i.maxKeys&&(c=i.maxKeys);var l=e.length;c>0&&l>c&&(l=c);for(var u=0;u<l;++u){var d,p,f,h,v=e[u].replace(a,"%20"),m=v.indexOf(r);m>=0?(d=v.substr(0,m),p=v.substr(m+1)):(d=v,p=""),f=decodeURIComponent(d),h=decodeURIComponent(p),n(s,f)?o(s[f])?s[f].push(h):s[f]=[s[f],h]:s[f]=h}return s};var o=Array.isArray||function(e){return"[object Array]"===Object.prototype.toString.call(e)}},function(e,t,r){"use strict";t.decode=t.parse=r(20),t.encode=t.stringify=r(19)},function(e,t,r){"use strict";e.exports={isString:function(e){return"string"==typeof e},isObject:function(e){return"object"==typeof e&&null!==e},isNull:function(e){return null===e},isNullOrUndefined:function(e){return null==e}}},function(e,t){e.exports=function(e){return e.webpackPolyfill||(e.deprecate=function(){},e.paths=[],e.children||(e.children=[]),Object.defineProperty(e,"loaded",{enumerable:!0,get:function(){return e.l}}),Object.defineProperty(e,"id",{enumerable:!0,get:function(){return e.i}}),e.webpackPolyfill=1),e}},function(e,t,r){(function(e,n){var o;/*! https://mths.be/punycode v1.4.1 by @mathias */!function(i){"object"==typeof t&&t&&t.nodeType,"object"==typeof e&&e&&e.nodeType;var s="object"==typeof n&&n;s.global!==s&&s.window!==s&&s.self;var a,c=2147483647,l=36,u=1,d=26,p=38,f=700,h=72,v=128,m="-",g=/^xn--/,b=/[^\x20-\x7E]/,y=/[\x2E\u3002\uFF0E\uFF61]/g,w={overflow:"Overflow: input needs wider integers to process","not-basic":"Illegal input >= 0x80 (not a basic code point)","invalid-input":"Invalid input"},x=l-u,E=Math.floor,A=String.fromCharCode;function k(e){throw new RangeError(w[e])}function S(e,t){for(var r=e.length,n=[];r--;)n[r]=t(e[r]);return n}function L(e,t){var r=e.split("@"),n="";return r.length>1&&(n=r[0]+"@",e=r[1]),n+S((e=e.replace(y,".")).split("."),t).join(".")}function q(e){for(var t,r,n=[],o=0,i=e.length;o<i;)(t=e.charCodeAt(o++))>=55296&&t<=56319&&o<i?56320==(64512&(r=e.charCodeAt(o++)))?n.push(((1023&t)<<10)+(1023&r)+65536):(n.push(t),o--):n.push(t);return n}function N(e){return S(e,function(e){var t="";return e>65535&&(t+=A((e-=65536)>>>10&1023|55296),e=56320|1023&e),t+=A(e)}).join("")}function T(e,t){return e+22+75*(e<26)-((0!=t)<<5)}function C(e,t,r){var n=0;for(e=r?E(e/f):e>>1,e+=E(e/t);e>x*d>>1;n+=l)e=E(e/x);return E(n+(x+1)*e/(e+p))}function _(e){var t,r,n,o,i,s,a,p,f,g,b,y=[],w=e.length,x=0,A=v,S=h;for((r=e.lastIndexOf(m))<0&&(r=0),n=0;n<r;++n)e.charCodeAt(n)>=128&&k("not-basic"),y.push(e.charCodeAt(n));for(o=r>0?r+1:0;o<w;){for(i=x,s=1,a=l;o>=w&&k("invalid-input"),((p=(b=e.charCodeAt(o++))-48<10?b-22:b-65<26?b-65:b-97<26?b-97:l)>=l||p>E((c-x)/s))&&k("overflow"),x+=p*s,!(p<(f=a<=S?u:a>=S+d?d:a-S));a+=l)s>E(c/(g=l-f))&&k("overflow"),s*=g;S=C(x-i,t=y.length+1,0==i),E(x/t)>c-A&&k("overflow"),A+=E(x/t),x%=t,y.splice(x++,0,A)}return N(y)}function O(e){var t,r,n,o,i,s,a,p,f,g,b,y,w,x,S,L=[];for(y=(e=q(e)).length,t=v,r=0,i=h,s=0;s<y;++s)(b=e[s])<128&&L.push(A(b));for(n=o=L.length,o&&L.push(m);n<y;){for(a=c,s=0;s<y;++s)(b=e[s])>=t&&b<a&&(a=b);for(a-t>E((c-r)/(w=n+1))&&k("overflow"),r+=(a-t)*w,t=a,s=0;s<y;++s)if((b=e[s])<t&&++r>c&&k("overflow"),b==t){for(p=r,f=l;!(p<(g=f<=i?u:f>=i+d?d:f-i));f+=l)S=p-g,x=l-g,L.push(A(T(g+S%x,0))),p=E(S/x);L.push(A(T(p,0))),i=C(r,w,n==o),r=0,++n}++r,++t}return L.join("")}a={version:"1.4.1",ucs2:{decode:q,encode:N},decode:_,encode:O,toASCII:function(e){return L(e,function(e){return b.test(e)?"xn--"+O(e):e})},toUnicode:function(e){return L(e,function(e){return g.test(e)?_(e.slice(4).toLowerCase()):e})}},void 0===(o=function(){return a}.call(t,r,t,e))||(e.exports=o)}()}).call(this,r(23)(e),r(1))},function(e,t,r){"use strict";var n=r(24),o=r(22);function i(){this.protocol=null,this.slashes=null,this.auth=null,this.host=null,this.port=null,this.hostname=null,this.hash=null,this.search=null,this.query=null,this.pathname=null,this.path=null,this.href=null}t.parse=y,t.resolve=function(e,t){return y(e,!1,!0).resolve(t)},t.resolveObject=function(e,t){return e?y(e,!1,!0).resolveObject(t):t},t.format=function(e){o.isString(e)&&(e=y(e));return e instanceof i?e.format():i.prototype.format.call(e)},t.Url=i;var s=/^([a-z0-9.+-]+:)/i,a=/:[0-9]*$/,c=/^(\/\/?(?!\/)[^\?\s]*)(\?[^\s]*)?$/,l=["{","}","|","\\","^","`"].concat(["<",">",'"',"`"," ","\r","\n","\t"]),u=["'"].concat(l),d=["%","/","?",";","#"].concat(u),p=["/","?","#"],f=/^[+a-z0-9A-Z_-]{0,63}$/,h=/^([+a-z0-9A-Z_-]{0,63})(.*)$/,v={javascript:!0,"javascript:":!0},m={javascript:!0,"javascript:":!0},g={http:!0,https:!0,ftp:!0,gopher:!0,file:!0,"http:":!0,"https:":!0,"ftp:":!0,"gopher:":!0,"file:":!0},b=r(21);function y(e,t,r){if(e&&o.isObject(e)&&e instanceof i)return e;var n=new i;return n.parse(e,t,r),n}i.prototype.parse=function(e,t,r){if(!o.isString(e))throw new TypeError("Parameter 'url' must be a string, not "+typeof e);var i=e.indexOf("?"),a=-1!==i&&i<e.indexOf("#")?"?":"#",l=e.split(a);l[0]=l[0].replace(/\\/g,"/");var y=e=l.join(a);if(y=y.trim(),!r&&1===e.split("#").length){var w=c.exec(y);if(w)return this.path=y,this.href=y,this.pathname=w[1],w[2]?(this.search=w[2],this.query=t?b.parse(this.search.substr(1)):this.search.substr(1)):t&&(this.search="",this.query={}),this}var x=s.exec(y);if(x){var E=(x=x[0]).toLowerCase();this.protocol=E,y=y.substr(x.length)}if(r||x||y.match(/^\/\/[^@\/]+@[^@\/]+/)){var A="//"===y.substr(0,2);!A||x&&m[x]||(y=y.substr(2),this.slashes=!0)}if(!m[x]&&(A||x&&!g[x])){for(var k,S,L=-1,q=0;q<p.length;q++){-1!==(N=y.indexOf(p[q]))&&(-1===L||N<L)&&(L=N)}-1!==(S=-1===L?y.lastIndexOf("@"):y.lastIndexOf("@",L))&&(k=y.slice(0,S),y=y.slice(S+1),this.auth=decodeURIComponent(k)),L=-1;for(q=0;q<d.length;q++){var N;-1!==(N=y.indexOf(d[q]))&&(-1===L||N<L)&&(L=N)}-1===L&&(L=y.length),this.host=y.slice(0,L),y=y.slice(L),this.parseHost(),this.hostname=this.hostname||"";var T="["===this.hostname[0]&&"]"===this.hostname[this.hostname.length-1];if(!T)for(var C=this.hostname.split(/\./),_=(q=0,C.length);q<_;q++){var O=C[q];if(O&&!O.match(f)){for(var j="",I=0,D=O.length;I<D;I++)O.charCodeAt(I)>127?j+="x":j+=O[I];if(!j.match(f)){var R=C.slice(0,q),M=C.slice(q+1),P=O.match(h);P&&(R.push(P[1]),M.unshift(P[2])),M.length&&(y="/"+M.join(".")+y),this.hostname=R.join(".");break}}}this.hostname.length>255?this.hostname="":this.hostname=this.hostname.toLowerCase(),T||(this.hostname=n.toASCII(this.hostname));var U=this.port?":"+this.port:"",H=this.hostname||"";this.host=H+U,this.href+=this.host,T&&(this.hostname=this.hostname.substr(1,this.hostname.length-2),"/"!==y[0]&&(y="/"+y))}if(!v[E])for(q=0,_=u.length;q<_;q++){var B=u[q];if(-1!==y.indexOf(B)){var V=encodeURIComponent(B);V===B&&(V=escape(B)),y=y.split(B).join(V)}}var F=y.indexOf("#");-1!==F&&(this.hash=y.substr(F),y=y.slice(0,F));var z=y.indexOf("?");if(-1!==z?(this.search=y.substr(z),this.query=y.substr(z+1),t&&(this.query=b.parse(this.query)),y=y.slice(0,z)):t&&(this.search="",this.query={}),y&&(this.pathname=y),g[E]&&this.hostname&&!this.pathname&&(this.pathname="/"),this.pathname||this.search){U=this.pathname||"";var W=this.search||"";this.path=U+W}return this.href=this.format(),this},i.prototype.format=function(){var e=this.auth||"";e&&(e=(e=encodeURIComponent(e)).replace(/%3A/i,":"),e+="@");var t=this.protocol||"",r=this.pathname||"",n=this.hash||"",i=!1,s="";this.host?i=e+this.host:this.hostname&&(i=e+(-1===this.hostname.indexOf(":")?this.hostname:"["+this.hostname+"]"),this.port&&(i+=":"+this.port)),this.query&&o.isObject(this.query)&&Object.keys(this.query).length&&(s=b.stringify(this.query));var a=this.search||s&&"?"+s||"";return t&&":"!==t.substr(-1)&&(t+=":"),this.slashes||(!t||g[t])&&!1!==i?(i="//"+(i||""),r&&"/"!==r.charAt(0)&&(r="/"+r)):i||(i=""),n&&"#"!==n.charAt(0)&&(n="#"+n),a&&"?"!==a.charAt(0)&&(a="?"+a),t+i+(r=r.replace(/[?#]/g,function(e){return encodeURIComponent(e)}))+(a=a.replace("#","%23"))+n},i.prototype.resolve=function(e){return this.resolveObject(y(e,!1,!0)).format()},i.prototype.resolveObject=function(e){if(o.isString(e)){var t=new i;t.parse(e,!1,!0),e=t}for(var r=new i,n=Object.keys(this),s=0;s<n.length;s++){var a=n[s];r[a]=this[a]}if(r.hash=e.hash,""===e.href)return r.href=r.format(),r;if(e.slashes&&!e.protocol){for(var c=Object.keys(e),l=0;l<c.length;l++){var u=c[l];"protocol"!==u&&(r[u]=e[u])}return g[r.protocol]&&r.hostname&&!r.pathname&&(r.path=r.pathname="/"),r.href=r.format(),r}if(e.protocol&&e.protocol!==r.protocol){if(!g[e.protocol]){for(var d=Object.keys(e),p=0;p<d.length;p++){var f=d[p];r[f]=e[f]}return r.href=r.format(),r}if(r.protocol=e.protocol,e.host||m[e.protocol])r.pathname=e.pathname;else{for(var h=(e.pathname||"").split("/");h.length&&!(e.host=h.shift()););e.host||(e.host=""),e.hostname||(e.hostname=""),""!==h[0]&&h.unshift(""),h.length<2&&h.unshift(""),r.pathname=h.join("/")}if(r.search=e.search,r.query=e.query,r.host=e.host||"",r.auth=e.auth,r.hostname=e.hostname||e.host,r.port=e.port,r.pathname||r.search){var v=r.pathname||"",b=r.search||"";r.path=v+b}return r.slashes=r.slashes||e.slashes,r.href=r.format(),r}var y=r.pathname&&"/"===r.pathname.charAt(0),w=e.host||e.pathname&&"/"===e.pathname.charAt(0),x=w||y||r.host&&e.pathname,E=x,A=r.pathname&&r.pathname.split("/")||[],k=(h=e.pathname&&e.pathname.split("/")||[],r.protocol&&!g[r.protocol]);if(k&&(r.hostname="",r.port=null,r.host&&(""===A[0]?A[0]=r.host:A.unshift(r.host)),r.host="",e.protocol&&(e.hostname=null,e.port=null,e.host&&(""===h[0]?h[0]=e.host:h.unshift(e.host)),e.host=null),x=x&&(""===h[0]||""===A[0])),w)r.host=e.host||""===e.host?e.host:r.host,r.hostname=e.hostname||""===e.hostname?e.hostname:r.hostname,r.search=e.search,r.query=e.query,A=h;else if(h.length)A||(A=[]),A.pop(),A=A.concat(h),r.search=e.search,r.query=e.query;else if(!o.isNullOrUndefined(e.search)){if(k)r.hostname=r.host=A.shift(),(T=!!(r.host&&r.host.indexOf("@")>0)&&r.host.split("@"))&&(r.auth=T.shift(),r.host=r.hostname=T.shift());return r.search=e.search,r.query=e.query,o.isNull(r.pathname)&&o.isNull(r.search)||(r.path=(r.pathname?r.pathname:"")+(r.search?r.search:"")),r.href=r.format(),r}if(!A.length)return r.pathname=null,r.search?r.path="/"+r.search:r.path=null,r.href=r.format(),r;for(var S=A.slice(-1)[0],L=(r.host||e.host||A.length>1)&&("."===S||".."===S)||""===S,q=0,N=A.length;N>=0;N--)"."===(S=A[N])?A.splice(N,1):".."===S?(A.splice(N,1),q++):q&&(A.splice(N,1),q--);if(!x&&!E)for(;q--;q)A.unshift("..");!x||""===A[0]||A[0]&&"/"===A[0].charAt(0)||A.unshift(""),L&&"/"!==A.join("/").substr(-1)&&A.push("");var T,C=""===A[0]||A[0]&&"/"===A[0].charAt(0);k&&(r.hostname=r.host=C?"":A.length?A.shift():"",(T=!!(r.host&&r.host.indexOf("@")>0)&&r.host.split("@"))&&(r.auth=T.shift(),r.host=r.hostname=T.shift()));return(x=x||r.host&&A.length)&&!C&&A.unshift(""),A.length?r.pathname=A.join("/"):(r.pathname=null,r.path=null),o.isNull(r.pathname)&&o.isNull(r.search)||(r.path=(r.pathname?r.pathname:"")+(r.search?r.search:"")),r.auth=e.auth||r.auth,r.slashes=r.slashes||e.slashes,r.href=r.format(),r},i.prototype.parseHost=function(){var e=this.host,t=a.exec(e);t&&(":"!==(t=t[0])&&(this.port=t.substr(1)),e=e.substr(0,e.length-t.length)),e&&(this.hostname=e)}},function(e,t,r){"use strict";(function(e){var t=r(25),n=r(18),o=r(16).getLogger("webpack-dev-server"),i=r(15),s=r(13);var a=void 0,c=!0;if("undefined"!=typeof window){var l=window.location.search.toLowerCase();c=-1===l.indexOf("hotreload=false")}(a=t.parse(e.substr(1))).port&&"0"!==a.port||(a.port=self.location.port);var u=!1,d=!0,p="",f=!1,h=!1,v=!1;function m(e,t){"undefined"==typeof self||"undefined"!=typeof WorkerGlobalScope&&self instanceof WorkerGlobalScope||self.postMessage({type:"webpack"+e,data:t},"*")}o.setDefaultLevel("info");var g={hot:function(){u=!0,o.info("[WDS] Hot Module Replacement enabled.")},invalid:function(){o.info("[WDS] App updated. Recompiling..."),(f||h)&&s.clear(),m("Invalid")},hash:function(e){p=e},"still-ok":function(){o.info("[WDS] Nothing changed."),(f||h)&&s.clear(),m("StillOk")},"log-level":function(e){var t=r(8);switch(-1!==t.keys().indexOf("./log")&&t("./log").setLogLevel(e),e){case"info":case"error":o.setLevel(e);break;case"warning":o.setLevel("warn");break;case"none":o.disableAll();break;default:o.error("[WDS] Unknown clientLogLevel '"+e+"'")}},overlay:function(e){"undefined"!=typeof document&&("boolean"==typeof e?(f=!1,h=e):e&&(f=e.warnings,h=e.errors))},progress:function(e){"undefined"!=typeof document&&(v=e)},"progress-update":function(e){v&&o.info("[WDS] "+e.percent+"% - "+e.msg+".")},ok:function(){if(m("Ok"),(f||h)&&s.clear(),d)return d=!1;x()},"content-changed":function(){o.info("[WDS] Content base changed. Reloading..."),self.location.reload()},warnings:function(e){o.warn("[WDS] Warnings while compiling.");var t=e.map(function(e){return n(e)});m("Warnings",t);for(var r=0;r<t.length;r++)o.warn(t[r]);if(f&&s.showMessage(e),d)return d=!1;x()},errors:function(e){o.error("[WDS] Errors while compiling. Reload prevented.");var t=e.map(function(e){return n(e)});m("Errors",t);for(var r=0;r<t.length;r++)o.error(t[r]);h&&s.showMessage(e),d=!1},error:function(e){o.error(e)},close:function(){o.error("[WDS] Disconnected!"),m("Close")}},b=a.hostname,y=a.protocol;"0.0.0.0"!==b&&"::"!==b||self.location.hostname&&~self.location.protocol.indexOf("http")&&(b=self.location.hostname),!b||"https:"!==self.location.protocol&&"0.0.0.0"!==a.hostname||(y=self.location.protocol),i(t.format({protocol:y,auth:a.auth,hostname:b,port:a.port,pathname:null==a.path||"/"===a.path?"/sockjs-node":a.path}),g);var w=!1;function x(){if(!w&&c)if(u)o.info("[WDS] App hot update..."),r(6).emit("webpackHotUpdate",p),"undefined"!=typeof self&&self.window&&self.postMessage("webpackHotUpdate"+p,"*");else var e=self,t=self.setInterval(function(){"about:"!==e.location.protocol?n(e,t):(e=e.parent).parent===e&&n(e,t)});function n(e,t){clearInterval(t),o.info("[WDS] App updated. Reloading..."),e.location.reload()}}self.addEventListener("beforeunload",function(){w=!0})}).call(this,"?http://localhost:8080")},function(e,t,r){r(26),e.exports=r(4)}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,